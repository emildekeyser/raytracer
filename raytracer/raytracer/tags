!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
ARGB	imaging/bmp-format.cpp	/^    struct ARGB$/;"	s	namespace:__anon5b9926d60110	file:
ARGUMENT	scripting/scripting-util.h	/^#define ARGUMENT(/;"	d
AST_Node	chaiscript/language/chaiscript_common.hpp	/^      AST_Node(std::string t_ast_node_text, int t_id, Parse_Location t_loc, $/;"	f	struct:chaiscript::AST_Node
AST_Node	chaiscript/language/chaiscript_common.hpp	/^  struct AST_Node : std::enable_shared_from_this<AST_Node> {$/;"	s	namespace:chaiscript
AST_NodePtr	chaiscript/dispatchkit/proxy_functions.hpp	/^  typedef std::shared_ptr<AST_Node> AST_NodePtr;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<AST_Node>
AST_NodePtr	chaiscript/language/chaiscript_common.hpp	/^  typedef std::shared_ptr<AST_Node> AST_NodePtr;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<AST_Node>
AST_NodePtr_Const	chaiscript/language/chaiscript_common.hpp	/^  typedef std::shared_ptr<const AST_Node> AST_NodePtr_Const;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<const AST_Node>
AST_Node_Type	chaiscript/language/chaiscript_common.hpp	/^  class AST_Node_Type {$/;"	c	namespace:chaiscript
AUX	math/matrix.cpp	/^#   define AUX(/;"	d	file:
AUX	primitives/transformer-primitive.cpp	/^#define AUX(/;"	d	file:
AbstractRegistry	easylogging++.h	/^    AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	class:el::base::utils::AbstractRegistry
AbstractRegistry	easylogging++.h	/^    AbstractRegistry(void) {}$/;"	f	class:el::base::utils::AbstractRegistry
AbstractRegistry	easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	namespace:el::base::utils
Addition	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
AllowVerboseIfModuleNotSpecified	easylogging++.h	/^    AllowVerboseIfModuleNotSpecified = 2,$/;"	e	enum:el::LoggingFlag
AlphaMask	imaging/bmp-format.cpp	/^        uint32_t AlphaMask;       \/* Mask identifying bits of alpha component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
AlphaMask	imaging/bmp-format.cpp	/^        uint32_t AlphaMask;       \/* Mask identifying bits of alpha component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Alphabet	chaiscript/language/chaiscript_parser.hpp	/^      enum Alphabet$/;"	g	namespace:chaiscript::parser::detail
And	easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType
Angle	math/angle.cpp	/^math::Angle::Angle()$/;"	f	class:math::Angle
Angle	math/angle.cpp	/^math::Angle::Angle(double x)$/;"	f	class:math::Angle
Angle	math/angle.h	/^    class Angle final$/;"	c	namespace:math
Animation	animation/animation.h	/^        Animation(math::Function<T(TimeStamp)> function, animation::Duration duration)$/;"	f	class:animation::Animation
Animation	animation/animation.h	/^    class Animation$/;"	c	namespace:animation
AnimationLibrary	scripting/animation-module.cpp	/^    struct AnimationLibrary$/;"	s	namespace:__anona5945eab0110	file:
AnimationProducer	pipeline/animation-processor.cpp	/^        AnimationProducer(double fps)$/;"	f	class:__anon103f23280110::AnimationProducer	file:
AnimationProducer	pipeline/animation-processor.cpp	/^    class AnimationProducer : public Processor<animation::Animation<std::shared_ptr<Scene>>, std/;"	c	namespace:__anon103f23280110	file:
Annotation	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Annotation	chaiscript/language/chaiscript_parser.hpp	/^      bool Annotation() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Annotation_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Annotation_AST_Node(std::string t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Annotation_AST_Node
Annotation_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Annotation_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Any	chaiscript/dispatchkit/any.hpp	/^        Any(const Any &t_any) $/;"	f	class:chaiscript::detail::Any
Any	chaiscript/dispatchkit/any.hpp	/^        explicit Any(ValueType &&t_value)$/;"	f	class:chaiscript::detail::Any	typeref:typename:::type>
Any	chaiscript/dispatchkit/any.hpp	/^    class Any {$/;"	c	namespace:chaiscript::detail
AppName	easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId/;"	e	enum:el::base::FormatFlags
Arg	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Arg	chaiscript/language/chaiscript_parser.hpp	/^      bool Arg(const bool t_type_allowed = true) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Arg_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Arg_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr>/;"	f	struct:chaiscript::eval::Arg_AST_Node
Arg_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Arg_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Arg_List	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Arg_List	chaiscript/language/chaiscript_parser.hpp	/^      bool Arg_List() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Arg_List_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Arg_List_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Nod/;"	f	struct:chaiscript::eval::Arg_List_AST_Node
Arg_List_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Arg_List_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
ArgumentMapParser	scripting/scripting-util.h	/^            class ArgumentMapParser$/;"	c	namespace:raytracer::scripting::util
Arity	chaiscript/dispatchkit/callable_traits.hpp	/^        struct Arity$/;"	s	namespace:chaiscript::dispatch::detail
Arity	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Arity<Ret (Params...)>$/;"	s	namespace:chaiscript::dispatch::detail
Array	chaiscript/utility/json.hpp	/^            Array,$/;"	e	enum:json::JSON::Class
Array	chaiscript/utility/json.hpp	/^inline JSON Array( T... args ) {$/;"	f	namespace:json	typeref:typename:JSON
Array	chaiscript/utility/json.hpp	/^inline JSON Array() {$/;"	f	namespace:json	typeref:typename:JSON
ArrayRange	chaiscript/utility/json.hpp	/^        JSONConstWrapper<deque<JSON>> ArrayRange() const { $/;"	f	class:json::JSON	typeref:typename:JSONConstWrapper<deque<JSON>>
ArrayRange	chaiscript/utility/json.hpp	/^        JSONWrapper<deque<JSON>> ArrayRange() {$/;"	f	class:json::JSON	typeref:typename:JSONWrapper<deque<JSON>>
Array_Call	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Array_Call_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Array_Call_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_N/;"	f	struct:chaiscript::eval::Array_Call_AST_Node
Array_Call_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Array_Call_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Assignable_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^        Assignable_Proxy_Function(const std::vector<Type_Info> &t_types)$/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function
Assignable_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Assignable_Proxy_Function : public Proxy_Function_Impl_Base$/;"	c	namespace:chaiscript::dispatch
Assignable_Proxy_Function_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^        Assignable_Proxy_Function_Impl(std::reference_wrapper<std::function<Func>> t_f, std::sha/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl
Assignable_Proxy_Function_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^      class Assignable_Proxy_Function_Impl : public Assignable_Proxy_Function$/;"	c	namespace:chaiscript::dispatch
AsyncDispatchWorker	easylogging++.h	/^    AsyncDispatchWorker() {$/;"	f	class:el::base::AsyncDispatchWorker
AsyncDispatchWorker	easylogging++.h	/^class AsyncDispatchWorker : public base::IWorker, public base::threading::ThreadSafe {$/;"	c	namespace:el::base
AsyncLogDispatchCallback	easylogging++.h	/^class AsyncLogDispatchCallback : public LogDispatchCallback {$/;"	c	namespace:el::base
AsyncLogItem	easylogging++.h	/^    explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base:/;"	f	class:el::base::AsyncLogItem
AsyncLogItem	easylogging++.h	/^class AsyncLogItem {$/;"	c	namespace:el::base
AsyncLogQueue	easylogging++.h	/^class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	namespace:el::base
Attr_Decl	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Attr_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Attr_Decl_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_No/;"	f	struct:chaiscript::eval::Attr_Decl_AST_Node
Attr_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Attr_Decl_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Attribute_Access	chaiscript/dispatchkit/proxy_functions.hpp	/^        Attribute_Access(T Class::* t_attr)$/;"	f	class:chaiscript::dispatch::Attribute_Access
Attribute_Access	chaiscript/dispatchkit/proxy_functions.hpp	/^      class Attribute_Access : public Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch
AutoSpacing	easylogging++.h	/^    AutoSpacing = 8192,$/;"	e	enum:el::LoggingFlag
BIND	scripting/animation-module.cpp	/^#define BIND(/;"	d	file:
BIND	scripting/cameras-module.cpp	/^#   define BIND(/;"	d	file:
BIND	scripting/imaging-module.cpp	/^#   define BIND(/;"	d	file:
BIND	scripting/lights-module.cpp	/^#   define BIND(/;"	d	file:
BIND	scripting/materials-module.cpp	/^#   define BIND(/;"	d	file:
BIND	scripting/math-module.cpp	/^#       define BIND(/;"	d	file:
BIND	scripting/pipeline-module.cpp	/^#   define BIND(/;"	d	file:
BIND	scripting/raytracing-module.cpp	/^#   define BIND(/;"	d	file:
BIND	scripting/samplers-module.cpp	/^#   define BIND(/;"	d	file:
BIND_ARGUMENT	scripting/scripting-util.h	/^#define BIND_ARGUMENT(/;"	d
BIND_AS	scripting/animation-module.cpp	/^#define BIND_AS(/;"	d	file:
BIND_AS	scripting/cameras-module.cpp	/^#   define BIND_AS(/;"	d	file:
BIND_AS	scripting/lights-module.cpp	/^#   define BIND_AS(/;"	d	file:
BIND_AS	scripting/materials-module.cpp	/^#   define BIND_AS(/;"	d	file:
BIND_AS	scripting/pipeline-module.cpp	/^#   define BIND_AS(/;"	d	file:
BIND_AS	scripting/rendering-module.cpp	/^#   define BIND_AS(/;"	d	file:
BIND_DIRECTLY	scripting/primitives-module.cpp	/^#   define BIND_DIRECTLY(/;"	d	file:
BIND_HELPER_FUNCTION	scripting/primitives-module.cpp	/^#   define BIND_HELPER_FUNCTION(/;"	d	file:
BIND_HELPER_FUNCTION_AS	scripting/primitives-module.cpp	/^#   define BIND_HELPER_FUNCTION_AS(/;"	d	file:
BITMAP_FILE_V3	imaging/bmp-format.cpp	/^    struct BITMAP_FILE_V3$/;"	s	namespace:__anon5b9926d60110	file:
BITMAP_FILE_V4	imaging/bmp-format.cpp	/^    struct BITMAP_FILE_V4$/;"	s	namespace:__anon5b9926d60110	file:
BITMAP_FILE_V5	imaging/bmp-format.cpp	/^    struct BITMAP_FILE_V5$/;"	s	namespace:__anon5b9926d60110	file:
BITMAP_HEADER_V2	imaging/bmp-format.cpp	/^    struct BITMAP_HEADER_V2$/;"	s	namespace:__anon5b9926d60110	file:
BITMAP_HEADER_V3	imaging/bmp-format.cpp	/^    struct BITMAP_HEADER_V3$/;"	s	namespace:__anon5b9926d60110	file:
BITMAP_HEADER_V4	imaging/bmp-format.cpp	/^    struct BITMAP_HEADER_V4$/;"	s	namespace:__anon5b9926d60110	file:
BITMAP_HEADER_V5	imaging/bmp-format.cpp	/^    struct BITMAP_HEADER_V5$/;"	s	namespace:__anon5b9926d60110	file:
BUILD_NUMBER	version.h	/^#define BUILD_NUMBER /;"	d
BackingData	chaiscript/utility/json.hpp	/^        BackingData( bool   b ) : Bool( b ){}$/;"	f	union:json::JSON::BackingData
BackingData	chaiscript/utility/json.hpp	/^        BackingData( double d ) : Float( d ){}$/;"	f	union:json::JSON::BackingData
BackingData	chaiscript/utility/json.hpp	/^        BackingData( long   l ) : Int( l ){}$/;"	f	union:json::JSON::BackingData
BackingData	chaiscript/utility/json.hpp	/^        BackingData( string s ) : String( new string( s ) ){}$/;"	f	union:json::JSON::BackingData
BackingData	chaiscript/utility/json.hpp	/^        BackingData()           : Int( 0 ){}$/;"	f	union:json::JSON::BackingData
BackingData	chaiscript/utility/json.hpp	/^    union BackingData {$/;"	u	class:json::JSON
Bare_Type	chaiscript/dispatchkit/type_info.hpp	/^      struct Bare_Type$/;"	s	namespace:chaiscript::detail
Base64	util/base64.cpp	/^Base64::Base64()$/;"	f	class:Base64
Base64	util/base64.h	/^class Base64$/;"	c
Base64Processor	pipeline/base64-processor.cpp	/^    class Base64Processor : public Processor<std::shared_ptr<std::vector<uint8_t>>, std::string>$/;"	c	namespace:__anon63dcdf0d0110	file:
Bidir_Range	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          Bidir_Range(Container &c)$/;"	f	struct:chaiscript::bootstrap::standard_library::Bidir_Range
Bidir_Range	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        struct Bidir_Range$/;"	s	namespace:chaiscript::bootstrap::standard_library
Binary	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
BinaryUnionImplementation	primitives/union-primitive.cpp	/^        BinaryUnionImplementation(Primitive child1, Primitive child2)$/;"	f	class:__anond3e0bd200110::BinaryUnionImplementation	file:
BinaryUnionImplementation	primitives/union-primitive.cpp	/^    class BinaryUnionImplementation : public raytracer::primitives::_private_::PrimitiveImplemen/;"	c	namespace:__anond3e0bd200110	file:
Binary_	chaiscript/language/chaiscript_parser.hpp	/^      bool Binary_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Binary_Operator_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Binary_Operator_AST_Node(const std::string &t_oper, Parse_Location t_loc, std::vector<AS/;"	f	struct:chaiscript::eval::Binary_Operator_AST_Node
Binary_Operator_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Binary_Operator_AST_Node : AST_Node {$/;"	s	namespace:chaiscript::eval
Bitmap	imaging/bitmap.cpp	/^imaging::Bitmap::Bitmap(unsigned width, unsigned height)$/;"	f	class:imaging::Bitmap
Bitmap	imaging/bitmap.h	/^    class Bitmap final$/;"	c	namespace:imaging
BitmapOffset	imaging/bmp-format.cpp	/^        uint32_t BitmapOffset; \/* Starting position of image data in bytes *\/$/;"	m	struct:__anon5b9926d60110::FILE_HEADER	typeref:typename:uint32_t	file:
BitsPerPixel	imaging/bmp-format.cpp	/^        uint16_t BitsPerPixel;    \/* Number of bits per pixel *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V2	typeref:typename:uint16_t	file:
BitsPerPixel	imaging/bmp-format.cpp	/^        uint16_t BitsPerPixel;    \/* Number of bits per pixel *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint16_t	file:
BitsPerPixel	imaging/bmp-format.cpp	/^        uint16_t BitsPerPixel;    \/* Number of bits per pixel *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint16_t	file:
BitsPerPixel	imaging/bmp-format.cpp	/^        uint16_t BitsPerPixel;    \/* Number of bits per pixel *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint16_t	file:
Bitwise_And	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Bitwise_Or	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Bitwise_Xor	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Block	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Block	chaiscript/language/chaiscript_parser.hpp	/^      bool Block() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Block_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Block_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePt/;"	f	struct:chaiscript::eval::Block_AST_Node
Block_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Block_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
BlueMask	imaging/bmp-format.cpp	/^        uint32_t BlueMask;        \/* Mask identifying bits of blue component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
BlueMask	imaging/bmp-format.cpp	/^        uint32_t BlueMask;        \/* Mask identifying bits of blue component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
BlueX	imaging/bmp-format.cpp	/^        int32_t  BlueX;           \/* X coordinate of blue endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
BlueX	imaging/bmp-format.cpp	/^        int32_t  BlueX;           \/* X coordinate of blue endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
BlueY	imaging/bmp-format.cpp	/^        int32_t  BlueY;           \/* Y coordinate of blue endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
BlueY	imaging/bmp-format.cpp	/^        int32_t  BlueY;           \/* Y coordinate of blue endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
BlueZ	imaging/bmp-format.cpp	/^        int32_t  BlueZ;           \/* Z coordinate of blue endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
BlueZ	imaging/bmp-format.cpp	/^        int32_t  BlueZ;           \/* Z coordinate of blue endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Bool	chaiscript/utility/json.hpp	/^        bool                Bool;$/;"	m	union:json::JSON::BackingData	typeref:typename:bool
Boolean	chaiscript/utility/json.hpp	/^            Boolean$/;"	e	enum:json::JSON::Class
Bootstrap	chaiscript/dispatchkit/bootstrap.hpp	/^    class Bootstrap$/;"	c	namespace:chaiscript::bootstrap
Bound_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^        Bound_Function(const Const_Proxy_Function &t_f, $/;"	f	class:chaiscript::dispatch::Bound_Function
Bound_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Bound_Function : public Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch
Box	math/box.cpp	/^math::Box::Box(const Interval<double>& x_interval, const Interval<double>& y_interval, const Int/;"	f	class:math::Box
Box	math/box.h	/^    class Box$/;"	c	namespace:math
Boxed_Number	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number()$/;"	f	class:chaiscript::Boxed_Number
Boxed_Number	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number(Boxed_Value v)$/;"	f	class:chaiscript::Boxed_Number
Boxed_Number	chaiscript/dispatchkit/boxed_number.hpp	/^      template<typename T> explicit Boxed_Number(T t)$/;"	f	class:chaiscript::Boxed_Number
Boxed_Number	chaiscript/dispatchkit/boxed_number.hpp	/^  class Boxed_Number$/;"	c	namespace:chaiscript
Boxed_Value	chaiscript/dispatchkit/boxed_value.hpp	/^        explicit Boxed_Value(T &&t, bool t_return_value = false)$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:::type>
Boxed_Value	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value()$/;"	f	class:chaiscript::Boxed_Value
Boxed_Value	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value(const std::shared_ptr<Data> &t_data, Internal_Construction)$/;"	f	class:chaiscript::Boxed_Value
Boxed_Value	chaiscript/dispatchkit/boxed_value.hpp	/^  class Boxed_Value$/;"	c	namespace:chaiscript
Break	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Break	chaiscript/language/chaiscript_parser.hpp	/^      bool Break() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Break_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Break_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePt/;"	f	struct:chaiscript::eval::Break_AST_Node
Break_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Break_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Break_Loop	chaiscript/language/chaiscript_common.hpp	/^        Break_Loop() { }$/;"	f	struct:chaiscript::eval::detail::Break_Loop
Break_Loop	chaiscript/language/chaiscript_common.hpp	/^      struct Break_Loop {$/;"	s	namespace:chaiscript::eval::detail
Build_Function_Caller_Helper	chaiscript/dispatchkit/function_call_detail.hpp	/^          Build_Function_Caller_Helper(std::vector<Const_Proxy_Function> t_funcs, const Type_Con/;"	f	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper
Build_Function_Caller_Helper	chaiscript/dispatchkit/function_call_detail.hpp	/^        struct Build_Function_Caller_Helper$/;"	s	namespace:chaiscript::dispatch::detail
CATCH_ARC_ENABLED	Catch.h	/^#define CATCH_ARC_ENABLED 0$/;"	M
CATCH_ARC_ENABLED	Catch.h	/^#define CATCH_ARC_ENABLED __has_feature(objc_arc)$/;"	M
CATCH_ARC_STRONG	Catch.h	/^#define CATCH_ARC_STRONG __strong$/;"	M
CATCH_ARC_STRONG	Catch.h	/^#define CATCH_ARC_STRONG$/;"	M
CATCH_CONFIG_CPP11_GENERATED_METHODS	Catch.h	/^#   define CATCH_CONFIG_CPP11_GENERATED_METHODS$/;"	M
CATCH_CONFIG_CPP11_IS_ENUM	Catch.h	/^#   define CATCH_CONFIG_CPP11_IS_ENUM$/;"	M
CATCH_CONFIG_CPP11_NOEXCEPT	Catch.h	/^#   define CATCH_CONFIG_CPP11_NOEXCEPT$/;"	M
CATCH_CONFIG_CPP11_NULLPTR	Catch.h	/^#   define CATCH_CONFIG_CPP11_NULLPTR$/;"	M
CATCH_CONFIG_CPP11_TUPLE	Catch.h	/^#   define CATCH_CONFIG_CPP11_TUPLE$/;"	M
CATCH_CONFIG_RUNNER	tests/main.cpp	/^#define CATCH_CONFIG_RUNNER$/;"	d	file:
CATCH_CONFIG_VARIADIC_MACROS	Catch.h	/^#define CATCH_CONFIG_VARIADIC_MACROS$/;"	M
CATCH_CPP11_OR_GREATER	Catch.h	/^#  define CATCH_CPP11_OR_GREATER$/;"	M
CATCH_IMPL	Catch.h	/^#  define CATCH_IMPL$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	Catch.h	/^#    define CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	Catch.h	/^#define CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM	Catch.h	/^#    define CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	Catch.h	/^#    define CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	Catch.h	/^#define CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	Catch.h	/^#    define CATCH_INTERNAL_CONFIG_CPP11_NULLPTR$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	Catch.h	/^#   define CATCH_INTERNAL_CONFIG_CPP11_NULLPTR$/;"	M
CATCH_INTERNAL_CONFIG_CPP11_TUPLE	Catch.h	/^#    define CATCH_INTERNAL_CONFIG_CPP11_TUPLE$/;"	M
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	Catch.h	/^#    define CATCH_INTERNAL_CONFIG_VARIADIC_MACROS$/;"	M
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	Catch.h	/^#define CATCH_INTERNAL_CONFIG_VARIADIC_MACROS$/;"	M
CATCH_INTERNAL_ERROR	Catch.h	/^#define CATCH_INTERNAL_ERROR( msg ) ::Catch::throwLogicError( msg, CATCH_INTERNAL_LINEINFO );$/;"	M
CATCH_INTERNAL_LINEINFO	Catch.h	/^#define CATCH_INTERNAL_LINEINFO ::Catch::SourceLineInfo( __FILE__, static_cast<std::size_t>( __L/;"	M
CATCH_NOEXCEPT	Catch.h	/^#  define CATCH_NOEXCEPT noexcept$/;"	M
CATCH_NOEXCEPT	Catch.h	/^#  define CATCH_NOEXCEPT throw()$/;"	M
CATCH_NOEXCEPT_IS	Catch.h	/^#  define CATCH_NOEXCEPT_IS(x) noexcept(x)$/;"	M
CATCH_NOEXCEPT_IS	Catch.h	/^#  define CATCH_NOEXCEPT_IS(x)$/;"	M
CATCH_NOT_IMPLEMENTED	Catch.h	/^#define CATCH_NOT_IMPLEMENTED throw Catch::NotImplementedException( CATCH_INTERNAL_LINEINFO )$/;"	M
CATCH_UNSAFE_UNRETAINED	Catch.h	/^#define CATCH_UNSAFE_UNRETAINED __unsafe_unretained$/;"	M
CATCH_UNSAFE_UNRETAINED	Catch.h	/^#define CATCH_UNSAFE_UNRETAINED$/;"	M
CC	Makefile	/^CC=g++$/;"	m
CHAISCRIPT_ALGEBRAIC_HPP_	chaiscript/language/chaiscript_algebraic.hpp	/^#define CHAISCRIPT_ALGEBRAIC_HPP_$/;"	d
CHAISCRIPT_ANY_HPP_	chaiscript/dispatchkit/any.hpp	/^#define CHAISCRIPT_ANY_HPP_$/;"	d
CHAISCRIPT_BAD_BOXED_CAST_HPP_	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^#define CHAISCRIPT_BAD_BOXED_CAST_HPP_$/;"	d
CHAISCRIPT_BIND_FIRST_HPP_	chaiscript/dispatchkit/bind_first.hpp	/^#define CHAISCRIPT_BIND_FIRST_HPP_$/;"	d
CHAISCRIPT_BOOTSTRAP_HPP_	chaiscript/dispatchkit/bootstrap.hpp	/^#define CHAISCRIPT_BOOTSTRAP_HPP_$/;"	d
CHAISCRIPT_BOOTSTRAP_STL_HPP_	chaiscript/dispatchkit/bootstrap_stl.hpp	/^#define CHAISCRIPT_BOOTSTRAP_STL_HPP_$/;"	d
CHAISCRIPT_BOXED_CAST_HELPER_HPP_	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^#define CHAISCRIPT_BOXED_CAST_HELPER_HPP_$/;"	d
CHAISCRIPT_BOXED_CAST_HPP_	chaiscript/dispatchkit/boxed_cast.hpp	/^#define CHAISCRIPT_BOXED_CAST_HPP_$/;"	d
CHAISCRIPT_BOXED_NUMERIC_HPP_	chaiscript/dispatchkit/boxed_number.hpp	/^#define CHAISCRIPT_BOXED_NUMERIC_HPP_$/;"	d
CHAISCRIPT_BOXED_VALUE_HPP_	chaiscript/dispatchkit/boxed_value.hpp	/^#define CHAISCRIPT_BOXED_VALUE_HPP_$/;"	d
CHAISCRIPT_CALLABLE_TRAITS_HPP_	chaiscript/dispatchkit/callable_traits.hpp	/^#define CHAISCRIPT_CALLABLE_TRAITS_HPP_$/;"	d
CHAISCRIPT_CLANG	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_CLANG$/;"	d
CHAISCRIPT_COMMON_HPP_	chaiscript/language/chaiscript_common.hpp	/^#define CHAISCRIPT_COMMON_HPP_$/;"	d
CHAISCRIPT_COMPILER_NAME	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_COMPILER_NAME /;"	d
CHAISCRIPT_COMPILER_VERSION	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_COMPILER_VERSION /;"	d
CHAISCRIPT_CONSTEXPR	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_CONSTEXPR /;"	d
CHAISCRIPT_DEBUG	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_DEBUG /;"	d
CHAISCRIPT_DEFINES_HPP_	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_DEFINES_HPP_$/;"	d
CHAISCRIPT_DISPATCHKIT_HPP_	chaiscript/dispatchkit/dispatchkit.hpp	/^#define CHAISCRIPT_DISPATCHKIT_HPP_$/;"	d
CHAISCRIPT_DYNAMIC_CAST_CONVERSION_HPP_	chaiscript/dispatchkit/type_conversions.hpp	/^#define CHAISCRIPT_DYNAMIC_CAST_CONVERSION_HPP_$/;"	d
CHAISCRIPT_DYNAMIC_OBJECT_DETAIL_HPP_	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^#define CHAISCRIPT_DYNAMIC_OBJECT_DETAIL_HPP_$/;"	d
CHAISCRIPT_DYNAMIC_OBJECT_HPP_	chaiscript/dispatchkit/dynamic_object.hpp	/^#define CHAISCRIPT_DYNAMIC_OBJECT_HPP_$/;"	d
CHAISCRIPT_ENGINE_HPP_	chaiscript/language/chaiscript_engine.hpp	/^#define CHAISCRIPT_ENGINE_HPP_$/;"	d
CHAISCRIPT_EVAL_HPP_	chaiscript/language/chaiscript_eval.hpp	/^#define CHAISCRIPT_EVAL_HPP_$/;"	d
CHAISCRIPT_EXCEPTION_SPECIFICATION_HPP_	chaiscript/dispatchkit/exception_specification.hpp	/^#define CHAISCRIPT_EXCEPTION_SPECIFICATION_HPP_$/;"	d
CHAISCRIPT_FUNCTION_CALL_DETAIL_HPP_	chaiscript/dispatchkit/function_call_detail.hpp	/^#define CHAISCRIPT_FUNCTION_CALL_DETAIL_HPP_$/;"	d
CHAISCRIPT_FUNCTION_CALL_HPP_	chaiscript/dispatchkit/function_call.hpp	/^#define CHAISCRIPT_FUNCTION_CALL_HPP_$/;"	d
CHAISCRIPT_GCC_4_6	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_GCC_4_6$/;"	d
CHAISCRIPT_HANDLE_RETURN_HPP_	chaiscript/dispatchkit/handle_return.hpp	/^#define CHAISCRIPT_HANDLE_RETURN_HPP_$/;"	d
CHAISCRIPT_HAS_DECLSPEC	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_HAS_DECLSPEC$/;"	d
CHAISCRIPT_HAS_MAGIC_STATICS	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_HAS_MAGIC_STATICS$/;"	d
CHAISCRIPT_HAS_THREAD_LOCAL	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_HAS_THREAD_LOCAL$/;"	d
CHAISCRIPT_HPP_	chaiscript/chaiscript.hpp	/^#define CHAISCRIPT_HPP_$/;"	d
CHAISCRIPT_LIBCPP	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_LIBCPP$/;"	d
CHAISCRIPT_MODULE_EXPORT	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_MODULE_EXPORT /;"	d
CHAISCRIPT_MSVC	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_MSVC /;"	d
CHAISCRIPT_MSVC_12	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_MSVC_12$/;"	d
CHAISCRIPT_NOEXCEPT	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_NOEXCEPT /;"	d
CHAISCRIPT_OPERATORS_HPP_	chaiscript/dispatchkit/operators.hpp	/^#define CHAISCRIPT_OPERATORS_HPP_$/;"	d
CHAISCRIPT_OVERRIDE	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_OVERRIDE /;"	d
CHAISCRIPT_OVERRIDE	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_OVERRIDE$/;"	d
CHAISCRIPT_PARSER_HPP_	chaiscript/language/chaiscript_parser.hpp	/^#define CHAISCRIPT_PARSER_HPP_$/;"	d
CHAISCRIPT_PROXY_CONSTRUCTORS_HPP_	chaiscript/dispatchkit/proxy_constructors.hpp	/^#define CHAISCRIPT_PROXY_CONSTRUCTORS_HPP_$/;"	d
CHAISCRIPT_PROXY_FUNCTIONS_DETAIL_HPP_	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^#define CHAISCRIPT_PROXY_FUNCTIONS_DETAIL_HPP_$/;"	d
CHAISCRIPT_PROXY_FUNCTIONS_HPP_	chaiscript/dispatchkit/proxy_functions.hpp	/^#define CHAISCRIPT_PROXY_FUNCTIONS_HPP_$/;"	d
CHAISCRIPT_PUSHEDMINMAX	chaiscript/language/chaiscript_parser.hpp	/^#define CHAISCRIPT_PUSHEDMINMAX$/;"	d
CHAISCRIPT_REGISTER_FUNCTION_HPP_	chaiscript/dispatchkit/register_function.hpp	/^#define CHAISCRIPT_REGISTER_FUNCTION_HPP_$/;"	d
CHAISCRIPT_SIMPLEJSON_WRAP_HPP	chaiscript/utility/json_wrap.hpp	/^#define CHAISCRIPT_SIMPLEJSON_WRAP_HPP$/;"	d
CHAISCRIPT_STDLIB_HPP_	chaiscript/chaiscript_stdlib.hpp	/^#define CHAISCRIPT_STDLIB_HPP_$/;"	d
CHAISCRIPT_STRINGIZE	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_STRINGIZE(/;"	d
CHAISCRIPT_THREADING_HPP_	chaiscript/chaiscript_threading.hpp	/^#define CHAISCRIPT_THREADING_HPP_$/;"	d
CHAISCRIPT_TYPE_INFO_HPP_	chaiscript/dispatchkit/type_info.hpp	/^#define CHAISCRIPT_TYPE_INFO_HPP_$/;"	d
CHAISCRIPT_UTILITY_UTILITY_HPP_	chaiscript/utility/utility.hpp	/^#define CHAISCRIPT_UTILITY_UTILITY_HPP_$/;"	d
CHAISCRIPT_WINDOWS	chaiscript/chaiscript_defines.hpp	/^#define CHAISCRIPT_WINDOWS$/;"	d
CLARA_CONFIG_MAIN	Catch.h	/^#    define CLARA_CONFIG_MAIN$/;"	M
CLARA_CONFIG_MAIN_NOT_DEFINED	Catch.h	/^#    define CLARA_CONFIG_MAIN_NOT_DEFINED$/;"	M
COLOR	scripting/imaging-module.cpp	/^#       define COLOR(/;"	d	file:
CREATE_PERFORMANCE_COUNTER	performance/performance.h	/^#define CREATE_PERFORMANCE_COUNTER(/;"	d
CSType	imaging/bmp-format.cpp	/^        uint32_t CSType;          \/* Color space type *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
CSType	imaging/bmp-format.cpp	/^        uint32_t CSType;          \/* Color space type *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Call_Func	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        struct Call_Func$/;"	s	namespace:chaiscript::dispatch::detail
Call_Func	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        struct Call_Func<Ret, 0, Params...>$/;"	s	namespace:chaiscript::dispatch::detail
Callable_Traits	chaiscript/dispatchkit/callable_traits.hpp	/^        struct Callable_Traits$/;"	s	namespace:chaiscript::dispatch::detail
Callback	easylogging++.h	/^    Callback(void) : m_enabled(true) {}$/;"	f	class:el::Callback
Callback	easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	namespace:el
Caller	chaiscript/dispatchkit/callable_traits.hpp	/^        Caller(Ret (Class::*t_func)(Param...)) : m_func(t_func) {}$/;"	f	struct:chaiscript::dispatch::detail::Caller
Caller	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Caller$/;"	s	namespace:chaiscript::dispatch::detail
Camera	cameras/camera.h	/^        explicit Camera(std::shared_ptr<cameras::_private_::CameraImplementation> implementation/;"	f	class:raytracer::Camera
Camera	cameras/camera.h	/^    class Camera$/;"	c	namespace:raytracer
CameraImplementation	cameras/camera.h	/^            class CameraImplementation$/;"	c	namespace:raytracer::cameras::_private_
CameraLibrary	scripting/cameras-module.cpp	/^    struct CameraLibrary$/;"	s	namespace:__anone59b1e270110	file:
Cartesian2D	math/coordinate-systems.h	/^    struct Cartesian2D$/;"	s	namespace:math
Cartesian3D	math/coordinate-systems.h	/^    struct Cartesian3D$/;"	s	namespace:math
Case	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Case	chaiscript/language/chaiscript_parser.hpp	/^      bool Case() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Case_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Case_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr/;"	f	struct:chaiscript::eval::Case_AST_Node
Case_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Case_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Cast_Helper	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper$/;"	s	namespace:chaiscript::detail
Cast_Helper	chaiscript/dispatchkit/boxed_number.hpp	/^      struct Cast_Helper<Boxed_Number>$/;"	s	namespace:chaiscript::detail
Cast_Helper	chaiscript/dispatchkit/boxed_number.hpp	/^      struct Cast_Helper<const Boxed_Number &> : Cast_Helper<Boxed_Number>$/;"	s	namespace:chaiscript::detail
Cast_Helper	chaiscript/dispatchkit/boxed_number.hpp	/^      struct Cast_Helper<const Boxed_Number> : Cast_Helper<Boxed_Number>$/;"	s	namespace:chaiscript::detail
Cast_Helper	chaiscript/dispatchkit/function_call.hpp	/^      struct Cast_Helper<const std::function<Signature> &>$/;"	s	namespace:chaiscript::detail
Cast_Helper	chaiscript/dispatchkit/function_call.hpp	/^      struct Cast_Helper<const std::function<Signature> >$/;"	s	namespace:chaiscript::detail
Cast_Helper	chaiscript/dispatchkit/function_call.hpp	/^      struct Cast_Helper<std::function<Signature> >$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<Boxed_Value &>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<Boxed_Value>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<Result &>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<Result *>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const Boxed_Value &> : Cast_Helper_Inner<Boxed_Value>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const Boxed_Value> : Cast_Helper_Inner<Boxed_Value>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const Result &>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const Result *>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const Result> : Cast_Helper_Inner<Result>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::reference_wrapper<Result> &> : Cast_Helper_Inner<Resul/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::reference_wrapper<Result> > : Cast_Helper_Inner<Result/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::reference_wrapper<const Result> & > : Cast_Helper_Inne/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::reference_wrapper<const Result> > : Cast_Helper_Inner</;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::shared_ptr<Result> &> : Cast_Helper_Inner<std::shared_/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::shared_ptr<Result> > : Cast_Helper_Inner<std::shared_p/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::shared_ptr<const Result> &> : Cast_Helper_Inner<std::s/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<const std::shared_ptr<const Result> > : Cast_Helper_Inner<std::sh/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<std::reference_wrapper<Result> > : Cast_Helper_Inner<Result &>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<std::reference_wrapper<const Result> > : Cast_Helper_Inner<const /;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<std::shared_ptr<Result> >$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      struct Cast_Helper_Inner<std::shared_ptr<const Result> >$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^    struct Cast_Helper_Inner<Result * const &> : public Cast_Helper_Inner<Result *>$/;"	s	namespace:chaiscript::detail
Cast_Helper_Inner	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^    struct Cast_Helper_Inner<const Result * const &> : public Cast_Helper_Inner<const Result *>$/;"	s	namespace:chaiscript::detail
Catch	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Catch_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Catch_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePt/;"	f	struct:chaiscript::eval::Catch_AST_Node
Catch_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Catch_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
ChaiScript	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript( std::vector<std::string> t_modulepaths = std::vector<std::string>(),$/;"	f	class:chaiscript::ChaiScript
ChaiScript	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript(const ModulePtr &t_lib,$/;"	f	class:chaiscript::ChaiScript
ChaiScript	chaiscript/language/chaiscript_engine.hpp	/^  class ChaiScript {$/;"	c	namespace:chaiscript
ChaiScript_Language	chaiscript/language/chaiscript_prelude_docs.hpp	/^namespace ChaiScript_Language$/;"	n
ChaiScript_Parser	chaiscript/language/chaiscript_parser.hpp	/^      ChaiScript_Parser()$/;"	f	class:chaiscript::parser::ChaiScript_Parser
ChaiScript_Parser	chaiscript/language/chaiscript_parser.hpp	/^    class ChaiScript_Parser {$/;"	c	namespace:chaiscript::parser
Char	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Char	chaiscript/language/chaiscript_parser.hpp	/^      bool Char(const char t_c, bool t_capture = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Char_	chaiscript/language/chaiscript_parser.hpp	/^      bool Char_(const char c) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Char_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Char_AST_Node(std::string t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Char_AST_Node
Char_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Char_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Char_Parser	chaiscript/language/chaiscript_parser.hpp	/^        Char_Parser(string_type &t_match, const bool t_interpolation_allowed)$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser
Char_Parser	chaiscript/language/chaiscript_parser.hpp	/^      struct Char_Parser$/;"	s	class:chaiscript::parser::ChaiScript_Parser
Class	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Class	chaiscript/language/chaiscript_parser.hpp	/^      bool Class() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Class	chaiscript/utility/json.hpp	/^        enum class Class {$/;"	g	class:json::JSON
Class_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Class_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePt/;"	f	struct:chaiscript::eval::Class_AST_Node
Class_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Class_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Class_Block	chaiscript/language/chaiscript_parser.hpp	/^      bool Class_Block() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Class_Statements	chaiscript/language/chaiscript_parser.hpp	/^      bool Class_Statements() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Color	imaging/color.h	/^        constexpr Color() : Color(0, 0, 0) { }$/;"	f	struct:imaging::Color
Color	imaging/color.h	/^        constexpr Color(double r, double g, double b)$/;"	f	struct:imaging::Color
Color	imaging/color.h	/^    struct Color final$/;"	s	namespace:imaging
ColorLibrary	scripting/imaging-module.cpp	/^    struct ColorLibrary$/;"	s	namespace:__anonb790ac470110	file:
ColoredTerminalOutput	easylogging++.h	/^    ColoredTerminalOutput = 64,$/;"	e	enum:el::LoggingFlag
ColorsImportant	imaging/bmp-format.cpp	/^        uint32_t ColorsImportant; \/* Minimum number of important colors *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint32_t	file:
ColorsImportant	imaging/bmp-format.cpp	/^        uint32_t ColorsImportant; \/* Minimum number of important colors *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
ColorsImportant	imaging/bmp-format.cpp	/^        uint32_t ColorsImportant; \/* Minimum number of important colors *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
ColorsUsed	imaging/bmp-format.cpp	/^        uint32_t ColorsUsed;      \/* Number of colors in the image *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint32_t	file:
ColorsUsed	imaging/bmp-format.cpp	/^        uint32_t ColorsUsed;      \/* Number of colors in the image *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
ColorsUsed	imaging/bmp-format.cpp	/^        uint32_t ColorsUsed;      \/* Number of colors in the image *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
CommandLineArgs	easylogging++.h	/^    CommandLineArgs(int argc, char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs
CommandLineArgs	easylogging++.h	/^    CommandLineArgs(int argc, const char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs
CommandLineArgs	easylogging++.h	/^    CommandLineArgs(void) {$/;"	f	class:el::base::utils::CommandLineArgs
CommandLineArgs	easylogging++.h	/^class CommandLineArgs {$/;"	c	namespace:el::base::utils
CommandLineParser	command-line-parser.h	/^class CommandLineParser$/;"	c
Common_Types	chaiscript/dispatchkit/boxed_number.hpp	/^      enum class Common_Types {$/;"	g	class:chaiscript::Boxed_Number
Comparison	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Composition	math/function.h	/^        Composition(const Function<R1(Ts...)>& f, const Function<R2(RT)>& g)$/;"	f	class:math::Composition
Composition	math/function.h	/^    class Composition : public FunctionBody<R2, Ts...>$/;"	c	namespace:math
CompositionMaterial2D	materials/composition-material.cpp	/^        CompositionMaterial2D(math::Function<Material(const Point2D&)> function)$/;"	f	class:__anon13f113d70110::CompositionMaterial2D	file:
CompositionMaterial2D	materials/composition-material.cpp	/^    class CompositionMaterial2D : public raytracer::materials::_private_::MaterialImplementation$/;"	c	namespace:__anon13f113d70110	file:
CompositionMaterial3D	materials/composition-material.cpp	/^        CompositionMaterial3D(math::Function<Material(const Point3D&)> function)$/;"	f	class:__anon13f113d70110::CompositionMaterial3D	file:
CompositionMaterial3D	materials/composition-material.cpp	/^    class CompositionMaterial3D : public raytracer::materials::_private_::MaterialImplementation$/;"	c	namespace:__anon13f113d70110	file:
Compression	imaging/bmp-format.cpp	/^        uint32_t Compression;     \/* Compression methods used *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint32_t	file:
Compression	imaging/bmp-format.cpp	/^        uint32_t Compression;     \/* Compression methods used *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
Compression	imaging/bmp-format.cpp	/^        uint32_t Compression;     \/* Compression methods used *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Configuration	easylogging++.h	/^    Configuration(Level level, ConfigurationType configurationType, const std::string& value) :$/;"	f	class:el::Configuration
Configuration	easylogging++.h	/^    Configuration(const Configuration& c) :$/;"	f	class:el::Configuration
Configuration	easylogging++.h	/^class Configuration : public Loggable {$/;"	c	namespace:el
ConfigurationType	easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	g	namespace:el	typeref:typename:base::type::EnumType
ConfigurationTypeHelper	easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	namespace:el
Configurations	easylogging++.h	/^    Configurations(const std::string& configurationFile, bool useDefaultsForRemaining = true, Co/;"	f	class:el::Configurations
Configurations	easylogging++.h	/^    Configurations(void) :$/;"	f	class:el::Configurations
Configurations	easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predic/;"	c	namespace:el
Const_Bidir_Range	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          Const_Bidir_Range(const Container &c)$/;"	f	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range
Const_Bidir_Range	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        struct Const_Bidir_Range$/;"	s	namespace:chaiscript::bootstrap::standard_library
Const_Caller	chaiscript/dispatchkit/callable_traits.hpp	/^        Const_Caller(Ret (Class::*t_func)(Param...) const) : m_func(t_func) {}$/;"	f	struct:chaiscript::dispatch::detail::Const_Caller
Const_Caller	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Const_Caller$/;"	s	namespace:chaiscript::dispatch::detail
Const_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^  typedef std::shared_ptr<const dispatch::Proxy_Function_Base> Const_Proxy_Function;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<const dispatch::Proxy_Function_Base>
Const_Range	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Const_Range$/;"	c	namespace:ChaiScript_Language
Constructor	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Constructor$/;"	s	namespace:chaiscript::dispatch::detail
Consumer	pipeline/consumer.h	/^        class Consumer : public _private_::ConsumerTag, public virtual Pipeline$/;"	c	namespace:raytracer::pipeline
ConsumerTag	pipeline/consumer.h	/^            class ConsumerTag { };$/;"	c	namespace:raytracer::pipeline::_private_
Container	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Container$/;"	c	namespace:ChaiScript_Language
Container_Arg_List	chaiscript/language/chaiscript_parser.hpp	/^      bool Container_Arg_List() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Continue	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Continue	chaiscript/language/chaiscript_parser.hpp	/^      bool Continue() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Continue_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Continue_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Nod/;"	f	struct:chaiscript::eval::Continue_AST_Node
Continue_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Continue_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Continue_Loop	chaiscript/language/chaiscript_common.hpp	/^        Continue_Loop() { }$/;"	f	struct:chaiscript::eval::detail::Continue_Loop
Continue_Loop	chaiscript/language/chaiscript_common.hpp	/^      struct Continue_Loop {$/;"	s	namespace:chaiscript::eval::detail
Conversion_Saves	chaiscript/dispatchkit/type_conversions.hpp	/^        Conversion_Saves()$/;"	f	struct:chaiscript::Type_Conversions::Conversion_Saves
Conversion_Saves	chaiscript/dispatchkit/type_conversions.hpp	/^      struct Conversion_Saves$/;"	s	class:chaiscript::Type_Conversions
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Cartesian2D, Polar>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Cartesian3D, CylindricalX>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Cartesian3D, CylindricalY>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Cartesian3D, CylindricalZ>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Cartesian3D, Spherical>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<CylindricalX, Cartesian3D>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<CylindricalY, Cartesian3D>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<CylindricalZ, Cartesian3D>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Polar, Cartesian2D>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<Spherical, Cartesian3D>$/;"	s	namespace:math::_private_
CoordinateConverter	math/coordinate-systems.h	/^        struct CoordinateConverter<T, T>$/;"	s	namespace:math::_private_
CoordinatePlaneImplementation	primitives/plane-primitive.cpp	/^        CoordinatePlaneImplementation(const Vector3D& normal)$/;"	f	class:__anon22e967e70110::CoordinatePlaneImplementation	file:
CoordinatePlaneImplementation	primitives/plane-primitive.cpp	/^    class CoordinatePlaneImplementation : public raytracer::primitives::_private_::PrimitiveImpl/;"	c	namespace:__anon22e967e70110	file:
Counter	performance/performance.h	/^        Counter(performance::_private_::CounterImplementation* impl)$/;"	f	class:performance::Counter
Counter	performance/performance.h	/^    class Counter$/;"	c	namespace:performance
CounterImplementation	performance/performance.cpp	/^            CounterImplementation(const std::string& name)$/;"	f	class:performance::_private_::CounterImplementation	file:
CounterImplementation	performance/performance.cpp	/^        class CounterImplementation$/;"	c	namespace:performance::_private_	file:
CreateLoggerAutomatically	easylogging++.h	/^    CreateLoggerAutomatically = 4096,$/;"	e	enum:el::LoggingFlag
Create_Module_Func	chaiscript/language/chaiscript_common.hpp	/^  typedef ModulePtr (*Create_Module_Func)();$/;"	t	namespace:chaiscript	typeref:typename:ModulePtr (*)()
CustomFormatSpecifier	easylogging++.h	/^    CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resol/;"	f	class:el::CustomFormatSpecifier
CustomFormatSpecifier	easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	namespace:el
CylindricalX	math/coordinate-systems.h	/^    struct CylindricalX$/;"	s	namespace:math
CylindricalY	math/coordinate-systems.h	/^    struct CylindricalY$/;"	s	namespace:math
CylindricalZ	math/coordinate-systems.h	/^    struct CylindricalZ$/;"	s	namespace:math
DEBUG_FLAGS	Makefile	/^DEBUG_FLAGS=$(COMMONFLAGS) -g -ort-debug -Wall -Wextra$/;"	m
DISPATCH	scripting/raytracing-module.cpp	/^#           define DISPATCH(/;"	d	file:
DLModule	chaiscript/language/chaiscript_engine.hpp	/^        DLModule(const std::string &t_filename)$/;"	f	struct:chaiscript::detail::Loadable_Module::DLModule
DLModule	chaiscript/language/chaiscript_engine.hpp	/^      struct DLModule$/;"	s	struct:chaiscript::detail::Loadable_Module
DLSym	chaiscript/language/chaiscript_engine.hpp	/^          DLSym(DLModule &t_mod, const std::string &t_symbol)$/;"	f	struct:chaiscript::detail::Loadable_Module::DLSym
DLSym	chaiscript/language/chaiscript_engine.hpp	/^        struct DLSym$/;"	s	struct:chaiscript::detail::Loadable_Module
Data	chaiscript/dispatchkit/any.hpp	/^          explicit Data(const std::type_info &t_type) $/;"	f	struct:chaiscript::detail::Any::Data
Data	chaiscript/dispatchkit/any.hpp	/^        struct Data$/;"	s	class:chaiscript::detail::Any
Data	chaiscript/dispatchkit/boxed_value.hpp	/^        Data(const Type_Info &ti,$/;"	f	struct:chaiscript::Boxed_Value::Data
Data	chaiscript/dispatchkit/boxed_value.hpp	/^      struct Data$/;"	s	class:chaiscript::Boxed_Value
Data_Impl	chaiscript/dispatchkit/any.hpp	/^            explicit Data_Impl(T t_type)$/;"	f	struct:chaiscript::detail::Any::Data_Impl
Data_Impl	chaiscript/dispatchkit/any.hpp	/^          struct Data_Impl : Data$/;"	s	class:chaiscript::detail::Any
DateTime	easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6/;"	e	enum:el::base::FormatFlags
DateTime	easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	namespace:el::base::utils
Day	easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
Debug	easylogging++.h	/^        Debug = 4,$/;"	e	enum:el::Level
Decl_Arg_List	chaiscript/language/chaiscript_parser.hpp	/^      bool Decl_Arg_List() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
DecoratorImplementation	primitives/decorator-primitive.cpp	/^        DecoratorImplementation(Material material, Primitive child)$/;"	f	class:__anon08e8fc9a0110::DecoratorImplementation	file:
DecoratorImplementation	primitives/decorator-primitive.cpp	/^    class DecoratorImplementation : public raytracer::primitives::_private_::PrimitiveImplementa/;"	c	namespace:__anon08e8fc9a0110	file:
Def	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Def	chaiscript/language/chaiscript_parser.hpp	/^      bool Def(const bool t_class_context = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Def_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Def_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr>/;"	f	struct:chaiscript::eval::Def_AST_Node
Def_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Def_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Default	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
DefaultLogBuilder	easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	namespace:el::base
DefaultLogDispatchCallback	easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	namespace:el::base
Default_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Default_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Node/;"	f	struct:chaiscript::eval::Default_AST_Node
Default_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Default_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Demo	demos/demo.cpp	/^demos::Demo::Demo(unsigned bitmap_size, Duration duration, unsigned fps, unsigned antialias )$/;"	f	class:demos::Demo
Demo	demos/demo.h	/^    class Demo$/;"	c	namespace:demos
DimensionSpecificMembers	math/vector.h	/^        class DimensionSpecificMembers { };$/;"	c	namespace:math::_private_
DimensionSpecificMembers	math/vector.h	/^        class DimensionSpecificMembers<2, T>$/;"	c	namespace:math::_private_
DimensionSpecificMembers	math/vector.h	/^        class DimensionSpecificMembers<3, T>$/;"	c	namespace:math::_private_
DisableApplicationAbortOnFatalLog	easylogging++.h	/^    DisableApplicationAbortOnFatalLog = 8,$/;"	e	enum:el::LoggingFlag
DisablePerformanceTrackingCheckpointComparison	easylogging++.h	/^    DisablePerformanceTrackingCheckpointComparison = 256,$/;"	e	enum:el::LoggingFlag
DisableVModules	easylogging++.h	/^    DisableVModules = 512,$/;"	e	enum:el::LoggingFlag
DisableVModulesExtensions	easylogging++.h	/^    DisableVModulesExtensions = 1024,$/;"	e	enum:el::LoggingFlag
DispatchAction	easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	g	namespace:el::base	typeref:typename:base::type::EnumType
Dispatch_Engine	chaiscript/dispatchkit/dispatchkit.hpp	/^        Dispatch_Engine()$/;"	f	class:chaiscript::detail::Dispatch_Engine
Dispatch_Engine	chaiscript/dispatchkit/dispatchkit.hpp	/^    class Dispatch_Engine$/;"	c	namespace:chaiscript::detail
Dispatch_Function	chaiscript/dispatchkit/dispatchkit.hpp	/^        Dispatch_Function(std::vector<Proxy_Function> t_funcs)$/;"	f	class:chaiscript::detail::Dispatch_Function
Dispatch_Function	chaiscript/dispatchkit/dispatchkit.hpp	/^    class Dispatch_Function : public dispatch::Proxy_Function_Base$/;"	c	namespace:chaiscript::detail
Dispatch_State	chaiscript/dispatchkit/dispatchkit.hpp	/^        Dispatch_State(Dispatch_Engine &t_engine)$/;"	f	class:chaiscript::detail::Dispatch_State
Dispatch_State	chaiscript/dispatchkit/dispatchkit.hpp	/^    class Dispatch_State$/;"	c	namespace:chaiscript::detail
DisplaceableCamera	cameras/displaceable-camera.cpp	/^raytracer::cameras::_private_::DisplaceableCamera::DisplaceableCamera(const Matrix4x4& transform/;"	f	class:raytracer::cameras::_private_::DisplaceableCamera
DisplaceableCamera	cameras/displaceable-camera.h	/^            class DisplaceableCamera : public CameraImplementation$/;"	c	namespace:raytracer::cameras::_private_
Division	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Do_Call	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      struct Do_Call$/;"	s	namespace:chaiscript::dispatch::detail
Do_Call	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      struct Do_Call<void>$/;"	s	namespace:chaiscript::dispatch::detail
Dot_Access	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Dot_Access_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Dot_Access_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_N/;"	f	struct:chaiscript::eval::Dot_Access_AST_Node
Dot_Access_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Dot_Access_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Dot_Fun_Array	chaiscript/language/chaiscript_parser.hpp	/^      bool Dot_Fun_Array() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Duration	animation/duration.cpp	/^animation::Duration::Duration(double ms)$/;"	f	class:animation::Duration
Duration	animation/duration.h	/^    class Duration$/;"	c	namespace:animation
Dynamic_Caster	chaiscript/dispatchkit/type_conversions.hpp	/^      class Dynamic_Caster$/;"	c	namespace:chaiscript::detail
Dynamic_Conversion_Impl	chaiscript/dispatchkit/type_conversions.hpp	/^        Dynamic_Conversion_Impl()$/;"	f	class:chaiscript::detail::Dynamic_Conversion_Impl
Dynamic_Conversion_Impl	chaiscript/dispatchkit/type_conversions.hpp	/^      class Dynamic_Conversion_Impl : public Type_Conversion_Base$/;"	c	namespace:chaiscript::detail
Dynamic_Object	chaiscript/dispatchkit/dynamic_object.hpp	/^        Dynamic_Object() : m_type_name(""), m_option_explicit(false)$/;"	f	class:chaiscript::dispatch::Dynamic_Object
Dynamic_Object	chaiscript/dispatchkit/dynamic_object.hpp	/^        Dynamic_Object(std::string t_type_name)$/;"	f	class:chaiscript::dispatch::Dynamic_Object
Dynamic_Object	chaiscript/dispatchkit/dynamic_object.hpp	/^    class Dynamic_Object$/;"	c	namespace:chaiscript::dispatch
Dynamic_Object_Constructor	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          Dynamic_Object_Constructor($/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor
Dynamic_Object_Constructor	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^      class Dynamic_Object_Constructor : public Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch::detail
Dynamic_Object_Function	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          Dynamic_Object_Function($/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function
Dynamic_Object_Function	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^      class Dynamic_Object_Function : public Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch::detail
Dynamic_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^        Dynamic_Proxy_Function($/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function
Dynamic_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Dynamic_Proxy_Function : public Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch
Dynamic_Proxy_Function_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^        Dynamic_Proxy_Function_Impl($/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function_Impl
Dynamic_Proxy_Function_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Dynamic_Proxy_Function_Impl : public Dynamic_Proxy_Function$/;"	c	namespace:chaiscript::dispatch
EASYLOGGINGPP_H	easylogging++.h	/^#define EASYLOGGINGPP_H$/;"	d
ELPP	easylogging++.h	/^#define ELPP /;"	d
ELPP_ASSERT	easylogging++.h	/^#      define ELPP_ASSERT(/;"	d
ELPP_ASSERT	easylogging++.h	/^#   define ELPP_ASSERT(/;"	d
ELPP_ASYNC_LOGGING	easylogging++.h	/^#   define ELPP_ASYNC_LOGGING /;"	d
ELPP_CLANG_VERSION	easylogging++.h	/^#   define ELPP_CLANG_VERSION /;"	d
ELPP_COMPILER_CLANG	easylogging++.h	/^#   define ELPP_COMPILER_CLANG /;"	d
ELPP_COMPILER_GCC	easylogging++.h	/^#   define ELPP_COMPILER_GCC /;"	d
ELPP_COMPILER_INTEL	easylogging++.h	/^#   define ELPP_COMPILER_INTEL /;"	d
ELPP_COMPILER_MSVC	easylogging++.h	/^#   define ELPP_COMPILER_MSVC /;"	d
ELPP_COUT	easylogging++.h	/^#      define ELPP_COUT /;"	d
ELPP_COUT_LINE	easylogging++.h	/^#   define ELPP_COUT_LINE(/;"	d
ELPP_CRT_DBG_WARNINGS	easylogging++.h	/^#   define ELPP_CRT_DBG_WARNINGS /;"	d
ELPP_CXX0X	easylogging++.h	/^#      define ELPP_CXX0X /;"	d
ELPP_CXX11	easylogging++.h	/^#      define ELPP_CXX11 /;"	d
ELPP_CYGWIN	easylogging++.h	/^#   define ELPP_CYGWIN /;"	d
ELPP_DEBUG_LOG	easylogging++.h	/^#   define ELPP_DEBUG_LOG /;"	d
ELPP_ERROR_LOG	easylogging++.h	/^#   define ELPP_ERROR_LOG /;"	d
ELPP_EXPORT	easylogging++.h	/^#      define ELPP_EXPORT /;"	d
ELPP_EXPORT	easylogging++.h	/^#   define ELPP_EXPORT$/;"	d
ELPP_FATAL_LOG	easylogging++.h	/^#   define ELPP_FATAL_LOG /;"	d
ELPP_FINAL	easylogging++.h	/^#   define ELPP_FINAL /;"	d
ELPP_FINAL	easylogging++.h	/^#   define ELPP_FINAL$/;"	d
ELPP_FUNC	easylogging++.h	/^#      define ELPP_FUNC /;"	d
ELPP_FUNC	easylogging++.h	/^#   define ELPP_FUNC /;"	d
ELPP_GCC_VERSION	easylogging++.h	/^#   define ELPP_GCC_VERSION /;"	d
ELPP_INFO_LOG	easylogging++.h	/^#   define ELPP_INFO_LOG /;"	d
ELPP_INITI_BASIC_DECLR	easylogging++.h	/^#define ELPP_INITI_BASIC_DECLR /;"	d
ELPP_INTERNAL_DEBUGGING_ENDL	easylogging++.h	/^#   define ELPP_INTERNAL_DEBUGGING_ENDL /;"	d
ELPP_INTERNAL_DEBUGGING_MSG	easylogging++.h	/^#   define ELPP_INTERNAL_DEBUGGING_MSG(/;"	d
ELPP_INTERNAL_DEBUGGING_OUT_ERROR	easylogging++.h	/^#   define ELPP_INTERNAL_DEBUGGING_OUT_ERROR /;"	d
ELPP_INTERNAL_DEBUGGING_OUT_INFO	easylogging++.h	/^#   define ELPP_INTERNAL_DEBUGGING_OUT_INFO /;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	easylogging++.h	/^#   define ELPP_INTERNAL_DEBUGGING_WRITE_PERROR /;"	d
ELPP_INTERNAL_ERROR	easylogging++.h	/^#      define ELPP_INTERNAL_ERROR(/;"	d
ELPP_INTERNAL_ERROR	easylogging++.h	/^#   define ELPP_INTERNAL_ERROR(/;"	d
ELPP_INTERNAL_INFO	easylogging++.h	/^#      define ELPP_INTERNAL_INFO(/;"	d
ELPP_INTERNAL_INFO	easylogging++.h	/^#   define ELPP_INTERNAL_INFO(/;"	d
ELPP_INTERNAL_INFO_LEVEL	easylogging++.h	/^#      define ELPP_INTERNAL_INFO_LEVEL /;"	d
ELPP_LITERAL	easylogging++.h	/^#   define ELPP_LITERAL(/;"	d
ELPP_LOGGING_ENABLED	easylogging++.h	/^#   define ELPP_LOGGING_ENABLED /;"	d
ELPP_LOG_PERMS	easylogging++.h	/^#   define ELPP_LOG_PERMS /;"	d
ELPP_MINGW	easylogging++.h	/^#   define ELPP_MINGW /;"	d
ELPP_OS_ANDROID	easylogging++.h	/^#   define ELPP_OS_ANDROID /;"	d
ELPP_OS_FREEBSD	easylogging++.h	/^#   define ELPP_OS_FREEBSD /;"	d
ELPP_OS_LINUX	easylogging++.h	/^#   define ELPP_OS_LINUX /;"	d
ELPP_OS_MAC	easylogging++.h	/^#   define ELPP_OS_MAC /;"	d
ELPP_OS_SOLARIS	easylogging++.h	/^#   define ELPP_OS_SOLARIS /;"	d
ELPP_OS_UNIX	easylogging++.h	/^#   define ELPP_OS_UNIX /;"	d
ELPP_OS_WINDOWS	easylogging++.h	/^#   define ELPP_OS_WINDOWS /;"	d
ELPP_STACKTRACE	easylogging++.h	/^#      define ELPP_STACKTRACE /;"	d
ELPP_STRLEN	easylogging++.h	/^#   define ELPP_STRLEN /;"	d
ELPP_THREADING_ENABLED	easylogging++.h	/^#   define ELPP_THREADING_ENABLED /;"	d
ELPP_TRACE_LOG	easylogging++.h	/^#   define ELPP_TRACE_LOG /;"	d
ELPP_UNUSED	easylogging++.h	/^#define ELPP_UNUSED(/;"	d
ELPP_USE_STD_THREADING	easylogging++.h	/^#   define ELPP_USE_STD_THREADING /;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	easylogging++.h	/^#   define ELPP_VARIADIC_TEMPLATES_SUPPORTED /;"	d
ELPP_VERBOSE_LOG	easylogging++.h	/^#   define ELPP_VERBOSE_LOG /;"	d
ELPP_WARNING_LOG	easylogging++.h	/^#   define ELPP_WARNING_LOG /;"	d
END_ARGUMENTS	scripting/scripting-util.h	/^#define END_ARGUMENTS(/;"	d
EasingFunction	math/functions/easing-function.h	/^        typedef math::Function<double(double)> EasingFunction;$/;"	t	namespace:math::functions
Enabled	easylogging++.h	/^    Enabled = 1,$/;"	e	enum:el::ConfigurationType
EnumType	easylogging++.h	/^typedef unsigned short EnumType;$/;"	t	namespace:el::base::type	typeref:typename:unsigned short
Eol	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Eol	chaiscript/language/chaiscript_parser.hpp	/^      bool Eol() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Eol_	chaiscript/language/chaiscript_parser.hpp	/^      bool Eol_(const bool t_eos = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Eol_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Eol_AST_Node(std::string t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Eol_AST_Node
Eol_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Eol_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Eos	chaiscript/language/chaiscript_parser.hpp	/^      bool Eos() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Equality	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Equation	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Equation	chaiscript/language/chaiscript_parser.hpp	/^      bool Equation() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Equation_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Equation_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Nod/;"	f	struct:chaiscript::eval::Equation_AST_Node
Equation_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Equation_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Error	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Error	easylogging++.h	/^        Error = 16,$/;"	e	enum:el::Level
Exception_Handler	chaiscript/dispatchkit/exception_specification.hpp	/^  typedef std::shared_ptr<detail::Exception_Handler_Base> Exception_Handler;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<detail::Exception_Handler_Base>
Exception_Handler_Base	chaiscript/dispatchkit/exception_specification.hpp	/^    struct Exception_Handler_Base$/;"	s	namespace:chaiscript::detail
Exception_Handler_Impl1	chaiscript/dispatchkit/exception_specification.hpp	/^      struct Exception_Handler_Impl1 : Exception_Handler_Base$/;"	s	namespace:chaiscript::detail
Exception_Handler_Impl2	chaiscript/dispatchkit/exception_specification.hpp	/^      struct Exception_Handler_Impl2 : Exception_Handler_Base$/;"	s	namespace:chaiscript::detail
Exception_Handler_Impl3	chaiscript/dispatchkit/exception_specification.hpp	/^      struct Exception_Handler_Impl3 : Exception_Handler_Base$/;"	s	namespace:chaiscript::detail
Exception_Handler_Impl4	chaiscript/dispatchkit/exception_specification.hpp	/^      struct Exception_Handler_Impl4 : Exception_Handler_Base$/;"	s	namespace:chaiscript::detail
Exception_Handler_Impl5	chaiscript/dispatchkit/exception_specification.hpp	/^      struct Exception_Handler_Impl5 : Exception_Handler_Base$/;"	s	namespace:chaiscript::detail
ExtremumFinder	math/misc.h	/^    struct ExtremumFinder<T, Ts...>$/;"	s	namespace:math
ExtremumFinder	math/misc.h	/^    struct ExtremumFinder<T>$/;"	s	namespace:math
FILES	Makefile	/^FILES=`find -type f -name "*.cpp"`$/;"	m
FILE_HEADER	imaging/bmp-format.cpp	/^    struct FILE_HEADER$/;"	s	namespace:__anon5b9926d60110	file:
Fatal	easylogging++.h	/^        Fatal = 8, $/;"	e	enum:el::Level
File	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
File	easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6/;"	e	enum:el::base::FormatFlags
File	easylogging++.h	/^class File : base::StaticClass {$/;"	c	namespace:el::base::utils
FileBase	easylogging++.h	/^    Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	e	enum:el::base::FormatFlags
FileSize	imaging/bmp-format.cpp	/^        uint32_t FileSize;     \/* Size of the file in bytes *\/$/;"	m	struct:__anon5b9926d60110::FILE_HEADER	typeref:typename:uint32_t	file:
FileStreamPtr	easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	namespace:el::base	typeref:typename:std::shared_ptr<base::type::fstream_t>
FileType	imaging/bmp-format.cpp	/^        uint16_t FileType;     \/* File type, always 4D42h ("BM") *\/$/;"	m	struct:__anon5b9926d60110::FILE_HEADER	typeref:typename:uint16_t	file:
File_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        File_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr/;"	f	struct:chaiscript::eval::File_AST_Node
File_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct File_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
File_Position	chaiscript/language/chaiscript_common.hpp	/^    File_Position() : line(0), column(0) { }$/;"	f	struct:chaiscript::File_Position
File_Position	chaiscript/language/chaiscript_common.hpp	/^    File_Position(int t_file_line, int t_file_column)$/;"	f	struct:chaiscript::File_Position
File_Position	chaiscript/language/chaiscript_common.hpp	/^  struct File_Position {$/;"	s	namespace:chaiscript
Filename	easylogging++.h	/^    Filename = 16,$/;"	e	enum:el::ConfigurationType
Finally	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Finally_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Finally_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Node/;"	f	struct:chaiscript::eval::Finally_AST_Node
Finally_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Finally_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
FixedTimeFormat	easylogging++.h	/^    FixedTimeFormat = 16384$/;"	e	enum:el::LoggingFlag
Float	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Float	chaiscript/utility/json.hpp	/^        double              Float;$/;"	m	union:json::JSON::BackingData	typeref:typename:double
Float_	chaiscript/language/chaiscript_parser.hpp	/^      bool Float_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Float_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Float_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, Boxed_Value t_bv) :$/;"	f	struct:chaiscript::eval::Float_AST_Node
Float_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Float_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Floating	chaiscript/utility/json.hpp	/^            Floating,$/;"	e	enum:json::JSON::Class
For	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
For	chaiscript/language/chaiscript_parser.hpp	/^      bool For() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
For_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        For_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr>/;"	f	struct:chaiscript::eval::For_AST_Node
For_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct For_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
For_Guards	chaiscript/language/chaiscript_parser.hpp	/^      bool For_Guards() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Format	easylogging++.h	/^    Format = 8,$/;"	e	enum:el::ConfigurationType
FormatFlags	easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	g	namespace:el::base	typeref:typename:base::type::EnumType
FormatSpecifierValueResolver	easylogging++.h	/^typedef std::function<const char*(void)> FormatSpecifierValueResolver;$/;"	t	namespace:el
Fun_Call	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Fun_Call_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Fun_Call_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Nod/;"	f	struct:chaiscript::eval::Fun_Call_AST_Node
Fun_Call_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Fun_Call_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Fun_Caller	chaiscript/dispatchkit/callable_traits.hpp	/^        Fun_Caller(Ret( * t_func)(Param...) ) : m_func(t_func) {}$/;"	f	struct:chaiscript::dispatch::detail::Fun_Caller
Fun_Caller	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Fun_Caller$/;"	s	namespace:chaiscript::dispatch::detail
Function	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Function$/;"	c	namespace:ChaiScript_Language
Function	easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6/;"	e	enum:el::base::FormatFlags
Function	math/function.h	/^        Function(std::shared_ptr<FunctionBody<R, Ts...>> body = nullptr)$/;"	f	class:math::Function
Function	math/function.h	/^    class Function<R(Ts...)>$/;"	c	namespace:math
FunctionBody	math/function.h	/^    struct FunctionBody$/;"	s	namespace:math
FunctionMaterial2D	materials/material.cpp	/^        FunctionMaterial2D(math::Function<MaterialProperties(const Point2D&)> function)$/;"	f	class:__anonefa653160110::FunctionMaterial2D	file:
FunctionMaterial2D	materials/material.cpp	/^    class FunctionMaterial2D : public materials::_private_::Material2DImplementation$/;"	c	namespace:__anonefa653160110	file:
FunctionMaterial3D	materials/material.cpp	/^        FunctionMaterial3D(math::Function<MaterialProperties(const Point3D&)> function)$/;"	f	class:__anonefa653160110::FunctionMaterial3D	file:
FunctionMaterial3D	materials/material.cpp	/^    class FunctionMaterial3D : public materials::_private_::Material3DImplementation$/;"	c	namespace:__anonefa653160110	file:
Function_Caller_Ret	chaiscript/dispatchkit/function_call_detail.hpp	/^        struct Function_Caller_Ret$/;"	s	namespace:chaiscript::dispatch::detail
Function_Caller_Ret	chaiscript/dispatchkit/function_call_detail.hpp	/^        struct Function_Caller_Ret<Ret, true>$/;"	s	namespace:chaiscript::dispatch::detail
Function_Caller_Ret	chaiscript/dispatchkit/function_call_detail.hpp	/^        struct Function_Caller_Ret<void, false>$/;"	s	namespace:chaiscript::dispatch::detail
Function_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^        Function_Push_Pop(const chaiscript::detail::Dispatch_State &t_ds)$/;"	f	struct:chaiscript::eval::detail::Function_Push_Pop
Function_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^      struct Function_Push_Pop$/;"	s	namespace:chaiscript::eval::detail
Function_Signature	chaiscript/dispatchkit/callable_traits.hpp	/^        struct Function_Signature$/;"	s	namespace:chaiscript::dispatch::detail
Function_Signature	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Function_Signature<Ret (Params...)>$/;"	s	namespace:chaiscript::dispatch::detail
Function_Signature	chaiscript/dispatchkit/callable_traits.hpp	/^      struct Function_Signature<Ret (T::*)(Params...) const>$/;"	s	namespace:chaiscript::dispatch::detail
GammaBlue	imaging/bmp-format.cpp	/^        uint32_t GammaBlue;       \/* Gamma blue coordinate scale value *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
GammaBlue	imaging/bmp-format.cpp	/^        uint32_t GammaBlue;       \/* Gamma blue coordinate scale value *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
GammaGreen	imaging/bmp-format.cpp	/^        uint32_t GammaGreen;      \/* Gamma green coordinate scale value *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
GammaGreen	imaging/bmp-format.cpp	/^        uint32_t GammaGreen;      \/* Gamma green coordinate scale value *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
GammaRed	imaging/bmp-format.cpp	/^        uint32_t GammaRed;        \/* Gamma red coordinate scale value *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
GammaRed	imaging/bmp-format.cpp	/^        uint32_t GammaRed;        \/* Gamma red coordinate scale value *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Get_Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      struct Get_Type_Info$/;"	s	namespace:chaiscript::detail
Get_Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      struct Get_Type_Info<const std::reference_wrapper<T> &>$/;"	s	namespace:chaiscript::detail
Get_Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      struct Get_Type_Info<const std::shared_ptr<T> &>$/;"	s	namespace:chaiscript::detail
Get_Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      struct Get_Type_Info<std::reference_wrapper<T> >$/;"	s	namespace:chaiscript::detail
Get_Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      struct Get_Type_Info<std::shared_ptr<T> >$/;"	s	namespace:chaiscript::detail
Global	easylogging++.h	/^        Global = 1,$/;"	e	enum:el::Level
Global_Decl	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Global_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Global_Decl_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_/;"	f	struct:chaiscript::eval::Global_Decl_AST_Node
Global_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Global_Decl_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
GreenMask	imaging/bmp-format.cpp	/^        uint32_t GreenMask;       \/* Mask identifying bits of green component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
GreenMask	imaging/bmp-format.cpp	/^        uint32_t GreenMask;       \/* Mask identifying bits of green component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
GreenX	imaging/bmp-format.cpp	/^        int32_t  GreenX;          \/* X coordinate of green endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
GreenX	imaging/bmp-format.cpp	/^        int32_t  GreenX;          \/* X coordinate of green endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
GreenY	imaging/bmp-format.cpp	/^        int32_t  GreenY;          \/* Y coordinate of green endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
GreenY	imaging/bmp-format.cpp	/^        int32_t  GreenY;          \/* Y coordinate of green endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
GreenZ	imaging/bmp-format.cpp	/^        int32_t  GreenZ;          \/* Z coordinate of green endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
GreenZ	imaging/bmp-format.cpp	/^        int32_t  GreenZ;          \/* Z coordinate of green endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Grid	data-structures/grid.h	/^        Grid(const Grid<T>& grid)$/;"	f	class:data::Grid
Grid	data-structures/grid.h	/^        Grid(unsigned width, unsigned height)$/;"	f	class:data::Grid
Grid	data-structures/grid.h	/^        Grid(unsigned width, unsigned height, T initial_value)$/;"	f	class:data::Grid
Grid	data-structures/grid.h	/^        Grid(unsigned width, unsigned height, std::function<T(const Position2D&)> initializer)$/;"	f	class:data::Grid
Grid	data-structures/grid.h	/^    class Grid$/;"	c	namespace:data
Handle_Return	chaiscript/dispatchkit/handle_return.hpp	/^        struct Handle_Return$/;"	s	namespace:chaiscript::dispatch::detail
Handle_Return	chaiscript/dispatchkit/handle_return.hpp	/^        struct Handle_Return<const std::function<Ret> &>$/;"	s	namespace:chaiscript::dispatch::detail
Height	imaging/bmp-format.cpp	/^        int32_t  Height;          \/* Image height in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V2	typeref:typename:int32_t	file:
Height	imaging/bmp-format.cpp	/^        int32_t  Height;          \/* Image height in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:int32_t	file:
Height	imaging/bmp-format.cpp	/^        int32_t  Height;          \/* Image height in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
Height	imaging/bmp-format.cpp	/^        int32_t  Height;          \/* Image height in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Hex_	chaiscript/language/chaiscript_parser.hpp	/^      bool Hex_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
HierarchicalLogging	easylogging++.h	/^    HierarchicalLogging = 2048,$/;"	e	enum:el::LoggingFlag
Hit	primitives/hit.h	/^        Hit() : t(std::numeric_limits<double>::infinity()), group_id(MISSING_ID) { }$/;"	f	struct:raytracer::Hit
Hit	primitives/hit.h	/^    struct Hit$/;"	s	namespace:raytracer
HitCounter	easylogging++.h	/^    HitCounter(const HitCounter& hitCounter) :$/;"	f	class:el::base::HitCounter
HitCounter	easylogging++.h	/^    HitCounter(const char* filename, unsigned long int lineNumber) :$/;"	f	class:el::base::HitCounter
HitCounter	easylogging++.h	/^    HitCounter(void) :$/;"	f	class:el::base::HitCounter
HitCounter	easylogging++.h	/^class HitCounter {$/;"	c	namespace:el::base
HitPosition	primitives/hit-position.h	/^    struct HitPosition$/;"	s	namespace:raytracer
HorzResolution	imaging/bmp-format.cpp	/^        int32_t  HorzResolution;  \/* Horizontal resolution in pixels per meter *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:int32_t	file:
HorzResolution	imaging/bmp-format.cpp	/^        int32_t  HorzResolution;  \/* Horizontal resolution in pixels per meter *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
HorzResolution	imaging/bmp-format.cpp	/^        int32_t  HorzResolution;  \/* Horizontal resolution in pixels per meter *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Host	easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId/;"	e	enum:el::base::FormatFlags
Hour	easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
INCREMENT_PERFORMANCE_COUNTER	performance/performance.h	/^#define INCREMENT_PERFORMANCE_COUNTER(/;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	Catch.h	/^#define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, ... ) \\$/;"	M
INTERNAL_CATCH_METHOD_AS_TEST_CASE	Catch.h	/^#define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, Name, Desc ) \\$/;"	M
INTERNAL_CATCH_STRINGIFY	Catch.h	/^#define INTERNAL_CATCH_STRINGIFY( expr ) INTERNAL_CATCH_STRINGIFY2( expr )$/;"	M
INTERNAL_CATCH_STRINGIFY2	Catch.h	/^#define INTERNAL_CATCH_STRINGIFY2( expr ) #expr$/;"	M
INTERNAL_CATCH_TESTCASE	Catch.h	/^#define INTERNAL_CATCH_TESTCASE( ... ) \\$/;"	M
INTERNAL_CATCH_TESTCASE	Catch.h	/^#define INTERNAL_CATCH_TESTCASE( Name, Desc ) \\$/;"	M
INTERNAL_CATCH_TEST_CASE_METHOD	Catch.h	/^#define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, ... )\\$/;"	M
INTERNAL_CATCH_TEST_CASE_METHOD	Catch.h	/^#define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, TestName, Desc )\\$/;"	M
INTERNAL_CATCH_UNIQUE_NAME	Catch.h	/^#define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )$/;"	M
INTERNAL_CATCH_UNIQUE_NAME_LINE	Catch.h	/^#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name, line ) INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, li/;"	M
INTERNAL_CATCH_UNIQUE_NAME_LINE2	Catch.h	/^#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line$/;"	M
IWorker	easylogging++.h	/^class IWorker {$/;"	c	namespace:el::base
Id	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Id	chaiscript/language/chaiscript_parser.hpp	/^      bool Id() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Id_	chaiscript/language/chaiscript_parser.hpp	/^      bool Id_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Id_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Id_AST_Node(const std::string &t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Id_AST_Node
Id_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Id_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Id_Arg_List	chaiscript/language/chaiscript_parser.hpp	/^      bool Id_Arg_List() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
If	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
If	chaiscript/language/chaiscript_parser.hpp	/^      bool If() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
If_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        If_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr> /;"	f	struct:chaiscript::eval::If_AST_Node
If_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct If_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
ImmediateFlush	easylogging++.h	/^    ImmediateFlush = 16,$/;"	e	enum:el::LoggingFlag
Indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      struct Indexes$/;"	s	namespace:chaiscript::dispatch::detail
Info	easylogging++.h	/^        Info = 128, $/;"	e	enum:el::Level
Inline_Array	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Inline_Array_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Inline_Array_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST/;"	f	struct:chaiscript::eval::Inline_Array_AST_Node
Inline_Array_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Inline_Array_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Inline_Container	chaiscript/language/chaiscript_parser.hpp	/^      bool Inline_Container() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Inline_Map	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Inline_Map_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Inline_Map_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_N/;"	f	struct:chaiscript::eval::Inline_Map_AST_Node
Inline_Map_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Inline_Map_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Inline_Range	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Inline_Range_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Inline_Range_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST/;"	f	struct:chaiscript::eval::Inline_Range_AST_Node
Inline_Range_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Inline_Range_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Int	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Int	chaiscript/utility/json.hpp	/^        long                Int;$/;"	m	union:json::JSON::BackingData	typeref:typename:long
IntSuffix_	chaiscript/language/chaiscript_parser.hpp	/^      void IntSuffix_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
Int_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Int_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, Boxed_Value t_bv) :$/;"	f	struct:chaiscript::eval::Int_AST_Node
Int_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Int_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Integral	chaiscript/utility/json.hpp	/^            Integral,$/;"	e	enum:json::JSON::Class
Intent	imaging/bmp-format.cpp	/^        uint32_t Intent;$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Internal	chaiscript/utility/json.hpp	/^    } Internal;$/;"	m	class:json::JSON	typeref:union:json::JSON::BackingData
Internal_Construction	chaiscript/dispatchkit/boxed_value.hpp	/^      struct Internal_Construction{};$/;"	s	class:chaiscript::Boxed_Value
Interval	math/interval.h	/^        constexpr Interval(T lower, T upper)$/;"	f	struct:math::Interval
Interval	math/interval.h	/^    struct Interval final$/;"	s	namespace:math
IntervalMapper	math/interval-mapper.h	/^        IntervalMapper(const Interval<T1>& from, const Interval<T2>& to)$/;"	f	struct:math::IntervalMapper
IntervalMapper	math/interval-mapper.h	/^    struct IntervalMapper$/;"	s	namespace:math
IsNull	chaiscript/utility/json.hpp	/^        bool IsNull() const { return Type == Class::Null; }$/;"	f	class:json::JSON	typeref:typename:bool
IterableContainer	easylogging++.h	/^    IterableContainer(void) {}$/;"	f	class:el::base::workarounds::IterableContainer
IterableContainer	easylogging++.h	/^class IterableContainer {$/;"	c	namespace:el::base::workarounds
JSON	chaiscript/utility/json.hpp	/^        JSON( JSON&& other )$/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( T b, typename enable_if<is_same<T,bool>::value>::type* = nullptr ) : Internal( b )/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( T f, typename enable_if<is_floating_point<T>::value>::type* = nullptr ) : Internal/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( T i, typename enable_if<is_integral<T>::value && !is_same<T,bool>::value>::type* =/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( T s, typename enable_if<is_convertible<T,string>::value>::type* = nullptr ) : Inte/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( const JSON &other ) {$/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( initializer_list<JSON> list ) $/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON( std::nullptr_t ) : Internal(), Type( Class::Null ){}$/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        JSON() : Internal(), Type( Class::Null ){}$/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^        explicit JSON(Class type)$/;"	f	class:json::JSON
JSON	chaiscript/utility/json.hpp	/^class JSON$/;"	c	namespace:json
JSONConstWrapper	chaiscript/utility/json.hpp	/^                JSONConstWrapper( const Container *val ) : object( val ) {}$/;"	f	class:json::JSON::JSONConstWrapper
JSONConstWrapper	chaiscript/utility/json.hpp	/^                JSONConstWrapper( std::nullptr_t )  : object( nullptr ) {}$/;"	f	class:json::JSON::JSONConstWrapper
JSONConstWrapper	chaiscript/utility/json.hpp	/^        class JSONConstWrapper {$/;"	c	class:json::JSON
JSONType	chaiscript/utility/json.hpp	/^        Class JSONType() const { return Type; }$/;"	f	class:json::JSON	typeref:typename:Class
JSONWrapper	chaiscript/utility/json.hpp	/^                JSONWrapper( Container *val ) : object( val ) {}$/;"	f	class:json::JSON::JSONWrapper
JSONWrapper	chaiscript/utility/json.hpp	/^                JSONWrapper( std::nullptr_t )  : object( nullptr ) {}$/;"	f	class:json::JSON::JSONWrapper
JSONWrapper	chaiscript/utility/json.hpp	/^        class JSONWrapper {$/;"	c	class:json::JSON
Keyword	chaiscript/language/chaiscript_parser.hpp	/^      bool Keyword(const char *t_s, bool t_capture = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Keyword_	chaiscript/language/chaiscript_parser.hpp	/^      bool Keyword_(const char *t_s) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
LEAN_AND_MEAN	util/beep.cpp	/^#define LEAN_AND_MEAN$/;"	d	file:
LOGGER_LEVEL_WRITERS_SIGNATURES	easylogging++.h	/^#   define LOGGER_LEVEL_WRITERS_SIGNATURES(/;"	d
Lambda	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Lambda	chaiscript/language/chaiscript_parser.hpp	/^      bool Lambda() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
LambdaFunctionBody	math/function.h	/^        LambdaFunctionBody(std::function<R(Ts...)> lambda)$/;"	f	class:math::LambdaFunctionBody
LambdaFunctionBody	math/function.h	/^    class LambdaFunctionBody : public FunctionBody<R, Ts...>$/;"	c	namespace:math
LambdaTask	tasks/lambda-task.cpp	/^        LambdaTask(std::function<void()> lambda)$/;"	f	class:__anone3f7ea6c0110::LambdaTask	file:
LambdaTask	tasks/lambda-task.cpp	/^    class LambdaTask : public Task$/;"	c	namespace:__anone3f7ea6c0110	file:
Lambda_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Lambda_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodeP/;"	f	struct:chaiscript::eval::Lambda_AST_Node
Lambda_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Lambda_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Lazy	util/lazy.h	/^    Lazy(std::function<T()> function)$/;"	f	class:Lazy
Lazy	util/lazy.h	/^class Lazy$/;"	c
Less_Than	chaiscript/dispatchkit/type_conversions.hpp	/^      struct Less_Than$/;"	s	class:chaiscript::Type_Conversions
Level	easylogging++.h	/^    Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	e	enum:el::base::FormatFlags
Level	easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	g	namespace:el	typeref:typename:base::type::EnumType
LevelHelper	easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	namespace:el
LevelShort	easylogging++.h	/^    Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	e	enum:el::base::FormatFlags
LightLibrary	scripting/lights-module.cpp	/^    struct LightLibrary$/;"	s	namespace:__anon0af6c0d60110	file:
LightRay	lights/light-ray.cpp	/^raytracer::LightRay::LightRay(const math::Ray& ray, const imaging::Color& color)$/;"	f	class:raytracer::LightRay
LightRay	lights/light-ray.h	/^    struct LightRay$/;"	s	namespace:raytracer
LightSource	lights/light-source.h	/^        explicit LightSource(std::shared_ptr<lights::_private_::LightSourceImplementation> imple/;"	f	class:raytracer::LightSource
LightSource	lights/light-source.h	/^    class LightSource$/;"	c	namespace:raytracer
LightSourceImplementation	lights/light-source.h	/^            class LightSourceImplementation$/;"	c	namespace:raytracer::lights::_private_
Line	easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6/;"	e	enum:el::base::FormatFlags
List	chaiscript/utility/json.hpp	/^        deque<JSON>        *List;$/;"	m	union:json::JSON::BackingData	typeref:typename:deque<JSON> *
Load	chaiscript/utility/json.hpp	/^inline JSON JSON::Load( const string &str ) {$/;"	f	class:json::JSON	typeref:typename:JSON
Loadable_Module	chaiscript/language/chaiscript_engine.hpp	/^      Loadable_Module(const std::string &t_module_name, const std::string &t_filename)$/;"	f	struct:chaiscript::detail::Loadable_Module
Loadable_Module	chaiscript/language/chaiscript_engine.hpp	/^    struct Loadable_Module$/;"	s	namespace:chaiscript::detail
Loadable_Module_Ptr	chaiscript/language/chaiscript_engine.hpp	/^    typedef std::shared_ptr<Loadable_Module> Loadable_Module_Ptr;$/;"	t	namespace:chaiscript::detail	typeref:typename:std::shared_ptr<Loadable_Module>
Loc	chaiscript/dispatchkit/dispatchkit.hpp	/^          enum class Loc : uint_fast32_t {$/;"	g	function:chaiscript::detail::Dispatch_Engine::get_object	typeref:typename:uint_fast32_t
Location	easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6/;"	e	enum:el::base::FormatFlags
LogBuilder	easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	namespace:el
LogBuilderPtr	easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	namespace:el	typeref:typename:std::shared_ptr<LogBuilder>
LogDetailedCrashReason	easylogging++.h	/^    LogDetailedCrashReason = 4,$/;"	e	enum:el::LoggingFlag
LogDispatchCallback	easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	namespace:el
LogDispatchCallbackPtr	easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<LogDispatchCallback>
LogDispatchData	easylogging++.h	/^    LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	class:el::LogDispatchData
LogDispatchData	easylogging++.h	/^class LogDispatchData {$/;"	c	namespace:el
LogDispatcher	easylogging++.h	/^    LogDispatcher(bool proceed, LogMessage&& logMessage, base::DispatchAction dispatchAction) :$/;"	f	class:el::base::LogDispatcher
LogDispatcher	easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	namespace:el::base
LogFlushThreshold	easylogging++.h	/^    LogFlushThreshold = 256,$/;"	e	enum:el::ConfigurationType
LogFormat	easylogging++.h	/^    LogFormat(Level level, const base::type::string_t& format)$/;"	f	class:el::base::LogFormat
LogFormat	easylogging++.h	/^    LogFormat(LogFormat&& logFormat) {$/;"	f	class:el::base::LogFormat
LogFormat	easylogging++.h	/^    LogFormat(const LogFormat& logFormat) {$/;"	f	class:el::base::LogFormat
LogFormat	easylogging++.h	/^    LogFormat(void) :$/;"	f	class:el::base::LogFormat
LogFormat	easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	namespace:el::base
LogMessage	easylogging++.h	/^    LogMessage(Level level, const std::string& file, unsigned long int line, const std::string& /;"	f	class:el::LogMessage
LogMessage	easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId/;"	e	enum:el::base::FormatFlags
LogMessage	easylogging++.h	/^class LogMessage {$/;"	c	namespace:el
LogStreamsReferenceMap	easylogging++.h	/^typedef std::map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	namespace:el::base	typeref:typename:std::map<std::string,FileStreamPtr>
Loggable	easylogging++.h	/^class Loggable {$/;"	c	namespace:el
Logger	easylogging++.h	/^    Logger(const Logger& logger) {$/;"	f	class:el::Logger
Logger	easylogging++.h	/^    Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Logger
Logger	easylogging++.h	/^    Logger(const std::string& id, const Configurations& configurations, base::LogStreamsReferenc/;"	f	class:el::Logger
Logger	easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el
LoggerId	easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6/;"	e	enum:el::base::FormatFlags
LoggingFlag	easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	g	namespace:el	typeref:typename:base::type::EnumType
Logical_And	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Logical_And_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Logical_And_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_/;"	f	struct:chaiscript::eval::Logical_And_AST_Node
Logical_And_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Logical_And_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Logical_Or	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Logical_Or_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Logical_Or_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_N/;"	f	struct:chaiscript::eval::Logical_Or_AST_Node
Logical_Or_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Logical_Or_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
MISSING_ID	primitives/hit.h	/^    const unsigned MISSING_ID = unsigned(-1);$/;"	v	namespace:raytracer	typeref:typename:const unsigned
Make	chaiscript/utility/json.hpp	/^        static JSON Make( Class type ) {$/;"	f	class:json::JSON	typeref:typename:JSON
Make_Indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      struct Make_Indexes$/;"	s	namespace:chaiscript::dispatch::detail
Make_Indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      struct Make_Indexes<0, I...>$/;"	s	namespace:chaiscript::dispatch::detail
Map	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Map$/;"	c	namespace:ChaiScript_Language
Map	chaiscript/utility/json.hpp	/^        map<string,JSON>   *Map;$/;"	m	union:json::JSON::BackingData	typeref:typename:map<string,JSON> *
Map_Pair	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Map_Pair	chaiscript/language/chaiscript_parser.hpp	/^      bool Map_Pair() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Map_Pair	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Map_Pair$/;"	c	namespace:ChaiScript_Language
Map_Pair_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Map_Pair_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Nod/;"	f	struct:chaiscript::eval::Map_Pair_AST_Node
Map_Pair_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Map_Pair_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Material	materials/material.h	/^        explicit Material(std::shared_ptr<materials::_private_::MaterialImplementation> impl = n/;"	f	class:raytracer::Material
Material	materials/material.h	/^    class Material$/;"	c	namespace:raytracer
Material2DImplementation	materials/material.h	/^            class Material2DImplementation : public MaterialImplementation$/;"	c	namespace:raytracer::materials::_private_
Material3DImplementation	materials/material.h	/^            class Material3DImplementation : public MaterialImplementation$/;"	c	namespace:raytracer::materials::_private_
MaterialImplementation	materials/material.h	/^            class MaterialImplementation$/;"	c	namespace:raytracer::materials::_private_
MaterialLibrary	scripting/materials-module.cpp	/^    struct MaterialLibrary$/;"	s	namespace:__anond88f774d0110	file:
MaterialProperties	materials/material-properties.cpp	/^raytracer::MaterialProperties::MaterialProperties($/;"	f	class:raytracer::MaterialProperties
MaterialProperties	materials/material-properties.h	/^    struct MaterialProperties$/;"	s	namespace:raytracer
Matrix	math/matrix.h	/^        Matrix(Matrix<N>&& m)$/;"	f	class:math::Matrix
Matrix	math/matrix.h	/^        Matrix(const Matrix<N>& m)$/;"	f	class:math::Matrix
Matrix	math/matrix.h	/^        Matrix(std::array<double, N * N>& elements)$/;"	f	class:math::Matrix
Matrix	math/matrix.h	/^        Matrix(std::unique_ptr<std::array<double, N * N>> elements)$/;"	f	class:math::Matrix
Matrix	math/matrix.h	/^    class Matrix$/;"	c	namespace:math
Matrix3x3	math/matrix.h	/^    using Matrix3x3 = Matrix<3>;$/;"	t	namespace:math	typeref:typename:Matrix<3>
Matrix4x4	math/matrix.h	/^    using Matrix4x4 = Matrix<4>;$/;"	t	namespace:math	typeref:typename:Matrix<4>
MaxLogFileSize	easylogging++.h	/^    MaxLogFileSize = 128,$/;"	e	enum:el::ConfigurationType
MeshDemo	demos/basic-sample.cpp	/^    class MeshDemo : public Demo$/;"	c	namespace:__anonec0ba32e0110	file:
Method	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Method_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Method_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodeP/;"	f	struct:chaiscript::eval::Method_AST_Node
Method_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Method_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Microsecond	easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
Millisecond	easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
MillisecondsWidth	easylogging++.h	/^    MillisecondsWidth = 32,$/;"	e	enum:el::ConfigurationType
MillisecondsWidth	easylogging++.h	/^    MillisecondsWidth(void) { init(base::consts::kDefaultMillisecondsWidth); }$/;"	f	class:el::base::MillisecondsWidth
MillisecondsWidth	easylogging++.h	/^    explicit MillisecondsWidth(int width) { init(width); }$/;"	f	class:el::base::MillisecondsWidth
MillisecondsWidth	easylogging++.h	/^class MillisecondsWidth {$/;"	c	namespace:el::base
Minute	easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
Module	chaiscript/dispatchkit/dispatchkit.hpp	/^  class Module$/;"	c	namespace:chaiscript
ModulePtr	chaiscript/dispatchkit/dispatchkit.hpp	/^  typedef std::shared_ptr<Module> ModulePtr;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<Module>
Modulus	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
MultiLoggerSupport	easylogging++.h	/^    MultiLoggerSupport = 128,$/;"	e	enum:el::LoggingFlag
Multiplication	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Mutex	easylogging++.h	/^    Mutex(void) {$/;"	f	class:el::base::threading::internal::Mutex
Mutex	easylogging++.h	/^class Mutex : base::NoCopy {$/;"	c	namespace:el::base::threading::internal
Mutex	easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	namespace:el::base::threading	typeref:typename:base::threading::internal::Mutex
NO_SCRIPTING_FLAGS	Makefile	/^NO_SCRIPTING_FLAGS=-DEXCLUDE_SCRIPTING$/;"	m
NewLineForContainer	easylogging++.h	/^    NewLineForContainer = 1,$/;"	e	enum:el::LoggingFlag
NoCopy	easylogging++.h	/^    NoCopy(void) {}$/;"	f	class:el::base::NoCopy
NoCopy	easylogging++.h	/^class NoCopy {$/;"	c	namespace:el::base
Noise1D	math/functions/noise.h	/^        typedef math::Function<double(const double&)> Noise1D;$/;"	t	namespace:math::functions
Noise2D	math/functions/noise.h	/^        typedef math::Function<double(const Point2D&)> Noise2D;$/;"	t	namespace:math::functions
Noise3D	math/functions/noise.h	/^        typedef math::Function<double(const Point3D&)> Noise3D;$/;"	t	namespace:math::functions
None	easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	e	enum:el::base::DispatchAction
Noop	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Noop_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Noop_AST_Node() :$/;"	f	struct:chaiscript::eval::Noop_AST_Node
Noop_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Noop_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
NormalLog	easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	e	enum:el::base::DispatchAction
Not	easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType
Null	chaiscript/utility/json.hpp	/^            Null,$/;"	e	enum:json::JSON::Class
NullConsumer	pipeline/null-consumer.h	/^            class NullConsumer : public Consumer<T>$/;"	c	namespace:raytracer::pipeline::_private_
Num	chaiscript/language/chaiscript_parser.hpp	/^      bool Num(const bool t_capture = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
OPTIONAL_ARGUMENT	scripting/scripting-util.h	/^#define OPTIONAL_ARGUMENT(/;"	d
OS	easylogging++.h	/^class OS : base::StaticClass {$/;"	c	namespace:el::base::utils
Object	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Object$/;"	c	namespace:ChaiScript_Language
Object	chaiscript/utility/json.hpp	/^            Object,$/;"	e	enum:json::JSON::Class
Object	chaiscript/utility/json.hpp	/^inline JSON Object() {$/;"	f	namespace:json	typeref:typename:JSON
ObjectRange	chaiscript/utility/json.hpp	/^        JSONConstWrapper<map<string,JSON>> ObjectRange() const {$/;"	f	class:json::JSON	typeref:typename:JSONConstWrapper<map<string,JSON>>
ObjectRange	chaiscript/utility/json.hpp	/^        JSONWrapper<map<string,JSON>> ObjectRange() {$/;"	f	class:json::JSON	typeref:typename:JSONWrapper<map<string,JSON>>
Object_Data	chaiscript/dispatchkit/boxed_value.hpp	/^      struct Object_Data$/;"	s	class:chaiscript::Boxed_Value
OmnidirectionalPointLight	lights/omnidirectional-point-light.cpp	/^        OmnidirectionalPointLight(const math::Point3D& position, const imaging::Color& color)$/;"	f	class:__anon4ff1f30d0110::OmnidirectionalPointLight	file:
OmnidirectionalPointLight	lights/omnidirectional-point-light.cpp	/^    class OmnidirectionalPointLight : public raytracer::lights::_private_::PointLightImplementat/;"	c	namespace:__anon4ff1f30d0110	file:
Operator	chaiscript/language/chaiscript_parser.hpp	/^      bool Operator(const size_t t_precedence = 0) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Operator_Helper	chaiscript/language/chaiscript_parser.hpp	/^      bool Operator_Helper(const size_t t_precedence) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Operators	chaiscript/language/chaiscript_algebraic.hpp	/^  struct Operators {$/;"	s	namespace:chaiscript
Opers	chaiscript/language/chaiscript_algebraic.hpp	/^    enum Opers$/;"	g	struct:chaiscript::Operators
Or	easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils::bitwise	typeref:typename:base::type::EnumType
PI	math/angle.cpp	/^  const double PI = 3.141592653589793238;$/;"	v	namespace:__anon16ec2c960110	typeref:typename:const double
Param_Types	chaiscript/dispatchkit/proxy_functions.hpp	/^        Param_Types()$/;"	f	class:chaiscript::dispatch::Param_Types
Param_Types	chaiscript/dispatchkit/proxy_functions.hpp	/^        Param_Types(std::vector<std::pair<std::string, Type_Info>> t_types)$/;"	f	class:chaiscript::dispatch::Param_Types
Param_Types	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Param_Types$/;"	c	namespace:chaiscript::dispatch
Paren_Expression	chaiscript/language/chaiscript_parser.hpp	/^      bool Paren_Expression() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Parse_Location	chaiscript/language/chaiscript_common.hpp	/^    Parse_Location(std::shared_ptr<std::string> t_fname, const int t_start_line=0, const int t_s/;"	f	struct:chaiscript::Parse_Location
Parse_Location	chaiscript/language/chaiscript_common.hpp	/^    Parse_Location(std::string t_fname="", const int t_start_line=0, const int t_start_col=0,$/;"	f	struct:chaiscript::Parse_Location
Parse_Location	chaiscript/language/chaiscript_common.hpp	/^  struct Parse_Location {$/;"	s	namespace:chaiscript
Parser	easylogging++.h	/^    class Parser : base::StaticClass {$/;"	c	class:el::Configurations
PerformanceCleanerUpper	performance/performance.h	/^        PerformanceCleanerUpper(bool print_statistics_on_destruction = false)$/;"	f	class:performance::PerformanceCleanerUpper
PerformanceCleanerUpper	performance/performance.h	/^    class PerformanceCleanerUpper$/;"	c	namespace:performance
PerformanceTracking	easylogging++.h	/^    PerformanceTracking = 64,$/;"	e	enum:el::ConfigurationType
PerformanceTrackingCallback	easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	namespace:el
PerformanceTrackingCallbackPtr	easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<PerformanceTrackingCallback>
PerspectiveCamera	cameras/perspective-camera.cpp	/^raytracer::cameras::_private_::PerspectiveCamera::PerspectiveCamera(const math::Matrix4x4 transf/;"	f	class:raytracer::cameras::_private_::PerspectiveCamera
PerspectiveCamera	cameras/perspective-camera.h	/^            class PerspectiveCamera : public DisplaceableCamera$/;"	c	namespace:raytracer::cameras::_private_
Pipeline	pipeline/pipeline.h	/^        class Pipeline$/;"	c	namespace:raytracer::pipeline
PipelineBuilder	pipeline/pipeline-builder.h	/^                PipelineBuilder(T1& value, std::shared_ptr<pipeline::Consumer<T1>> first, std::s/;"	f	struct:raytracer::pipeline::_private_::PipelineBuilder
PipelineBuilder	pipeline/pipeline-builder.h	/^            struct PipelineBuilder$/;"	s	namespace:raytracer::pipeline::_private_
PipelineBuilderStart	pipeline/pipeline-builder.h	/^                PipelineBuilderStart(T& value)$/;"	f	struct:raytracer::pipeline::_private_::PipelineBuilderStart
PipelineBuilderStart	pipeline/pipeline-builder.h	/^            struct PipelineBuilderStart$/;"	s	namespace:raytracer::pipeline::_private_
PipelineLibrary	scripting/pipeline-module.cpp	/^    struct PipelineLibrary$/;"	s	namespace:__anona6a8c5210110	file:
Placeholder_Object	chaiscript/dispatchkit/proxy_functions.hpp	/^    struct Placeholder_Object$/;"	s	namespace:chaiscript::dispatch
Plane	math/plane.cpp	/^math::Plane::Plane(const Point3D& p, const Vector3D& n)$/;"	f	class:math::Plane
Plane	math/plane.h	/^    struct Plane$/;"	s	namespace:math
PlaneXYImplementation	primitives/plane-primitive.cpp	/^        PlaneXYImplementation()$/;"	f	class:__anon22e967e70110::PlaneXYImplementation	file:
PlaneXYImplementation	primitives/plane-primitive.cpp	/^    class PlaneXYImplementation : public CoordinatePlaneImplementation$/;"	c	namespace:__anon22e967e70110	file:
Planes	imaging/bmp-format.cpp	/^        uint16_t Planes;          \/* Number of color planes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V2	typeref:typename:uint16_t	file:
Planes	imaging/bmp-format.cpp	/^        uint16_t Planes;          \/* Number of color planes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint16_t	file:
Planes	imaging/bmp-format.cpp	/^        uint16_t Planes;          \/* Number of color planes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint16_t	file:
Planes	imaging/bmp-format.cpp	/^        uint16_t Planes;          \/* Number of color planes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint16_t	file:
Point	math/point.h	/^        Point()$/;"	f	class:math::Point
Point	math/point.h	/^        Point(Ts... args)$/;"	f	class:math::Point
Point	math/point.h	/^        Point(std::array<double, N>&& coords)$/;"	f	class:math::Point
Point	math/point.h	/^    class Point : public _private_::DimensionSpecificMembers<N, Point<N>>$/;"	c	namespace:math
Point2D	math/point.h	/^    using Point2D = Point<2>;$/;"	t	namespace:math	typeref:typename:Point<2>
Point3D	math/point.h	/^    using Point3D = Point<3>;$/;"	t	namespace:math	typeref:typename:Point<3>
Point4D	math/point.h	/^    using Point4D = Point<4>;$/;"	t	namespace:math	typeref:typename:Point<4>
PointFactories	scripting/math-module.cpp	/^    struct PointFactories$/;"	s	namespace:__anon63c0fd550110	file:
PointLightImplementation	lights/point-light.cpp	/^raytracer::lights::_private_::PointLightImplementation::PointLightImplementation(const math::Poi/;"	f	class:raytracer::lights::_private_::PointLightImplementation
PointLightImplementation	lights/point-light.h	/^            class PointLightImplementation : public LightSourceImplementation$/;"	c	namespace:raytracer::lights::_private_
PointOutputHelper	math/point.h	/^        struct PointOutputHelper$/;"	s	namespace:math::_private_
PointOutputHelper	math/point.h	/^        struct PointOutputHelper<0, N>$/;"	s	namespace:math::_private_
PointOutputHelper	math/point.h	/^        struct PointOutputHelper<N, N>$/;"	s	namespace:math::_private_
Polar	math/coordinate-systems.h	/^    struct Polar$/;"	s	namespace:math
Position	chaiscript/language/chaiscript_parser.hpp	/^        Position()$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position
Position	chaiscript/language/chaiscript_parser.hpp	/^        Position(std::string::const_iterator t_pos, std::string::const_iterator t_end)$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position
Position	chaiscript/language/chaiscript_parser.hpp	/^      struct Position$/;"	s	class:chaiscript::parser::ChaiScript_Parser
Position2D	data-structures/position.h	/^    Position2D(unsigned x, unsigned y)$/;"	f	struct:Position2D
Position2D	data-structures/position.h	/^struct Position2D final$/;"	s
Position3D	data-structures/position.h	/^    Position3D(unsigned x, unsigned y, unsigned z)$/;"	f	struct:Position3D
Position3D	data-structures/position.h	/^struct Position3D final$/;"	s
PreRollOutCallback	easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	namespace:el
Predicate	easylogging++.h	/^        Predicate(Level level, ConfigurationType configurationType) :$/;"	f	class:el::Configuration::Predicate
Predicate	easylogging++.h	/^        Predicate(const char* filename, unsigned long int lineNumber)$/;"	f	class:el::base::HitCounter::Predicate
Predicate	easylogging++.h	/^    class Predicate {$/;"	c	class:el::Configuration
Predicate	easylogging++.h	/^    class Predicate {$/;"	c	class:el::base::HitCounter
Prefix	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Prefix	chaiscript/language/chaiscript_parser.hpp	/^      bool Prefix() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Prefix_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Prefix_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodeP/;"	f	struct:chaiscript::eval::Prefix_AST_Node
Prefix_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Prefix_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Primitive	primitives/primitive.h	/^        explicit Primitive(std::shared_ptr<primitives::_private_::PrimitiveImplementation> impl /;"	f	class:raytracer::Primitive
Primitive	primitives/primitive.h	/^    class Primitive$/;"	c	namespace:raytracer
PrimitiveImplementation	primitives/primitive.h	/^            class PrimitiveImplementation$/;"	c	namespace:raytracer::primitives::_private_
Processor	pipeline/processor.h	/^        class Processor : public Consumer<INPUT>, public Producer<OUTPUT>$/;"	c	namespace:raytracer::pipeline
Producer	pipeline/producer.h	/^        class Producer : public _private_::ProducerTag, public virtual Pipeline$/;"	c	namespace:raytracer::pipeline
ProducerTag	pipeline/producer.h	/^            class ProducerTag { };$/;"	c	namespace:raytracer::pipeline::_private_
ProfileData	imaging/bmp-format.cpp	/^        uint32_t ProfileData;$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
ProfileSize	imaging/bmp-format.cpp	/^        uint32_t ProfileSize;$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^  typedef std::shared_ptr<dispatch::Proxy_Function_Base> Proxy_Function;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<dispatch::Proxy_Function_Base>
Proxy_Function_Base	chaiscript/dispatchkit/proxy_functions.hpp	/^        Proxy_Function_Base(std::vector<Type_Info> t_types, int t_arity)$/;"	f	class:chaiscript::dispatch::Proxy_Function_Base
Proxy_Function_Base	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch
Proxy_Function_Callable_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^        Proxy_Function_Callable_Impl(Callable f)$/;"	f	class:chaiscript::dispatch::Proxy_Function_Callable_Impl
Proxy_Function_Callable_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^      class Proxy_Function_Callable_Impl : public Proxy_Function_Impl_Base$/;"	c	namespace:chaiscript::dispatch
Proxy_Function_Impl_Base	chaiscript/dispatchkit/proxy_functions.hpp	/^        Proxy_Function_Impl_Base(const std::vector<Type_Info> &t_types)$/;"	f	class:chaiscript::dispatch::Proxy_Function_Impl_Base
Proxy_Function_Impl_Base	chaiscript/dispatchkit/proxy_functions.hpp	/^    class Proxy_Function_Impl_Base : public Proxy_Function_Base$/;"	c	namespace:chaiscript::dispatch
QuadraticEquation	math/quadratic_equation.cpp	/^math::QuadraticEquation::QuadraticEquation(double a, double b, double c)$/;"	f	class:math::QuadraticEquation
QuadraticEquation	math/quadratic_equation.h	/^    class QuadraticEquation$/;"	c	namespace:math
Quoted_String	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Quoted_String	chaiscript/language/chaiscript_parser.hpp	/^      bool Quoted_String(const bool t_capture = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Quoted_String_	chaiscript/language/chaiscript_parser.hpp	/^      bool Quoted_String_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Quoted_String_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Quoted_String_AST_Node(std::string t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Quoted_String_AST_Node
Quoted_String_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Quoted_String_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
RELEASE_FLAGS	Makefile	/^RELEASE_FLAGS=$(COMMONFLAGS) -DNDEBUG -O3 -s -ort-release$/;"	m
RGB	imaging/bmp-format.cpp	/^    struct RGB$/;"	s	namespace:__anon5b9926d60110	file:
RGBColor	imaging/wif-format.cpp	/^        RGBColor(const Color& c)$/;"	f	struct:__anon10e0153d0110::RGBColor	file:
RGBColor	imaging/wif-format.cpp	/^    struct RGBColor$/;"	s	namespace:__anon10e0153d0110	file:
Range	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Range$/;"	c	namespace:ChaiScript_Language
Rasterizer	math/rasterizer.h	/^        Rasterizer(const Rectangle2D& rect, unsigned horizontal_subdivisions, unsigned vertical_/;"	f	class:math::Rasterizer
Rasterizer	math/rasterizer.h	/^    class Rasterizer$/;"	c	namespace:math
Ray	math/ray.cpp	/^math::Ray::Ray(const Point3D& origin, const Point3D& through)$/;"	f	class:math::Ray
Ray	math/ray.cpp	/^math::Ray::Ray(const Point3D& origin, const Vector3D& direction)$/;"	f	class:math::Ray
Ray	math/ray.h	/^    struct Ray final$/;"	s	namespace:math
RayTracer	raytracers/ray-tracer.h	/^        explicit RayTracer(std::shared_ptr<raytracers::_private_::RayTracerImplementation> imple/;"	f	class:raytracer::RayTracer
RayTracer	raytracers/ray-tracer.h	/^    class RayTracer$/;"	c	namespace:raytracer
RayTracerImplementation	raytracers/ray-tracer.h	/^            class RayTracerImplementation$/;"	c	namespace:raytracer::raytracers::_private_
RayTracerV0	raytracers/ray-tracer-v0.h	/^            class RayTracerV0 : public RayTracerImplementation$/;"	c	namespace:raytracer::raytracers::_private_
RaytracerLibrary	scripting/raytracing-module.cpp	/^    struct RaytracerLibrary$/;"	s	namespace:__anon5f59be3f0110	file:
Rectangle2D	math/rectangle2d.cpp	/^math::Rectangle2D::Rectangle2D(const Point2D& origin, const Vector2D& x_axis, const Vector2D& y_/;"	f	class:math::Rectangle2D
Rectangle2D	math/rectangle2d.h	/^    struct Rectangle2D$/;"	s	namespace:math
Rectangle3D	math/rectangle3d.cpp	/^math::Rectangle3D::Rectangle3D(const Point3D& origin, const Vector3D& x_axis, const Vector3D& y_/;"	f	class:math::Rectangle3D
Rectangle3D	math/rectangle3d.h	/^    struct Rectangle3D$/;"	s	namespace:math
RedMask	imaging/bmp-format.cpp	/^        uint32_t RedMask;         \/* Mask identifying bits of red component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
RedMask	imaging/bmp-format.cpp	/^        uint32_t RedMask;         \/* Mask identifying bits of red component *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
RedX	imaging/bmp-format.cpp	/^        int32_t  RedX;            \/* X coordinate of red endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
RedX	imaging/bmp-format.cpp	/^        int32_t  RedX;            \/* X coordinate of red endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
RedY	imaging/bmp-format.cpp	/^        int32_t  RedY;            \/* Y coordinate of red endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
RedY	imaging/bmp-format.cpp	/^        int32_t  RedY;            \/* Y coordinate of red endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
RedZ	imaging/bmp-format.cpp	/^        int32_t  RedZ;            \/* Z coordinate of red endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
RedZ	imaging/bmp-format.cpp	/^        int32_t  RedZ;            \/* Z coordinate of red endpoint *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Reference	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Reference	chaiscript/language/chaiscript_parser.hpp	/^      bool Reference() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Reference_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Reference_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_No/;"	f	struct:chaiscript::eval::Reference_AST_Node
Reference_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Reference_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
RegisteredHitCounters	easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCo/;"	c	namespace:el::base
RegisteredLoggers	easylogging++.h	/^    explicit RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::base::RegisteredLoggers
RegisteredLoggers	easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	namespace:el::base
Registry	easylogging++.h	/^    Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::base::utils::Registry
Registry	easylogging++.h	/^    Registry(void) {}$/;"	f	class:el::base::utils::Registry
Registry	easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::map<T_Key, T_Ptr*>> {$/;"	c	namespace:el::base::utils
RegistryWithPred	easylogging++.h	/^    RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>(/;"	f	class:el::base::utils::RegistryWithPred
RegistryWithPred	easylogging++.h	/^    RegistryWithPred(void) {$/;"	f	class:el::base::utils::RegistryWithPred
RegistryWithPred	easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	namespace:el::base::utils
Renderer	renderers/renderer.h	/^        explicit Renderer(std::shared_ptr<renderers::_private_::RendererImplementation> implemen/;"	f	class:raytracer::Renderer
Renderer	renderers/renderer.h	/^    class Renderer$/;"	c	namespace:raytracer
RendererImplementation	renderers/renderer.cpp	/^raytracer::renderers::_private_::RendererImplementation::RendererImplementation(unsigned horizon/;"	f	class:raytracer::renderers::_private_::RendererImplementation
RendererImplementation	renderers/renderer.h	/^            class RendererImplementation$/;"	c	namespace:raytracer::renderers::_private_
RendererLibrary	scripting/rendering-module.cpp	/^    struct RendererLibrary$/;"	s	namespace:__anonbd85b8490110	file:
RendererProcessor	pipeline/renderer-processor.cpp	/^        RendererProcessor(Renderer renderer)$/;"	f	class:__anon2af506bf0110::RendererProcessor	file:
RendererProcessor	pipeline/renderer-processor.cpp	/^    class RendererProcessor : public Processor<std::shared_ptr<Scene>, std::shared_ptr<Bitmap>>$/;"	c	namespace:__anon2af506bf0110	file:
Reserved	imaging/bmp-format.cpp	/^        uint32_t Reserved;$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
Reserved1	imaging/bmp-format.cpp	/^        uint16_t Reserved1;    \/* Always 0 *\/$/;"	m	struct:__anon5b9926d60110::FILE_HEADER	typeref:typename:uint16_t	file:
Reserved2	imaging/bmp-format.cpp	/^        uint16_t Reserved2;    \/* Always 0 *\/$/;"	m	struct:__anon5b9926d60110::FILE_HEADER	typeref:typename:uint16_t	file:
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef Boxed_Value Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:Boxed_Value
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef Result * Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:Result *
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef Result& Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:Result &
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef const Result * Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:const Result *
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef const Result& Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:const Result &
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef std::reference_wrapper<Boxed_Value> Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:std::reference_wrapper<Boxed_Value>
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef std::shared_ptr<Result> Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:std::shared_ptr<Result>
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef std::shared_ptr<const Result> Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:std::shared_ptr<const Result>
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef typename Cast_Helper_Inner<T>::Result_Type Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper	typeref:typename:Cast_Helper_Inner<T>::Result_Type
Result_Type	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        typedef typename std::add_const<Result>::type Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:std::add_const<Result>::type
Result_Type	chaiscript/dispatchkit/boxed_number.hpp	/^        typedef Boxed_Number Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper	typeref:typename:Boxed_Number
Result_Type	chaiscript/dispatchkit/function_call.hpp	/^        typedef std::function<Signature> Result_Type;$/;"	t	struct:chaiscript::detail::Cast_Helper	typeref:typename:std::function<Signature>
Return	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Return	chaiscript/language/chaiscript_parser.hpp	/^      bool Return() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
ReturnType	chaiscript/dispatchkit/bootstrap.hpp	/^        typedef typename std::remove_extent<T>::type ReturnType;$/;"	t	function:chaiscript::bootstrap::array	typeref:typename:std::remove_extent<T>::type
Return_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Return_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodeP/;"	f	struct:chaiscript::eval::Return_AST_Node
Return_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Return_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Return_Type	chaiscript/dispatchkit/callable_traits.hpp	/^          typedef Ret Return_Type;$/;"	t	struct:chaiscript::dispatch::detail::Function_Signature	typeref:typename:Ret
Return_Type	chaiscript/dispatchkit/callable_traits.hpp	/^          typedef typename Function_Signature<decltype(&T::operator())>::Return_Type Return_Type/;"	t	struct:chaiscript::dispatch::detail::Callable_Traits
Return_Type	chaiscript/dispatchkit/proxy_functions.hpp	/^          typedef typename detail::Function_Signature<Func>::Return_Type Return_Type;$/;"	t	function:chaiscript::dispatch::Proxy_Function_Callable_Impl::do_call	typeref:typename:detail::Function_Signature<Func>::Return_Type
Return_Value	chaiscript/language/chaiscript_common.hpp	/^        Return_Value(Boxed_Value t_return_value) : retval(std::move(t_return_value)) { }$/;"	f	struct:chaiscript::eval::detail::Return_Value
Return_Value	chaiscript/language/chaiscript_common.hpp	/^      struct Return_Value {$/;"	s	namespace:chaiscript::eval::detail
SIMPLEJSON_HPP	chaiscript/utility/json.hpp	/^#define SIMPLEJSON_HPP$/;"	d
START_ARGUMENTS	scripting/scripting-util.h	/^#define START_ARGUMENTS(/;"	d
STRCAT	easylogging++.h	/^#   define STRCAT(/;"	d
STRCPY	easylogging++.h	/^#   define STRCPY(/;"	d
STRERROR	easylogging++.h	/^#   define STRERROR(/;"	d
STRTOK	easylogging++.h	/^#   define STRTOK(/;"	d
Sampler	samplers/sampler.h	/^        explicit Sampler(std::shared_ptr<samplers::_private_::SamplerImplementation> implementat/;"	f	class:raytracer::Sampler
Sampler	samplers/sampler.h	/^    class Sampler$/;"	c	namespace:raytracer
SamplerImplementation	samplers/sampler.h	/^            class SamplerImplementation$/;"	c	namespace:raytracer::samplers::_private_
SamplerLibrary	scripting/samplers-module.cpp	/^    struct SamplerLibrary$/;"	s	namespace:__anon140c3c520110	file:
Scene	raytracers/scene.h	/^        Scene(raytracer::Camera camera, raytracer::Primitive root)$/;"	f	struct:raytracer::Scene
Scene	raytracers/scene.h	/^        Scene(raytracer::Camera camera, raytracer::Primitive root, const std::vector<LightSource/;"	f	struct:raytracer::Scene
Scene	raytracers/scene.h	/^    struct Scene$/;"	s	namespace:raytracer
Scope	chaiscript/dispatchkit/dispatchkit.hpp	/^        typedef std::vector<std::pair<std::string, Boxed_Value>> Scope;$/;"	t	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<std::pair<std::string,Boxed_Value>>
Scope	chaiscript/dispatchkit/dispatchkit.hpp	/^      typedef std::vector<std::pair<std::string, Boxed_Value>> Scope;$/;"	t	struct:chaiscript::detail::Stack_Holder	typeref:typename:std::vector<std::pair<std::string,Boxed_Value>>
Scope_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^        Scope_Push_Pop(const chaiscript::detail::Dispatch_State &t_ds)$/;"	f	struct:chaiscript::eval::detail::Scope_Push_Pop
Scope_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^      struct Scope_Push_Pop$/;"	s	namespace:chaiscript::eval::detail
ScopedLock	easylogging++.h	/^    explicit ScopedLock(M& mutex) {$/;"	f	class:el::base::threading::internal::ScopedLock
ScopedLock	easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	namespace:el::base::threading::internal
ScopedLock	easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	namespace:el::base::threading	typeref:typename:base::threading::internal::ScopedLock<base::threading::Mutex>
Second	easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	e	enum:el::base::TimestampUnit
SerialTaskScheduler	tasks/serial-task-scheduler.cpp	/^    class SerialTaskScheduler : public tasks::schedulers::_private_::TaskSchedulerImplementation$/;"	c	namespace:__anone7bc5c570110	file:
SetType	chaiscript/utility/json.hpp	/^        void SetType( Class type ) {$/;"	f	class:json::JSON	typeref:typename:void
Shift	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Signature	chaiscript/dispatchkit/callable_traits.hpp	/^          typedef Ret (Signature)(Params...);$/;"	t	struct:chaiscript::dispatch::detail::Function_Signature	typeref:typename:Ret ()(Params...)
Signature	chaiscript/dispatchkit/callable_traits.hpp	/^          typedef typename Function_Signature<decltype(&T::operator())>::Signature Signature;$/;"	t	struct:chaiscript::dispatch::detail::Callable_Traits
Signature	chaiscript/dispatchkit/register_function.hpp	/^      typedef typename dispatch::detail::Callable_Traits<T>::Signature Signature;$/;"	t	function:chaiscript::fun	typeref:typename:dispatch::detail::Callable_Traits<T>::Signature
SingleArgumentParser	scripting/scripting-util.h	/^                SingleArgumentParser(bool optional)$/;"	f	struct:raytracer::scripting::util::SingleArgumentParser
SingleArgumentParser	scripting/scripting-util.h	/^            struct SingleArgumentParser$/;"	s	namespace:raytracer::scripting::util
SingleSampler	samplers/single-sampler.cpp	/^    class SingleSampler : public raytracer::samplers::_private_::SamplerImplementation$/;"	c	namespace:__anon99214b2f0110	file:
Single_Quoted_String	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Single_Quoted_String	chaiscript/language/chaiscript_parser.hpp	/^      bool Single_Quoted_String(const bool t_capture = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Single_Quoted_String_	chaiscript/language/chaiscript_parser.hpp	/^      bool Single_Quoted_String_() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Single_Quoted_String_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Single_Quoted_String_AST_Node(std::string t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Single_Quoted_String_AST_Node
Single_Quoted_String_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Single_Quoted_String_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Size	imaging/bmp-format.cpp	/^        uint32_t Size;            \/* Size of this header in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V2	typeref:typename:uint32_t	file:
Size	imaging/bmp-format.cpp	/^        uint32_t Size;            \/* Size of this header in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint32_t	file:
Size	imaging/bmp-format.cpp	/^        uint32_t Size;            \/* Size of this header in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
Size	imaging/bmp-format.cpp	/^        uint32_t Size;            \/* Size of this header in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
SizeOfBitmap	imaging/bmp-format.cpp	/^        uint32_t SizeOfBitmap;    \/* Size of bitmap in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:uint32_t	file:
SizeOfBitmap	imaging/bmp-format.cpp	/^        uint32_t SizeOfBitmap;    \/* Size of bitmap in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:uint32_t	file:
SizeOfBitmap	imaging/bmp-format.cpp	/^        uint32_t SizeOfBitmap;    \/* Size of bitmap in bytes *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:uint32_t	file:
SkipComment	chaiscript/language/chaiscript_parser.hpp	/^      bool SkipComment() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
SkipWS	chaiscript/language/chaiscript_parser.hpp	/^      bool SkipWS(bool skip_cr=false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
SpecializedSingleArgumentParser	scripting/scripting-util.h	/^                SpecializedSingleArgumentParser(T* storage, bool optional)$/;"	f	struct:raytracer::scripting::util::SpecializedSingleArgumentParser
SpecializedSingleArgumentParser	scripting/scripting-util.h	/^            struct SpecializedSingleArgumentParser : public SingleArgumentParser$/;"	s	namespace:raytracer::scripting::util
SphereImplementation	primitives/sphere-primitive.cpp	/^    class SphereImplementation : public raytracer::primitives::_private_::PrimitiveImplementatio/;"	c	namespace:__anon5226e87e0110	file:
Spherical	math/coordinate-systems.h	/^    struct Spherical$/;"	s	namespace:math
StackData	chaiscript/dispatchkit/dispatchkit.hpp	/^        typedef std::vector<Scope> StackData;$/;"	t	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<Scope>
StackData	chaiscript/dispatchkit/dispatchkit.hpp	/^      typedef std::vector<Scope> StackData;$/;"	t	struct:chaiscript::detail::Stack_Holder	typeref:typename:std::vector<Scope>
Stack_Holder	chaiscript/dispatchkit/dispatchkit.hpp	/^      Stack_Holder()$/;"	f	struct:chaiscript::detail::Stack_Holder
Stack_Holder	chaiscript/dispatchkit/dispatchkit.hpp	/^    struct Stack_Holder$/;"	s	namespace:chaiscript::detail
Stack_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^        Stack_Push_Pop(const chaiscript::detail::Dispatch_State &t_ds)$/;"	f	struct:chaiscript::eval::detail::Stack_Push_Pop
Stack_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^      struct Stack_Push_Pop$/;"	s	namespace:chaiscript::eval::detail
StandardRenderer	renderers/standard-renderer.cpp	/^        StandardRenderer(unsigned horizontal_size, unsigned vertical_size, raytracer::Sampler sa/;"	f	class:__anon61ccc6c40110::StandardRenderer	file:
StandardRenderer	renderers/standard-renderer.cpp	/^    class StandardRenderer : public raytracer::renderers::_private_::RendererImplementation$/;"	c	namespace:__anon61ccc6c40110	file:
State	chaiscript/dispatchkit/dispatchkit.hpp	/^        struct State$/;"	s	class:chaiscript::detail::Dispatch_Engine
State	chaiscript/language/chaiscript_engine.hpp	/^    struct State$/;"	s	class:chaiscript::ChaiScript
Statements	chaiscript/language/chaiscript_parser.hpp	/^      bool Statements() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
StaticClass	easylogging++.h	/^class StaticClass {$/;"	c	namespace:el::base
Static_Caster	chaiscript/dispatchkit/type_conversions.hpp	/^      class Static_Caster$/;"	c	namespace:chaiscript::detail
Static_Conversion_Impl	chaiscript/dispatchkit/type_conversions.hpp	/^        Static_Conversion_Impl()$/;"	f	class:chaiscript::detail::Static_Conversion_Impl
Static_Conversion_Impl	chaiscript/dispatchkit/type_conversions.hpp	/^      class Static_Conversion_Impl : public Type_Conversion_Base$/;"	c	namespace:chaiscript::detail
Std_Lib	chaiscript/chaiscript_stdlib.hpp	/^  class Std_Lib$/;"	c	namespace:chaiscript
Storage	easylogging++.h	/^    Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	class:el::base::Storage
Storage	easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::base
StoragePointer	easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	namespace:el::base::type	typeref:typename:std::shared_ptr<base::Storage>
Store	test-generation/shared.rb	/^class Store$/;"	c
Str	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Str	easylogging++.h	/^class Str : base::StaticClass {$/;"	c	namespace:el::base::utils
Str_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Str_AST_Node(std::string t_ast_node_text, Parse_Location t_loc) :$/;"	f	struct:chaiscript::eval::Str_AST_Node
Str_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Str_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
StrictLogFileSizeCheck	easylogging++.h	/^    StrictLogFileSizeCheck = 32,$/;"	e	enum:el::LoggingFlag
String	chaiscript/utility/json.hpp	/^            String,$/;"	e	enum:json::JSON::Class
String	chaiscript/utility/json.hpp	/^        string             *String;$/;"	m	union:json::JSON::BackingData	typeref:typename:string *
String	test-generation/shared.rb	/^class String$/;"	c
Subtraction	chaiscript/language/chaiscript_common.hpp	/^                Comparison, Addition, Subtraction, Multiplication, Division, Modulus, Array_Call/;"	e	enum:chaiscript::AST_Node_Type::Type
Switch	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Switch	chaiscript/language/chaiscript_parser.hpp	/^      bool Switch() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Switch_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Switch_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodeP/;"	f	struct:chaiscript::eval::Switch_AST_Node
Switch_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Switch_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Symbol	chaiscript/language/chaiscript_parser.hpp	/^      bool Symbol(const char *t_s, const bool t_capture = false, const bool t_disallow_preventio/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Symbol_	chaiscript/language/chaiscript_parser.hpp	/^      bool Symbol_(const char *t_s) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
SysLog	easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	e	enum:el::base::DispatchAction
TEST_CARTESIAN3D_CYLINDRICALY	tests/math/coordinate-system-tests.cpp	/^#define TEST_CARTESIAN3D_CYLINDRICALY(/;"	d	file:
TEST_CARTESIAN3D_SPHERICAL	tests/math/coordinate-system-tests.cpp	/^#define TEST_CARTESIAN3D_SPHERICAL(/;"	d	file:
TEST_FLAGS	Makefile	/^TEST_FLAGS=$(DEBUG_FLAGS) -DTEST_BUILD -ort-test$/;"	m
TEST_TO_AND_FROM_3D	tests/math/coordinate-system-tests.cpp	/^#define TEST_TO_AND_FROM_3D(/;"	d	file:
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_COMMON_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_SUPPRESS_WARNINGS_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_SUPPRESS_WARNINGS_H_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED$/;"	M
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	Catch.h	/^#define TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED$/;"	M
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	Catch.h	/^#define TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED$/;"	M
Task	tasks/task.h	/^    class Task$/;"	c	namespace:tasks
TaskScheduler	tasks/task-scheduler.h	/^        explicit TaskScheduler(std::shared_ptr<tasks::schedulers::_private_::TaskSchedulerImplem/;"	f	class:tasks::TaskScheduler
TaskScheduler	tasks/task-scheduler.h	/^    class TaskScheduler$/;"	c	namespace:tasks
TaskSchedulerImplementation	tasks/task-scheduler.h	/^            class TaskSchedulerImplementation$/;"	c	namespace:tasks::schedulers::_private_
Ternary_Cond	chaiscript/language/chaiscript_common.hpp	/^                Logical_And, Logical_Or, Reference, Switch, Case, Default, Ternary_Cond, Noop, C/;"	e	enum:chaiscript::AST_Node_Type::Type
Ternary_Cond_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Ternary_Cond_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST/;"	f	struct:chaiscript::eval::Ternary_Cond_AST_Node
Ternary_Cond_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Ternary_Cond_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
TestFileContext	test-generation/shared.rb	/^class TestFileContext$/;"	c
TestSuiteContext	test-generation/shared.rb	/^class TestSuiteContext$/;"	c
TextWriter	pipeline/text-writer-consumer.cpp	/^        TextWriter(std::ostream& out)$/;"	f	class:__anon324c0a430110::TextWriter	file:
TextWriter	pipeline/text-writer-consumer.cpp	/^    class TextWriter : public Consumer<std::string>$/;"	c	namespace:__anon324c0a430110	file:
This_Foist	chaiscript/dispatchkit/dispatchkit.hpp	/^                  This_Foist(Dispatch_Engine &e, const Boxed_Value &t_bv) : m_e(e) {$/;"	f	struct:chaiscript::detail::Dispatch_Engine::call_member::__anon2c2de5d30602::This_Foist
This_Foist	chaiscript/dispatchkit/dispatchkit.hpp	/^                struct This_Foist {$/;"	s	function:chaiscript::detail::Dispatch_Engine::call_member::__anon2c2de5d30602
ThreadId	easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId/;"	e	enum:el::base::FormatFlags
ThreadSafe	easylogging++.h	/^    ThreadSafe(void) {}$/;"	f	class:el::base::threading::ThreadSafe
ThreadSafe	easylogging++.h	/^class ThreadSafe {$/;"	c	namespace:el::base::threading
Thread_Storage	chaiscript/chaiscript_threading.hpp	/^            explicit Thread_Storage(void *)$/;"	f	class:chaiscript::detail::threading::Thread_Storage
Thread_Storage	chaiscript/chaiscript_threading.hpp	/^            explicit Thread_Storage(void *t_key)$/;"	f	class:chaiscript::detail::threading::Thread_Storage
Thread_Storage	chaiscript/chaiscript_threading.hpp	/^        class Thread_Storage$/;"	c	namespace:chaiscript::detail::threading
TimeStamp	animation/time-stamp.cpp	/^animation::TimeStamp::TimeStamp()$/;"	f	class:animation::TimeStamp
TimeStamp	animation/time-stamp.cpp	/^animation::TimeStamp::TimeStamp(const Duration& since_epoch)$/;"	f	class:animation::TimeStamp
TimeStamp	animation/time-stamp.h	/^    class TimeStamp$/;"	c	namespace:animation
TimestampUnit	easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	g	namespace:el::base	typeref:typename:base::type::EnumType
ToBool	chaiscript/utility/json.hpp	/^        bool ToBool( bool &ok ) const {$/;"	f	class:json::JSON	typeref:typename:bool
ToBool	chaiscript/utility/json.hpp	/^        bool ToBool() const { bool b; return ToBool( b ); }$/;"	f	class:json::JSON	typeref:typename:bool
ToFile	easylogging++.h	/^    ToFile = 2,$/;"	e	enum:el::ConfigurationType
ToFloat	chaiscript/utility/json.hpp	/^        double ToFloat( bool &ok ) const {$/;"	f	class:json::JSON	typeref:typename:double
ToFloat	chaiscript/utility/json.hpp	/^        double ToFloat() const { bool b; return ToFloat( b ); }$/;"	f	class:json::JSON	typeref:typename:double
ToInt	chaiscript/utility/json.hpp	/^        long ToInt( bool &ok ) const {$/;"	f	class:json::JSON	typeref:typename:long
ToInt	chaiscript/utility/json.hpp	/^        long ToInt() const { bool b; return ToInt( b ); }$/;"	f	class:json::JSON	typeref:typename:long
ToStandardOutput	easylogging++.h	/^    ToStandardOutput = 4,$/;"	e	enum:el::ConfigurationType
ToString	chaiscript/utility/json.hpp	/^        string ToString( bool &ok ) const {$/;"	f	class:json::JSON	typeref:typename:string
ToString	chaiscript/utility/json.hpp	/^        string ToString() const { bool b; return ToString( b ); }$/;"	f	class:json::JSON	typeref:typename:string
Trace	easylogging++.h	/^        Trace = 2,$/;"	e	enum:el::Level
TraceResult	raytracers/trace-result.h	/^        TraceResult(imaging::Color color, unsigned group_id, const math::Ray& ray, double t)$/;"	f	struct:raytracer::TraceResult
TraceResult	raytracers/trace-result.h	/^    struct TraceResult$/;"	s	namespace:raytracer
Transformation2D	math/transformation2d.h	/^        Transformation2D(const Matrix3x3& transformation_matrix, const Matrix3x3& inverse_transf/;"	f	class:math::Transformation2D
Transformation2D	math/transformation2d.h	/^    class Transformation2D$/;"	c	namespace:math
Transformation3D	math/transformation3d.h	/^        Transformation3D(const Matrix4x4& transformation_matrix, const Matrix4x4& inverse_transf/;"	f	class:math::Transformation3D
Transformation3D	math/transformation3d.h	/^    class Transformation3D$/;"	c	namespace:math
TransformerImplementation	primitives/transformer-primitive.cpp	/^        TransformerImplementation(const math::Transformation3D& transformer, Primitive transform/;"	f	class:__anonee3963ea0110::TransformerImplementation	file:
TransformerImplementation	primitives/transformer-primitive.cpp	/^    class TransformerImplementation : public raytracer::primitives::_private_::PrimitiveImplemen/;"	c	namespace:__anonee3963ea0110	file:
Try	chaiscript/language/chaiscript_common.hpp	/^                Inline_Range, Annotation, Try, Catch, Finally, Method, Attr_Decl, Shift, Equalit/;"	e	enum:chaiscript::AST_Node_Type::Type
Try	chaiscript/language/chaiscript_parser.hpp	/^      bool Try() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Try_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Try_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePtr>/;"	f	struct:chaiscript::eval::Try_AST_Node
Try_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Try_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Try_Cast	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        struct Try_Cast<>$/;"	s	namespace:chaiscript::dispatch::detail
Try_Cast	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        struct Try_Cast<Param, Rest...>$/;"	s	namespace:chaiscript::dispatch::detail
Type	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	g	class:chaiscript::AST_Node_Type
Type	chaiscript/utility/json.hpp	/^        Class Type;$/;"	m	class:json::JSON	typeref:typename:Class
Type_Conversion	chaiscript/dispatchkit/type_conversions.hpp	/^  typedef std::shared_ptr<chaiscript::detail::Type_Conversion_Base> Type_Conversion;$/;"	t	namespace:chaiscript	typeref:typename:std::shared_ptr<chaiscript::detail::Type_Conversion_Base>
Type_Conversion_Base	chaiscript/dispatchkit/type_conversions.hpp	/^        Type_Conversion_Base(const Type_Info &t_to, const Type_Info &t_from)$/;"	f	class:chaiscript::detail::Type_Conversion_Base
Type_Conversion_Base	chaiscript/dispatchkit/type_conversions.hpp	/^    class Type_Conversion_Base$/;"	c	namespace:chaiscript::detail
Type_Conversion_Impl	chaiscript/dispatchkit/type_conversions.hpp	/^        Type_Conversion_Impl(Type_Info t_from, Type_Info t_to, Callable t_func)$/;"	f	class:chaiscript::detail::Type_Conversion_Impl
Type_Conversion_Impl	chaiscript/dispatchkit/type_conversions.hpp	/^    class Type_Conversion_Impl : public Type_Conversion_Base$/;"	c	namespace:chaiscript::detail
Type_Conversions	chaiscript/dispatchkit/type_conversions.hpp	/^      Type_Conversions()$/;"	f	class:chaiscript::Type_Conversions
Type_Conversions	chaiscript/dispatchkit/type_conversions.hpp	/^      Type_Conversions(const Type_Conversions &t_other)$/;"	f	class:chaiscript::Type_Conversions
Type_Conversions	chaiscript/dispatchkit/type_conversions.hpp	/^  class Type_Conversions$/;"	c	namespace:chaiscript
Type_Conversions_State	chaiscript/dispatchkit/type_conversions.hpp	/^      Type_Conversions_State(const Type_Conversions &t_conversions,$/;"	f	class:chaiscript::Type_Conversions_State
Type_Conversions_State	chaiscript/dispatchkit/type_conversions.hpp	/^  class Type_Conversions_State$/;"	c	namespace:chaiscript
Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR Type_Info()$/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR
Type_Info	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR Type_Info(bool t_is_const, bool t_is_reference, bool t_is_pointer, bo/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR
Type_Info	chaiscript/dispatchkit/type_info.hpp	/^  class Type_Info$/;"	c	namespace:chaiscript
Type_Info	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Type_Info$/;"	c	namespace:ChaiScript_Language
Type_Name_Map	chaiscript/dispatchkit/dispatchkit.hpp	/^        typedef std::map<std::string, chaiscript::Type_Info> Type_Name_Map;$/;"	t	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::map<std::string,chaiscript::Type_Info>
TypedConfigurations	easylogging++.h	/^    TypedConfigurations(Configurations* configurations, base::LogStreamsReferenceMap* logStreams/;"	f	class:el::base::TypedConfigurations
TypedConfigurations	easylogging++.h	/^    TypedConfigurations(const TypedConfigurations& other) {$/;"	f	class:el::base::TypedConfigurations
TypedConfigurations	easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	namespace:el::base
UNAME	Makefile	/^UNAME := $(shell uname -o)$/;"	m
UniformMaterial	materials/uniform-material.cpp	/^        UniformMaterial(const MaterialProperties& properties)$/;"	f	class:__anondea639030110::UniformMaterial	file:
UniformMaterial	materials/uniform-material.cpp	/^    class UniformMaterial : public raytracer::materials::_private_::MaterialImplementation$/;"	c	namespace:__anondea639030110	file:
Unknown	easylogging++.h	/^        Unknown = 1010$/;"	e	enum:el::Level
Unknown	easylogging++.h	/^    Unknown = 1010$/;"	e	enum:el::ConfigurationType
User	easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId/;"	e	enum:el::base::FormatFlags
VC_EXTRA_LEAN	chaiscript/language/chaiscript_engine.hpp	/^#define VC_EXTRA_LEAN$/;"	d
VRegistry	easylogging++.h	/^    explicit VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(l/;"	f	class:el::base::VRegistry
VRegistry	easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::base
Value	chaiscript/language/chaiscript_parser.hpp	/^      bool Value() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Value_Range	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
Value_Range	chaiscript/language/chaiscript_parser.hpp	/^      bool Value_Range() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Value_Range_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Value_Range_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_/;"	f	struct:chaiscript::eval::Value_Range_AST_Node
Value_Range_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Value_Range_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Var_Decl	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Var_Decl	chaiscript/language/chaiscript_parser.hpp	/^      bool Var_Decl(const bool t_class_context = false) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
Var_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        Var_Decl_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_Nod/;"	f	struct:chaiscript::eval::Var_Decl_AST_Node
Var_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct Var_Decl_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Variable	chaiscript/language/chaiscript_common.hpp	/^    enum Type { Error, Int, Float, Id, Char, Str, Eol, Fun_Call, Arg_List, Variable, Equation, V/;"	e	enum:chaiscript::AST_Node_Type::Type
Vector	chaiscript/language/chaiscript_prelude_docs.hpp	/^class Vector$/;"	c	namespace:ChaiScript_Language
Vector	math/vector.h	/^        Vector()$/;"	f	class:math::Vector
Vector	math/vector.h	/^        Vector(Ts... args)$/;"	f	class:math::Vector
Vector	math/vector.h	/^        Vector(std::array<double, N>&& coords)$/;"	f	class:math::Vector
Vector	math/vector.h	/^    class Vector : public _private_::DimensionSpecificMembers<N, Vector<N>>$/;"	c	namespace:math
Vector2D	math/vector.h	/^    using Vector2D = Vector<2>;$/;"	t	namespace:math	typeref:typename:Vector<2>
Vector3D	math/vector.h	/^    using Vector3D = Vector<3>;$/;"	t	namespace:math	typeref:typename:Vector<3>
Vector4D	math/vector.h	/^    using Vector4D = Vector<4>;$/;"	t	namespace:math	typeref:typename:Vector<4>
VectorFactories	scripting/math-module.cpp	/^    struct VectorFactories$/;"	s	namespace:__anon63c0fd550110	file:
VectorOutputHelper	math/vector.h	/^        struct VectorOutputHelper$/;"	s	namespace:math::_private_
VectorOutputHelper	math/vector.h	/^        struct VectorOutputHelper<0, N>$/;"	s	namespace:math::_private_
VectorOutputHelper	math/vector.h	/^        struct VectorOutputHelper<N, N>$/;"	s	namespace:math::_private_
Verbose	easylogging++.h	/^        Verbose = 64,$/;"	e	enum:el::Level
VerboseLevel	easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId/;"	e	enum:el::base::FormatFlags
VerboseLevel	easylogging++.h	/^typedef int VerboseLevel;$/;"	t	namespace:el::base::type	typeref:typename:int
VertResolution	imaging/bmp-format.cpp	/^        int32_t  VertResolution;  \/* Vertical resolution in pixels per meter *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:int32_t	file:
VertResolution	imaging/bmp-format.cpp	/^        int32_t  VertResolution;  \/* Vertical resolution in pixels per meter *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
VertResolution	imaging/bmp-format.cpp	/^        int32_t  VertResolution;  \/* Vertical resolution in pixels per meter *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Void_Type	chaiscript/dispatchkit/boxed_value.hpp	/^      struct Void_Type$/;"	s	class:chaiscript::Boxed_Value
WIF	imaging/wif-format.cpp	/^imaging::WIF::WIF(const std::string& path)$/;"	f	class:imaging::WIF
WIF	imaging/wif-format.h	/^    class WIF$/;"	c	namespace:imaging
WIN32_LEAN_AND_MEAN	chaiscript/language/chaiscript_engine.hpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d
Warning	easylogging++.h	/^        Warning = 32, $/;"	e	enum:el::Level
While	chaiscript/language/chaiscript_common.hpp	/^                Lambda, Block, Def, While, If, For, Inline_Array, Inline_Map, Return, File, Pref/;"	e	enum:chaiscript::AST_Node_Type::Type
While	chaiscript/language/chaiscript_parser.hpp	/^      bool While() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
While_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        While_AST_Node(std::string t_ast_node_text, Parse_Location t_loc, std::vector<AST_NodePt/;"	f	struct:chaiscript::eval::While_AST_Node
While_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^    struct While_AST_Node : public AST_Node {$/;"	s	namespace:chaiscript::eval
Width	imaging/bmp-format.cpp	/^        int32_t  Width;           \/* Image width in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V2	typeref:typename:int32_t	file:
Width	imaging/bmp-format.cpp	/^        int32_t  Width;           \/* Image width in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V3	typeref:typename:int32_t	file:
Width	imaging/bmp-format.cpp	/^        int32_t  Width;           \/* Image width in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V4	typeref:typename:int32_t	file:
Width	imaging/bmp-format.cpp	/^        int32_t  Width;           \/* Image width in pixels *\/$/;"	m	struct:__anon5b9926d60110::BITMAP_HEADER_V5	typeref:typename:int32_t	file:
Wif	pipeline/wif-consumer.cpp	/^        Wif(const std::string& path)$/;"	f	class:__anon4cc5e2fa0110::Wif	file:
Wif	pipeline/wif-consumer.cpp	/^    class Wif : public Consumer<std::shared_ptr<imaging::Bitmap>>$/;"	c	namespace:__anon4cc5e2fa0110	file:
WifProcessor	pipeline/wif-processor.cpp	/^        WifProcessor()$/;"	f	class:__anon3a087a4e0110::WifProcessor	file:
WifProcessor	pipeline/wif-processor.cpp	/^    class WifProcessor : public Processor<std::shared_ptr<imaging::Bitmap>, std::shared_ptr<std:/;"	c	namespace:__anon3a087a4e0110	file:
Wrapper	scripting/pipeline-module.cpp	/^        Wrapper(std::shared_ptr<Pipeline> wrapped)$/;"	f	struct:__anona6a8c5210110::Wrapper	file:
Wrapper	scripting/pipeline-module.cpp	/^    struct Wrapper$/;"	s	namespace:__anona6a8c5210110	file:
XYZ	tests/cameras/camera-transformation-tests.cpp	/^#define XYZ(/;"	d	file:
__anon07629d720102	imaging/color-mapper.cpp	/^    {$/;"	f	function:imaging::color_mapping::grayscale	typeref:typename:Color	file:
__anon08466b710110	chaiscript/utility/json.hpp	/^namespace {$/;"	n	namespace:json
__anon08466b710210	chaiscript/utility/json.hpp	/^namespace {$/;"	n	namespace:json
__anon08e8fc9a0110	primitives/decorator-primitive.cpp	/^{$/;"	n	file:
__anon0a6020fa0102	math/functions/bool-mapper.h	/^            {$/;"	f	function:math::functions::bool_mapper	file:
__anon0af6c0d60110	scripting/lights-module.cpp	/^{$/;"	n	file:
__anon0f0b81020102	demos/demo.cpp	/^    std::function<std::shared_ptr<Scene>(TimeStamp)> lambda = [this](TimeStamp now) {$/;"	f	function:demos::Demo::create_scene_animation	file:
__anon103f23280110	pipeline/animation-processor.cpp	/^{$/;"	n	file:
__anon10e0153d0110	imaging/wif-format.cpp	/^{$/;"	n	file:
__anon13f113d70110	materials/composition-material.cpp	/^{$/;"	n	file:
__anon140c3c520110	scripting/samplers-module.cpp	/^{$/;"	n	file:
__anon163539310102	imaging/bitmap-function.cpp	/^    std::function<Color(const Point2D&)> lambda = [bitmap](const Point2D& p) -> Color {$/;"	f	function:imaging::bitmap_function	typeref:typename:Color	file:
__anon164d2f810102	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	f	file:
__anon16ec2c960110	math/angle.cpp	/^{$/;"	n	file:
__anon179d3a7d0102	chaiscript/language/chaiscript_parser.hpp	/^        Parse_Location filepos = [&]()->Parse_Location{ $/;"	f	function:chaiscript::parser::ChaiScript_Parser::build_match	typeref:typename:Parse_Location	file:
__anon179d3a7d0202	chaiscript/language/chaiscript_parser.hpp	/^                [&]()->std::string{$/;"	f	function:chaiscript::parser::ChaiScript_Parser::Id	typeref:typename:std::string	file:
__anon179d3a7d0302	chaiscript/language/chaiscript_parser.hpp	/^            bool is_interpolated = [&]()->bool {$/;"	f	function:chaiscript::parser::ChaiScript_Parser::Quoted_String	typeref:typename:bool	file:
__anon179d3a7d0402	chaiscript/language/chaiscript_parser.hpp	/^            [t_s](const std::vector<std::string> &opers) {$/;"	f	function:chaiscript::parser::ChaiScript_Parser::is_operator	file:
__anon179d3a7d0502	chaiscript/language/chaiscript_parser.hpp	/^                [t_s](const std::string &s) {$/;"	f	function:chaiscript::parser::ChaiScript_Parser::is_operator::__anon179d3a7d0402	file:
__anon189cf0c00102	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	f	file:
__anon1dcf28ab0102	chaiscript/dispatchkit/bootstrap_stl.hpp	/^                [](ContainerType &c, int index) -> typename ContainerType::reference {$/;"	f	function:chaiscript::bootstrap::standard_library::random_access_container_type	typeref:typename:ContainerType::reference	file:
__anon1dcf28ab0202	chaiscript/dispatchkit/bootstrap_stl.hpp	/^                [](const ContainerType &c, int index) -> typename ContainerType::const_reference/;"	f	function:chaiscript::bootstrap::standard_library::random_access_container_type	typeref:typename:ContainerType::const_reference	file:
__anon1dcf28ab0302	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const ContainerType *a) { return a->size(); } ), "size");$/;"	f	function:chaiscript::bootstrap::standard_library::container_type	file:
__anon1dcf28ab0402	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const ContainerType *a) { return a->empty(); } ), "empty");$/;"	f	function:chaiscript::bootstrap::standard_library::container_type	file:
__anon1dcf28ab0502	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](ContainerType *a) { a->clear(); } ), "clear");$/;"	f	function:chaiscript::bootstrap::standard_library::container_type	file:
__anon1dcf28ab0602	chaiscript/dispatchkit/bootstrap_stl.hpp	/^              []()->std::string{$/;"	f	function:chaiscript::bootstrap::standard_library::sequence_type	typeref:typename:std::string	file:
__anon1dcf28ab0702	chaiscript/dispatchkit/bootstrap_stl.hpp	/^              [&]()->std::string{$/;"	f	function:chaiscript::bootstrap::standard_library::back_insertion_sequence_type	typeref:typename:std::string	file:
__anon1dcf28ab0802	chaiscript/dispatchkit/bootstrap_stl.hpp	/^              [&]()->std::string{$/;"	f	function:chaiscript::bootstrap::standard_library::front_insertion_sequence_type	typeref:typename:std::string	file:
__anon1dcf28ab0902	chaiscript/dispatchkit/bootstrap_stl.hpp	/^              []()->std::string{$/;"	f	function:chaiscript::bootstrap::standard_library::unique_associative_container_type	typeref:typename:std::string	file:
__anon1dcf28ab0a02	chaiscript/dispatchkit/bootstrap_stl.hpp	/^              []()->std::string{$/;"	f	function:chaiscript::bootstrap::standard_library::string_type	typeref:typename:std::string	file:
__anon1dcf28ab0b02	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, const String &f, size_t pos) { return s->find(f, pos); /;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab0c02	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, const String &f, size_t pos) { return s->rfind(f, pos);/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab0d02	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, const String &f, size_t pos) { return s->find_first_of(/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab0e02	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, const String &f, size_t pos) { return s->find_last_of(f/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab0f02	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, const String &f, size_t pos) { return s->find_last_not_/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1002	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, const String &f, size_t pos) { return s->find_first_not/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1102	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](String *s) { s->clear(); } ), "clear");$/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1202	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s) { return s->empty(); } ), "empty");$/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1302	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s) { return s->size(); } ), "size");$/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1402	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s) { return s->c_str(); } ), "c_str");$/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1502	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s) { return s->data(); } ), "data");$/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1602	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const String *s, size_t pos, size_t len) { return s->substr(pos, len); }/;"	f	function:chaiscript::bootstrap::standard_library::string_type	file:
__anon1dcf28ab1702	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          m->add(fun([](const FutureType &t) { return t.valid(); }), "valid");$/;"	f	function:chaiscript::bootstrap::standard_library::future_type	file:
__anon203de67a0102	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return f(ts...) + constant; }/;"	f	function:math::operator +	file:
__anon203de67a0202	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return constant + f(ts...); }/;"	f	function:math::operator +	file:
__anon203de67a0302	math/function.h	/^        std::function<R(Ts...)> lambda = [f, g](Ts... ts) { return f(ts...) + g(ts...); };$/;"	f	function:math::operator +	file:
__anon203de67a0402	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return f(ts...) - constant; }/;"	f	function:math::operator -	file:
__anon203de67a0502	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return constant - f(ts...); }/;"	f	function:math::operator -	file:
__anon203de67a0602	math/function.h	/^        std::function<R(Ts...)> lambda = [f, g](Ts... ts) { return f(ts...) - g(ts...); };$/;"	f	function:math::operator -	file:
__anon203de67a0702	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return f(ts...) * constant; }/;"	f	function:math::operator *	file:
__anon203de67a0802	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return constant * f(ts...); }/;"	f	function:math::operator *	file:
__anon203de67a0902	math/function.h	/^        std::function<R(Ts...)> lambda = [f, g](Ts... ts) { return f(ts...) * g(ts...); };$/;"	f	function:math::operator *	file:
__anon203de67a0a02	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return f(ts...) \/ constant; /;"	f	function:math::operator /	file:
__anon203de67a0b02	math/function.h	/^        std::function<R(Ts...)> lambda = [f, constant](Ts... ts) { return constant \/ f(ts...); /;"	f	function:math::operator /	file:
__anon203de67a0c02	math/function.h	/^        std::function<R(Ts...)> lambda = [f, g](Ts... ts) { return f(ts...) \/ g(ts...); };$/;"	f	function:math::operator /	file:
__anon203de67a0d02	math/function.h	/^        std::function<R(Ts...)> lambda = [f, g](Ts... ts) { return f(ts...) && g(ts...); };$/;"	f	function:math::operator &&	file:
__anon203de67a0e02	math/function.h	/^        std::function<R(Ts...)> lambda = [f, g](Ts... ts) { return f(ts...) || g(ts...); };$/;"	f	function:math::operator ||	file:
__anon22e967e70110	primitives/plane-primitive.cpp	/^{$/;"	n	file:
__anon2af506bf0110	pipeline/renderer-processor.cpp	/^{$/;"	n	file:
__anon2c2de5d30102	chaiscript/dispatchkit/dispatchkit.hpp	/^        return std::any_of(m_funcs.begin(), m_funcs.end(), [&](const std::pair<Proxy_Function, s/;"	f	function:chaiscript::Module::has_function	file:
__anon2c2de5d30202	chaiscript/dispatchkit/dispatchkit.hpp	/^              {$/;"	f	function:chaiscript::Module::apply	file:
__anon2c2de5d30302	chaiscript/dispatchkit/dispatchkit.hpp	/^                             [&vals, &t_conversions](const Proxy_Function &f){ return f->call_ma/;"	f	function:chaiscript::detail::Dispatch_Function::call_match	file:
__anon2c2de5d30402	chaiscript/dispatchkit/dispatchkit.hpp	/^                [&](const std::pair<std::string, Boxed_Value> &o) {$/;"	f	function:chaiscript::detail::Dispatch_Engine::add	file:
__anon2c2de5d30502	chaiscript/dispatchkit/dispatchkit.hpp	/^              [&](const std::pair<std::string, Boxed_Value> &o) {$/;"	f	function:chaiscript::detail::Dispatch_Engine::add_object	file:
__anon2c2de5d30602	chaiscript/dispatchkit/dispatchkit.hpp	/^            {$/;"	f	function:chaiscript::detail::Dispatch_Engine::call_member	typeref:typename:Boxed_Value	file:
__anon2c2de5d30702	chaiscript/dispatchkit/dispatchkit.hpp	/^            const auto functions = [&]()->std::vector<Proxy_Function> {$/;"	f	function:chaiscript::detail::Dispatch_Engine::call_member	typeref:typename:std::vector<Proxy_Function>	file:
__anon2c2de5d30802	chaiscript/dispatchkit/dispatchkit.hpp	/^            const bool is_no_param = [&]()->bool{$/;"	f	function:chaiscript::detail::Dispatch_Engine::call_member	typeref:typename:bool	file:
__anon2c2de5d30902	chaiscript/dispatchkit/dispatchkit.hpp	/^                [&t_key](const typename Container::value_type &o) {$/;"	f	function:chaiscript::detail::Dispatch_Engine::find_keyed_value	file:
__anon2c2de5d30a02	chaiscript/dispatchkit/dispatchkit.hpp	/^                [&t_key](const typename Container::value_type &o) {$/;"	f	function:chaiscript::detail::Dispatch_Engine::find_keyed_value	file:
__anon2c2de5d30b02	chaiscript/dispatchkit/dispatchkit.hpp	/^            [&]() -> Proxy_Function {$/;"	f	function:chaiscript::detail::Dispatch_Engine::add_function	typeref:typename:Proxy_Function	file:
__anon322c74260102	math/functions/identity.h	/^            std::function<R(R)> lambda = [](R x) { return x; };$/;"	f	function:math::functions::identity	file:
__anon324c0a430110	pipeline/text-writer-consumer.cpp	/^{$/;"	n	file:
__anon3a087a4e0110	pipeline/wif-processor.cpp	/^{$/;"	n	file:
__anon3bd80ed70110	app.cpp	/^{$/;"	n	file:
__anon3da1cd780102	chaiscript/language/chaiscript_eval.hpp	/^        const Boxed_Value *thisobj = [&]() -> const Boxed_Value *{$/;"	f	function:chaiscript::eval::detail::eval_function	typeref:typename:const Boxed_Value *	file:
__anon3da1cd780202	chaiscript/language/chaiscript_eval.hpp	/^            [&]()->const std::string &{$/;"	f	function:chaiscript::eval::Global_Decl_AST_Node::eval_internal	typeref:typename:const std::string &	file:
__anon3da1cd780302	chaiscript/language/chaiscript_eval.hpp	/^          const auto captures = [&]()->std::map<std::string, Boxed_Value>{$/;"	f	function:chaiscript::eval::Lambda_AST_Node::eval_internal	typeref:typename:std::map<std::string,Boxed_Value>	file:
__anon3da1cd780402	chaiscript/language/chaiscript_eval.hpp	/^                  {$/;"	f	function:chaiscript::eval::Lambda_AST_Node::eval_internal	file:
__anon3da1cd780502	chaiscript/language/chaiscript_eval.hpp	/^                {$/;"	f	function:chaiscript::eval::Def_AST_Node::eval_internal	file:
__anon3da1cd780602	chaiscript/language/chaiscript_eval.hpp	/^                  {$/;"	f	function:chaiscript::eval::Def_AST_Node::eval_internal	file:
__anon3da1cd780702	chaiscript/language/chaiscript_eval.hpp	/^                [engine, t_param_names, guardnode](const std::vector<Boxed_Value> &t_params) {$/;"	f	function:chaiscript::eval::Method_AST_Node::eval_internal	file:
__anon3da1cd780802	chaiscript/language/chaiscript_eval.hpp	/^                        [engine, t_param_names, node](const std::vector<Boxed_Value> &t_params) /;"	f	function:chaiscript::eval::Method_AST_Node::eval_internal	file:
__anon3da1cd780902	chaiscript/language/chaiscript_eval.hpp	/^                      [engine, t_param_names, node](const std::vector<Boxed_Value> &t_params) {$/;"	f	function:chaiscript::eval::Method_AST_Node::eval_internal	file:
__anon3da1cd780a02	chaiscript/language/chaiscript_eval.hpp	/^                     fun([attr_name](dispatch::Dynamic_Object &t_obj) {$/;"	f	function:chaiscript::eval::Attr_Decl_AST_Node::eval_internal	file:
__anon4281053f0102	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	f	file:
__anon47a4741f0102	chaiscript/dispatchkit/bind_first.hpp	/^            [f, o](Param...param) -> Ret {$/;"	f	function:chaiscript::detail::bind_first	typeref:typename:Ret	file:
__anon47a4741f0202	chaiscript/dispatchkit/bind_first.hpp	/^            [f, o](Param...param) -> Ret {$/;"	f	function:chaiscript::detail::bind_first	typeref:typename:Ret	file:
__anon47a4741f0302	chaiscript/dispatchkit/bind_first.hpp	/^            [f, o](Param...param) -> Ret {$/;"	f	function:chaiscript::detail::bind_first	typeref:typename:Ret	file:
__anon47a4741f0402	chaiscript/dispatchkit/bind_first.hpp	/^            [f, o](Param...param) -> Ret {$/;"	f	function:chaiscript::detail::bind_first	typeref:typename:Ret	file:
__anon48deb1650102	animation/animation.cpp	/^    std::function<double(TimeStamp)> lambda = [position_interval, time_interval](TimeStamp now) /;"	f	function:animation::basic	typeref:typename:double	file:
__anon499048840102	command-line-parser.cpp	/^    std::function<void(std::list<std::string>&)> wrapper = [processor](std::list<std::string>& a/;"	f	function:CommandLineParser::register_processor	typeref:typename:void	file:
__anon499048840202	command-line-parser.cpp	/^    std::function<void(std::list<std::string>&)> wrapper = [prefix, processor](std::list<std::st/;"	f	function:CommandLineParser::register_processor	typeref:typename:void	file:
__anon4a1301bb0102	data-structures/grid.h	/^            : Grid(width, height, [&initial_value](const Position2D&) { return initial_value; })$/;"	f	class:data::Grid	file:
__anon4a1301bb0202	data-structures/grid.h	/^            : Grid(grid.width(), grid.height(), [&grid](const Position2D& p) { return grid[p]; }/;"	f	class:data::Grid	file:
__anon4b29ef260102	renderers/renderer.cpp	/^    auto tasks = tasks::range<unsigned>(0, m_vertical_size, [this, callback](unsigned y) {$/;"	f	function:raytracer::renderers::_private_::RendererImplementation::for_each_pixel	file:
__anon4cc5e2fa0110	pipeline/wif-consumer.cpp	/^{$/;"	n	file:
__anon4ee1be940102	math/functions/horizontal-lines-pattern.cpp	/^    {$/;"	f	function:math::functions::horizontal_lines	file:
__anon4ff1f30d0110	lights/omnidirectional-point-light.cpp	/^{$/;"	n	file:
__anon5226e87e0110	primitives/sphere-primitive.cpp	/^{$/;"	n	file:
__anon573013f50102	chaiscript/dispatchkit/proxy_functions.hpp	/^                               [&](const Boxed_Value &bv, const Type_Info &ti) {$/;"	f	function:chaiscript::dispatch::detail::types_match_except_for_arithmetic	file:
__anon573013f50202	chaiscript/dispatchkit/proxy_functions.hpp	/^                         [](const Type_Info &ti, const Boxed_Value &param) -> Boxed_Value {$/;"	f	function:chaiscript::dispatch::detail::dispatch_with_conversions	typeref:typename:Boxed_Value	file:
__anon58b4d3150102	chaiscript/dispatchkit/type_conversions.hpp	/^                      [&]()->std::shared_ptr<const To>{$/;"	f	function:chaiscript::detail::Static_Caster::cast	typeref:typename:std::shared_ptr<const To>	file:
__anon58b4d3150202	chaiscript/dispatchkit/type_conversions.hpp	/^                      [&]()->std::shared_ptr<To>{$/;"	f	function:chaiscript::detail::Static_Caster::cast	typeref:typename:std::shared_ptr<To>	file:
__anon58b4d3150302	chaiscript/dispatchkit/type_conversions.hpp	/^                      [&]()->std::shared_ptr<const To>{$/;"	f	function:chaiscript::detail::Dynamic_Caster::cast	typeref:typename:std::shared_ptr<const To>	file:
__anon58b4d3150402	chaiscript/dispatchkit/type_conversions.hpp	/^                      [&]()->std::shared_ptr<To>{$/;"	f	function:chaiscript::detail::Dynamic_Caster::cast	typeref:typename:std::shared_ptr<To>	file:
__anon58b4d3150502	chaiscript/dispatchkit/type_conversions.hpp	/^              {$/;"	f	function:chaiscript::Type_Conversions::find_bidir	typeref:typename:bool	file:
__anon58b4d3150602	chaiscript/dispatchkit/type_conversions.hpp	/^              {$/;"	f	function:chaiscript::Type_Conversions::find	file:
__anon58b4d3150702	chaiscript/dispatchkit/type_conversions.hpp	/^      auto func = [t_function](const Boxed_Value &t_bv) -> Boxed_Value {$/;"	f	function:chaiscript::type_conversion	typeref:typename:Boxed_Value	file:
__anon58b4d3150802	chaiscript/dispatchkit/type_conversions.hpp	/^      auto func = [](const Boxed_Value &t_bv) -> Boxed_Value {$/;"	f	function:chaiscript::type_conversion	typeref:typename:Boxed_Value	file:
__anon58b4d3150902	chaiscript/dispatchkit/type_conversions.hpp	/^      auto func = [](const Boxed_Value &t_bv) -> Boxed_Value {$/;"	f	function:chaiscript::vector_conversion	typeref:typename:Boxed_Value	file:
__anon58b4d3150a02	chaiscript/dispatchkit/type_conversions.hpp	/^      auto func = [](const Boxed_Value &t_bv) -> Boxed_Value {$/;"	f	function:chaiscript::map_conversion	typeref:typename:Boxed_Value	file:
__anon5b9926d60110	imaging/bmp-format.cpp	/^{$/;"	n	file:
__anon5cc3ace70110	tests/animation/animation-tests.cpp	/^{$/;"	n	file:
__anon5d69ef8a0102	cameras/camera.cpp	/^    {$/;"	f	function:raytracer::cameras::_private_::CameraImplementation::enumerate_rays	file:
__anon5f59be3f0110	scripting/raytracing-module.cpp	/^{$/;"	n	file:
__anon61ccc6c40110	renderers/standard-renderer.cpp	/^{$/;"	n	file:
__anon61ccc6c40202	renderers/standard-renderer.cpp	/^            for_each_pixel([&](Position2D pixel_coordinates) {$/;"	f	function:__anon61ccc6c40110::StandardRenderer::render	file:
__anon61ccc6c40302	renderers/standard-renderer.cpp	/^            m_sampler->sample(pixel_rectangle, [this, &c, &sample_count, &scene](const Point2D& /;"	f	function:__anon61ccc6c40110::StandardRenderer::render_pixel	file:
__anon61ccc6c40402	renderers/standard-renderer.cpp	/^                scene.camera->enumerate_rays(sample_position, [this, &c, &sample_count, &scene](/;"	f	function:__anon61ccc6c40110::StandardRenderer::render_pixel::__anon61ccc6c40302	file:
__anon62a9861b0102	chaiscript/chaiscript_defines.hpp	/^      const auto final_value = [](const T val, const T baseval, const bool hasexp, const bool ne/;"	f	function:chaiscript::parse_num	typeref:typename:T	file:
__anon63c0fd550110	scripting/math-module.cpp	/^{$/;"	n	file:
__anon63c0fd550202	scripting/math-module.cpp	/^        module.add(fun([](const Vector2D& u, const Vector2D& v) { return u + v; }), "+");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550302	scripting/math-module.cpp	/^        module.add(fun([](const Point2D& p, const Vector2D& v) { return p + v; }), "+");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550402	scripting/math-module.cpp	/^        module.add(fun([](const Vector2D& u, const Point2D& p) { return u + p; }), "+");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550502	scripting/math-module.cpp	/^        module.add(fun([](const Vector2D& u, const Vector2D& v) { return u - v; }), "-");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550602	scripting/math-module.cpp	/^        module.add(fun([](const Point2D& p, const Vector2D& v) { return p - v; }), "-");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550702	scripting/math-module.cpp	/^        module.add(fun([](const Point2D& p, const Point2D& q) { return p - q; }), "-");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550802	scripting/math-module.cpp	/^        module.add(fun([](const Vector3D& u, const Vector3D& v) { return u + v; }), "+");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550902	scripting/math-module.cpp	/^        module.add(fun([](const Point3D& p, const Vector3D& v) { return p + v; }), "+");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550a02	scripting/math-module.cpp	/^        module.add(fun([](const Vector3D& u, const Point3D& p) { return u + p; }), "+");        $/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550b02	scripting/math-module.cpp	/^        module.add(fun([](const Vector3D& u, const Vector3D& v) { return u - v; }), "-");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550c02	scripting/math-module.cpp	/^        module.add(fun([](const Point3D& p, const Vector3D& v) { return p - v; }), "-");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550d02	scripting/math-module.cpp	/^        module.add(fun([](const Point3D& p, const Point3D& q) { return p - q; }), "-");$/;"	f	function:__anon63c0fd550110::add_points_and_vectors	file:
__anon63c0fd550e02	scripting/math-module.cpp	/^        module.add(fun([](const Point2D& p, const Point2D& q) -> double { return math::distance(/;"	f	function:__anon63c0fd550110::add_points_and_vectors	typeref:typename:double	file:
__anon63c0fd550f02	scripting/math-module.cpp	/^        module.add(fun([](const Point3D& p, const Point3D& q) -> double { return math::distance(/;"	f	function:__anon63c0fd550110::add_points_and_vectors	typeref:typename:double	file:
__anon63c0fd551002	scripting/math-module.cpp	/^        module.add(fun([](double x) { return Angle::degrees(x); }), "degrees");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551102	scripting/math-module.cpp	/^        module.add(fun([](double x) { return Angle::radians(x); }), "radians");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551202	scripting/math-module.cpp	/^        module.add(fun([](Angle a, Angle b) { return a + b; }), "+");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551302	scripting/math-module.cpp	/^        module.add(fun([](Angle a, Angle b) { return a - b; }), "-");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551402	scripting/math-module.cpp	/^        module.add(fun([](Angle a) { return -a; }), "-");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551502	scripting/math-module.cpp	/^        module.add(fun([](Angle a, double constant) { return a * constant; }), "*");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551602	scripting/math-module.cpp	/^        module.add(fun([](double constant, Angle a) { return constant * a; }), "*");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551702	scripting/math-module.cpp	/^        module.add(fun([](Angle a, double constant) { return a \/ constant; }), "\/");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551802	scripting/math-module.cpp	/^        module.add(fun([](Angle a, Angle b) { return a - b; }), "-");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551902	scripting/math-module.cpp	/^        module.add(fun([](Angle a) { return sin(a); }), "sin");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63c0fd551a02	scripting/math-module.cpp	/^        module.add(fun([](Angle a) { return cos(a); }), "cos");$/;"	f	function:__anon63c0fd550110::add_angle	file:
__anon63dcdf0d0110	pipeline/base64-processor.cpp	/^{$/;"	n	file:
__anon664227aa0102	chaiscript/utility/json_wrap.hpp	/^        m->add(chaiscript::fun([](const std::string &t_str) { return from_json(t_str); }), "from/;"	f	function:chaiscript::json_wrap::library	file:
__anon693efb200102	samplers/sampler.cpp	/^    this->sample(rectangle, [&result](const Point2D& p) {$/;"	f	function:raytracer::samplers::_private_::SamplerImplementation::sample	file:
__anon71c9df9c0102	chaiscript/dispatchkit/function_call.hpp	/^            [](const Const_Proxy_Function &f) {$/;"	f	function:chaiscript::dispatch::functor	file:
__anon73cd7d280110	util/base64.cpp	/^{$/;"	n	file:
__anon7420feb00110	tests/cameras/camera-transformation-tests.cpp	/^{$/;"	n	file:
__anon7b7e3c1b0102	scripting/scripting-util.h	/^                std::transform(boxed_values.begin(), boxed_values.end(), unboxed_values.begin(),/;"	f	function:raytracer::scripting::util::cast_vector_elements	file:
__anon7b7e3c1b0202	scripting/scripting-util.h	/^                module.add(chaiscript::fun([](const T& value) -> std::string {$/;"	f	function:raytracer::scripting::util::register_to_string	typeref:typename:std::string	file:
__anon7b7e3c1b0302	scripting/scripting-util.h	/^                module.add(chaiscript::fun([](T& x, const T& y) { return x = y; }), "=");$/;"	f	function:raytracer::scripting::util::register_assignment	file:
__anon863ee99e0102	imaging/bitmap.cpp	/^    for_each_position([this, &Color](const Position2D& p) {$/;"	f	function:imaging::Bitmap::clear	file:
__anon863ee99e0202	imaging/bitmap.cpp	/^    for_each_position([this, &bitmap](const Position2D& p) {$/;"	f	function:imaging::Bitmap::operator +=	file:
__anon863ee99e0302	imaging/bitmap.cpp	/^    for_each_position([this, &bitmap](const Position2D& p) {$/;"	f	function:imaging::Bitmap::operator -=	file:
__anon863ee99e0402	imaging/bitmap.cpp	/^    for_each_position([this, constant](const Position2D& p) {$/;"	f	function:imaging::Bitmap::operator *=	file:
__anon863ee99e0502	imaging/bitmap.cpp	/^    for_each_position([this](const Position2D& position) {$/;"	f	function:imaging::Bitmap::invert	file:
__anon895a3d4a0102	animation/animation.h	/^            std::function<T(TimeStamp)> lambda = [](TimeStamp) -> T {$/;"	f	function:animation::Animation::empty	typeref:typename:T	file:
__anon895a3d4a0202	animation/animation.h	/^        std::function<TimeStamp(double)> lambda = [](double seconds) -> TimeStamp {$/;"	f	function:animation::seconds_to_timestamp	typeref:typename:TimeStamp	file:
__anon895a3d4a0302	animation/animation.h	/^        std::function<double(TimeStamp)> lambda = [](TimeStamp ts) -> double {$/;"	f	function:animation::timestamp_to_seconds	typeref:typename:double	file:
__anon8da31e7c0102	animation/interval-animation.h	/^        std::function<T(TimeStamp)> lambda = [double_animation, animation_interval](TimeStamp no/;"	f	function:animation::animate	typeref:typename:T	file:
__anon9407dd500102	cameras/displaceable-camera.cpp	/^    enumerate_untransformed_rays(p, [this, &callback](const Ray& untransformed_ray) {$/;"	f	function:raytracer::cameras::_private_::DisplaceableCamera::enumerate_rays	file:
__anon983fa7a00110	imaging/color.cpp	/^{$/;"	n	file:
__anon99214b2f0110	samplers/single-sampler.cpp	/^{$/;"	n	file:
__anona5945eab0110	scripting/animation-module.cpp	/^{$/;"	n	file:
__anona5945eab0202	scripting/animation-module.cpp	/^    module->add(fun([](TimeStamp t, Duration d) { return t + d; }), "+");$/;"	f	function:raytracer::scripting::_private_::create_animation_module	file:
__anona5945eab0302	scripting/animation-module.cpp	/^    module->add(fun([](Duration d, TimeStamp t) { return t + d; }), "+");$/;"	f	function:raytracer::scripting::_private_::create_animation_module	file:
__anona6a8c5210110	scripting/pipeline-module.cpp	/^{$/;"	n	file:
__anona6a8c5210202	scripting/pipeline-module.cpp	/^            std::transform(pipeline_segments.begin(), pipeline_segments.end(), wrappers.begin(),/;"	f	function:__anona6a8c5210110::pipeline_builder	file:
__anonab32e9cb0102	chaiscript/utility/utility.hpp	/^        t_module.add([](){$/;"	f	function:chaiscript::utility::add_class	file:
__anonab32e9cb0202	chaiscript/utility/utility.hpp	/^        t_module.add(chaiscript::fun([](const Enum &e, const int &i) { return e == i; }), "==");$/;"	f	function:chaiscript::utility::add_class	file:
__anonab32e9cb0302	chaiscript/utility/utility.hpp	/^        t_module.add(chaiscript::fun([](const int &i, const Enum &e) { return i == e; }), "==");$/;"	f	function:chaiscript::utility::add_class	file:
__anonab32e9cb0402	chaiscript/utility/utility.hpp	/^        t_module.add(chaiscript::fun([](const Enum &e, const typename std::underlying_type<Enum>/;"	f	function:chaiscript::utility::add_class	file:
__anonab32e9cb0502	chaiscript/utility/utility.hpp	/^        t_module.add(chaiscript::fun([](const typename std::underlying_type<Enum>::type &i, cons/;"	f	function:chaiscript::utility::add_class	file:
__anonb0a0544f0102	math/functions/easing/linear-easing-function.cpp	/^    std::function<double(double)> lambda = [](double t) {$/;"	f	function:math::functions::easing::linear	file:
__anonb2364c610102	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	f	file:
__anonb790ac470110	scripting/imaging-module.cpp	/^{$/;"	n	file:
__anonb790ac470202	scripting/imaging-module.cpp	/^    module->add(fun([](const Color& c1, const Color& c2) {$/;"	f	function:raytracer::scripting::_private_::create_imaging_module	file:
__anonb790ac470302	scripting/imaging-module.cpp	/^    module->add(fun([](const Color& c1, const Color& c2) {$/;"	f	function:raytracer::scripting::_private_::create_imaging_module	file:
__anonb790ac470402	scripting/imaging-module.cpp	/^    module->add(fun([](const Color& c, double f) {$/;"	f	function:raytracer::scripting::_private_::create_imaging_module	file:
__anonb790ac470502	scripting/imaging-module.cpp	/^    module->add(fun([](double f, const Color& c) {$/;"	f	function:raytracer::scripting::_private_::create_imaging_module	file:
__anonb790ac470602	scripting/imaging-module.cpp	/^    module->add(fun([](const Color& c, double f) {$/;"	f	function:raytracer::scripting::_private_::create_imaging_module	file:
__anonbd85b8490110	scripting/rendering-module.cpp	/^{$/;"	n	file:
__anonc0f365060102	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](){ m_engine.dump_system(); }), "dump_system");$/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060202	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Boxed_Value &t_bv){ m_engine.dump_object(t_bv); }), "dump_ob/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060302	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Boxed_Value &t_bv, const std::string &t_type){ return m_engi/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060402	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Boxed_Value &t_bv){ return m_engine.type_name(t_bv); }), "ty/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060502	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_f){ return m_engine.function_exists(t_f); }),/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060602	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](){ return m_engine.get_function_objects(); }), "get_functions");$/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060702	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](){ return m_engine.get_scripting_objects(); }), "get_objects");$/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060802	chaiscript/language/chaiscript_engine.hpp	/^              [this](const std::vector<Boxed_Value> &t_params) {$/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060902	chaiscript/language/chaiscript_engine.hpp	/^            [=](const dispatch::Proxy_Function_Base &t_fun, const std::vector<Boxed_Value> &t_pa/;"	f	function:chaiscript::ChaiScript::build_eval_system	typeref:typename:Boxed_Value	file:
__anonc0f365060a02	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Type_Info &t_ti){ return m_engine.get_type_name(t_ti); }), "/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060b02	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_type_name, bool t_throw){ return m_engine.get/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060c02	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_type_name){ return m_engine.get_type(t_type_n/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060d02	chaiscript/language/chaiscript_engine.hpp	/^            [=](const Type_Info &t_from, const Type_Info &t_to, const std::function<Boxed_Value /;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060e02	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_module, const std::string &t_file){ return lo/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365060f02	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_module){ return load_module(t_module); }), "l/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061002	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_file){ return use(t_file); }), "use");$/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061102	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_file){ return internal_eval_file(t_file); }),/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061202	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const std::string &t_str){ return internal_eval(t_str); }), "eval"/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061302	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const AST_NodePtr &t_ast){ return eval(t_ast); }), "eval");$/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061402	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Boxed_Value &t_bv, const std::string &t_name){ add_global_co/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061502	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Boxed_Value &t_bv, const std::string &t_name){ add_global(t_/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc0f365061602	chaiscript/language/chaiscript_engine.hpp	/^      m_engine.add(fun([this](const Boxed_Value &t_bv, const std::string &t_name){ set_global(t_/;"	f	function:chaiscript::ChaiScript::build_eval_system	file:
__anonc5d265990102	chaiscript/dispatchkit/bootstrap.hpp	/^              [extent](T& t, size_t index)->ReturnType &{$/;"	f	function:chaiscript::bootstrap::array	typeref:typename:ReturnType &	file:
__anonc5d265990202	chaiscript/dispatchkit/bootstrap.hpp	/^              [extent](const T &t, size_t index)->const ReturnType &{$/;"	f	function:chaiscript::bootstrap::array	typeref:typename:const ReturnType &	file:
__anonc5d265990302	chaiscript/dispatchkit/bootstrap.hpp	/^              [extent](const T &) {$/;"	f	function:chaiscript::bootstrap::array	file:
__anonc5d265990402	chaiscript/dispatchkit/bootstrap.hpp	/^        return [f](const dispatch::Proxy_Function_Base *b) {$/;"	f	function:chaiscript::bootstrap::Bootstrap::return_boxed_value_vector	file:
__anonc5d265990502	chaiscript/dispatchkit/bootstrap.hpp	/^        m->add(fun([](const std::string &s) -> std::string { return s; }), "to_string");$/;"	f	function:chaiscript::bootstrap::Bootstrap::bootstrap	typeref:typename:std::string	file:
__anonc5d265990602	chaiscript/dispatchkit/bootstrap.hpp	/^                  [](dispatch::Assignable_Proxy_Function &t_lhs, const std::shared_ptr<const dis/;"	f	function:chaiscript::bootstrap::Bootstrap::bootstrap	file:
__anonc5d265990702	chaiscript/dispatchkit/bootstrap.hpp	/^              {fun(std::function<std::vector<Boxed_Value> (const chaiscript::exception::eval_err/;"	f	function:chaiscript::bootstrap::Bootstrap::bootstrap	typeref:typename:std::vector<Boxed_Value>	file:
__anonc5d265990802	chaiscript/dispatchkit/bootstrap.hpp	/^              {fun(std::function<std::vector<Boxed_Value> (const chaiscript::AST_Node &t_node)>(/;"	f	function:chaiscript::bootstrap::Bootstrap::bootstrap	typeref:typename:std::vector<Boxed_Value>	file:
__anonc78c2bcb0102	math/functions/random-function.cpp	/^    {$/;"	f	function:math::functions::random_function	typeref:typename:unsigned	file:
__anonc78c2bcb0202	math/functions/random-function.cpp	/^    std::function<double(unsigned)> lambda = [table](unsigned i) -> double {$/;"	f	function:math::functions::random::unsigned_to_double	typeref:typename:double	file:
__anonc78c2bcb0302	math/functions/random-function.cpp	/^    std::function<Vector2D(const Position2D&)> lambda = [helper](const Position2D& p) -> Vector2/;"	f	function:math::functions::random::position_to_vector2d	typeref:typename:Vector2D	file:
__anonc78c2bcb0402	math/functions/random-function.cpp	/^    std::function<Vector3D(const Position3D&)> lambda = [helper](const Position3D& p) -> Vector3/;"	f	function:math::functions::random::position3d_to_vector3d	typeref:typename:Vector3D	file:
__anonc7b935bf0102	chaiscript/chaiscript_stdlib.hpp	/^        lib->add(chaiscript::fun([](const std::function<chaiscript::Boxed_Value ()> &t_func){ re/;"	f	function:chaiscript::Std_Lib::library	file:
__anoncd3bcdca1008	easylogging++.h	/^    const struct {$/;"	s	namespace:el::base::consts
__anoncd3bcdca1108	easylogging++.h	/^    const struct {$/;"	s	namespace:el::base::consts
__anoncd3bcdca1202	easylogging++.h	/^        auto conditionalAddFlag = [&](const base::type::char_t* specifier, base::FormatFlags fla/;"	f	function:el::base::LogFormat::parseFromFormat	file:
__anoncd3bcdca1302	easylogging++.h	/^        LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Configurations::hasConfiguration	typeref:typename:bool	file:
__anoncd3bcdca1402	easylogging++.h	/^        LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Configurations::setGlobally	typeref:typename:bool	file:
__anoncd3bcdca1502	easylogging++.h	/^        LevelHelper::forEachLevel(&lIndex, [&](void) -> bool  {$/;"	f	function:el::Configurations::unsafeSetGlobally	typeref:typename:bool	file:
__anoncd3bcdca1602	easylogging++.h	/^        auto getBool = [] (std::string boolStr) -> bool {  \/\/ Pass by value for trimming$/;"	f	function:el::base::TypedConfigurations::build	typeref:typename:bool	file:
__anoncd3bcdca1702	easylogging++.h	/^                [](char c) { return !base::utils::Str::isDigit(c); }) == confVal.end();$/;"	f	function:el::base::TypedConfigurations::getULong	file:
__anoncd3bcdca1802	easylogging++.h	/^        auto create = [&](Level level) {$/;"	f	function:el::base::TypedConfigurations::insertFile	file:
__anoncd3bcdca1902	easylogging++.h	/^        LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Logger::flush	typeref:typename:bool	file:
__anoncd3bcdca1a02	easylogging++.h	/^        LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Logger::initUnflushedCount	typeref:typename:bool	file:
__anoncd3bcdca1b02	easylogging++.h	/^        LevelHelper::forEachLevel(&lIndex, [&](void) -> bool {$/;"	f	function:el::Logger::resolveLoggerFormatSpec	typeref:typename:bool	file:
__anoncd3bcdca1c02	easylogging++.h	/^        auto addSuffix = [](std::stringstream& ss, const char* sfx, const char* prev) {$/;"	f	function:el::base::VRegistry::setModules	file:
__anoncd3bcdca1d02	easylogging++.h	/^        auto insert = [&](std::stringstream& ss, base::type::VerboseLevel level) {$/;"	f	function:el::base::VRegistry::setModules	file:
__anoncd3bcdca1e02	easylogging++.h	/^        cv.wait(lk, []{ return !ELPP->asyncLogQueue()->empty(); });$/;"	f	function:el::base::AsyncDispatchWorker::clean	file:
__anond0e1f3170110	scripting/primitives-module.cpp	/^{$/;"	n	file:
__anond0e1f3170202	scripting/primitives-module.cpp	/^        std::transform(boxed_children.begin(), boxed_children.end(), children.begin(), [](chaisc/;"	f	function:__anond0e1f3170110::make_union	file:
__anond3e0bd200110	primitives/union-primitive.cpp	/^{$/;"	n	file:
__anond88f774d0110	scripting/materials-module.cpp	/^{$/;"	n	file:
__anondc80204b0110	scripting/scripting.cpp	/^{$/;"	n	file:
__anondea639030110	materials/uniform-material.cpp	/^{$/;"	n	file:
__anone3f7ea6c0110	tasks/lambda-task.cpp	/^{$/;"	n	file:
__anone59b1e270110	scripting/cameras-module.cpp	/^{$/;"	n	file:
__anone7bc5c570110	tasks/serial-task-scheduler.cpp	/^{$/;"	n	file:
__anone9e570860102	math/functions/constant.h	/^            std::function<R(T)> lambda = [value](T) {$/;"	f	function:math::functions::constant	file:
__anonec0ba32e0110	demos/basic-sample.cpp	/^{$/;"	n	file:
__anonedc6a9390110	chaiscript/language/chaiscript_common.hpp	/^  {$/;"	n	namespace:chaiscript
__anonee3963ea0110	primitives/transformer-primitive.cpp	/^{$/;"	n	file:
__anonee6446090110	performance/performance.cpp	/^{$/;"	n	file:
__anonefa653160110	materials/material.cpp	/^{$/;"	n	file:
__anonefa653160202	materials/material.cpp	/^    std::function<Material(animation::TimeStamp)> lambda = [material](animation::TimeStamp ts) {$/;"	f	function:raytracer::to_animated_2d_material	file:
__anonefa653160302	materials/material.cpp	/^        std::function<MaterialProperties(const Point2D&)> lam = [material, ts](const Point2D& p)/;"	f	function:raytracer::to_animated_2d_material::__anonefa653160202	file:
_private_	cameras/camera.h	/^        namespace _private_$/;"	n	namespace:raytracer::cameras
_private_	cameras/displaceable-camera.h	/^        namespace _private_$/;"	n	namespace:raytracer::cameras
_private_	cameras/perspective-camera.h	/^        namespace _private_$/;"	n	namespace:raytracer::cameras
_private_	lights/light-source.h	/^        namespace _private_$/;"	n	namespace:raytracer::lights
_private_	lights/point-light.h	/^        namespace _private_$/;"	n	namespace:raytracer::lights
_private_	materials/material.h	/^        namespace _private_$/;"	n	namespace:raytracer::materials
_private_	math/coordinate-systems.h	/^    namespace _private_$/;"	n	namespace:math
_private_	math/point.h	/^    namespace _private_$/;"	n	namespace:math
_private_	math/vector.h	/^    namespace _private_$/;"	n	namespace:math
_private_	performance/performance.cpp	/^    namespace _private_$/;"	n	namespace:performance	file:
_private_	performance/performance.h	/^    namespace _private_$/;"	n	namespace:performance
_private_	pipeline/consumer.h	/^        namespace _private_$/;"	n	namespace:raytracer::pipeline
_private_	pipeline/null-consumer.h	/^        namespace _private_$/;"	n	namespace:raytracer::pipeline
_private_	pipeline/pipeline-builder.h	/^        namespace _private_$/;"	n	namespace:raytracer::pipeline
_private_	pipeline/producer.h	/^        namespace _private_$/;"	n	namespace:raytracer::pipeline
_private_	primitives/primitive.h	/^        namespace _private_$/;"	n	namespace:raytracer::primitives
_private_	raytracers/ray-tracer-v0.h	/^        namespace _private_$/;"	n	namespace:raytracer::raytracers
_private_	raytracers/ray-tracer.h	/^        namespace _private_$/;"	n	namespace:raytracer::raytracers
_private_	renderers/renderer.h	/^        namespace _private_$/;"	n	namespace:raytracer::renderers
_private_	samplers/sampler.h	/^        namespace _private_$/;"	n	namespace:raytracer::samplers
_private_	scripting/animation-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/cameras-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/imaging-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/lights-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/materials-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/math-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/pipeline-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/primitives-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/raytracing-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/rendering-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	scripting/samplers-module.h	/^        namespace _private_$/;"	n	namespace:raytracer::scripting
_private_	tasks/task-scheduler.h	/^        namespace _private_$/;"	n	namespace:tasks::schedulers
a	imaging/bmp-format.cpp	/^        uint8_t a;$/;"	m	struct:__anon5b9926d60110::ARGB	typeref:typename:uint8_t	file:
abort	easylogging++.h	/^static inline void abort(int status, const std::string& reason = std::string()) {$/;"	f	namespace:el::base::utils	typeref:typename:void
accumulate	util/base64.cpp	/^void Base64::accumulate(char c)$/;"	f	class:Base64	typeref:typename:void
acquireLock	easylogging++.h	/^    virtual inline void acquireLock(void) ELPP_FINAL { m_mutex.lock(); }$/;"	f	class:el::base::threading::ThreadSafe	typeref:typename:void
active_loaded_modules	chaiscript/language/chaiscript_engine.hpp	/^      std::set<std::string> active_loaded_modules;$/;"	m	struct:chaiscript::ChaiScript::State	typeref:typename:std::set<std::string>
add	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add(Boxed_Value obj, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add(const Proxy_Function &f, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add(const Type_Conversion &d)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add(const Type_Info &ti, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add	chaiscript/dispatchkit/dispatchkit.hpp	/^      Module &add(Proxy_Function f, std::string name)$/;"	f	class:chaiscript::Module	typeref:typename:Module &
add	chaiscript/dispatchkit/dispatchkit.hpp	/^      Module &add(Type_Conversion d)$/;"	f	class:chaiscript::Module	typeref:typename:Module &
add	chaiscript/dispatchkit/dispatchkit.hpp	/^      Module &add(Type_Info ti, std::string name)$/;"	f	class:chaiscript::Module	typeref:typename:Module &
add	chaiscript/dispatchkit/dispatchkit.hpp	/^      Module &add(const std::shared_ptr<Module> &m)$/;"	f	class:chaiscript::Module	typeref:typename:Module &
add	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript &add(const ModulePtr &t_p)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:ChaiScript &
add	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript &add(const T &t_t, const std::string &t_name)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:ChaiScript &
add	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript &add(const Type_Conversion &d)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:ChaiScript &
add	scripting/scripting-util.h	/^                void add(const std::string& tag, T* storage, bool optional = false)$/;"	f	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:void
addFlag	easylogging++.h	/^    inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::base::Storage	typeref:typename:void
addFlag	easylogging++.h	/^    inline void addFlag(base::FormatFlags flag) {$/;"	f	class:el::base::LogFormat	typeref:typename:void
addFlag	easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::base::utils	typeref:typename:void
addToBuff	easylogging++.h	/^    static inline char* addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	class:el::base::utils::Str	typeref:typename:char *
add_angle	scripting/math-module.cpp	/^    void add_angle(Module& module)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:void
add_class	chaiscript/utility/utility.hpp	/^      add_class(ModuleType &t_module,$/;"	f	namespace:chaiscript::utility	typeref:typename:std::enable_if<std::is_enum<Enum>::value,void>::type
add_class	chaiscript/utility/utility.hpp	/^      void add_class(ModuleType &t_module,$/;"	f	namespace:chaiscript::utility	typeref:typename:void
add_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^      void add_conversion(const std::shared_ptr<detail::Type_Conversion_Base> &conversion)$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:void
add_function	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_function(const Proxy_Function &t_f, const std::string &t_name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add_global	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_global(const Boxed_Value &obj, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add_global	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript &add_global(const Boxed_Value &t_bv, const std::string &t_name)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:ChaiScript &
add_global_const	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_global_const(const Boxed_Value &obj, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add_global_const	chaiscript/dispatchkit/dispatchkit.hpp	/^      Module &add_global_const(Boxed_Value t_bv, std::string t_name)$/;"	f	class:chaiscript::Module	typeref:typename:Module &
add_global_const	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript &add_global_const(const Boxed_Value &t_bv, const std::string &t_name)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:ChaiScript &
add_global_no_throw	chaiscript/dispatchkit/dispatchkit.hpp	/^        Boxed_Value add_global_no_throw(const Boxed_Value &obj, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Boxed_Value
add_interval	scripting/math-module.cpp	/^    void add_interval(Module& module)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:void
add_keyed_value	chaiscript/dispatchkit/dispatchkit.hpp	/^          static void add_keyed_value(Container &t_c, const Key &t_key, Value &&t_value)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add_object	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_object(const std::string &name, Boxed_Value obj)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add_object	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_object(const std::string &t_name, Boxed_Value obj) const {$/;"	f	class:chaiscript::detail::Dispatch_State	typeref:typename:void
add_object	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_object(const std::string &t_name, Boxed_Value obj, Stack_Holder &t_holder)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
add_points_and_vectors	scripting/math-module.cpp	/^    void add_points_and_vectors(Module& module)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:void
add_rectangle3d	scripting/math-module.cpp	/^    void add_rectangle3d(Module& module)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:void
add_reserved_word	chaiscript/dispatchkit/dispatchkit.hpp	/^        void add_reserved_word(const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
addition	chaiscript/dispatchkit/operators.hpp	/^          auto addition(L l, R r) -> decltype(( l + r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l+r))
addition	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr addition(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
advance_copy	chaiscript/chaiscript_defines.hpp	/^    Iter advance_copy(Iter iter, Distance distance) {$/;"	f	namespace:chaiscript	typeref:typename:Iter
all	Makefile	/^all: debug_build release_build test_build$/;"	t
allowed	easylogging++.h	/^    bool allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	class:el::base::VRegistry	typeref:typename:bool
ambient	materials/material-properties.h	/^        const imaging::Color ambient;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const imaging::Color
angle	tests/primitives/disk/disk-tests.cpp	/^        for (Angle angle = 0_degrees; angle < 360_degrees; angle += 15_degrees)$/;"	v	typeref:typename:Angle
angle_animation	scripting/animation-module.cpp	/^        Animation<Angle> angle_animation(Angle from, Angle to, Duration duration) const$/;"	f	struct:__anona5945eab0110::AnimationLibrary	typeref:typename:Animation<Angle>	file:
angle_interval	scripting/math-module.cpp	/^    Interval<Angle> angle_interval(Angle lower, Angle upper)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:Interval<Angle>
anim	tests/animation/animation-tests.cpp	/^        auto anim = animation::basic(0, 1, 1_s);$/;"	v	typeref:typename:auto
anim	tests/animation/animation-tests.cpp	/^        auto anim = animation::basic(0, 2, 1_s);$/;"	v	typeref:typename:auto
anim	tests/animation/animation-tests.cpp	/^        auto anim = animation::basic(1, 3, 1_s);$/;"	v	typeref:typename:auto
anim	tests/animation/animation-tests.cpp	/^        auto anim = animation::basic(1, 3, 2_s);$/;"	v	typeref:typename:auto
animate	animation/interval-animation.h	/^    Animation<T> animate(T from, T to, animation::Duration duration)$/;"	f	namespace:animation	typeref:typename:Animation<T>
animate	animation/interval-animation.h	/^    Animation<T> animate(const math::Interval<T>& animation_interval, animation::Duration durati/;"	f	namespace:animation	typeref:typename:Animation<T>
animation	animation/animation.h	/^namespace animation$/;"	n
animation	animation/duration.h	/^namespace animation$/;"	n
animation	animation/ease-animation.h	/^namespace animation$/;"	n
animation	animation/interval-animation.h	/^namespace animation$/;"	n
animation	animation/time-stamp.h	/^namespace animation$/;"	n
animation	pipeline/animation-processor.cpp	/^std::shared_ptr<Processor<animation::Animation<std::shared_ptr<Scene>>, std::shared_ptr<Scene>>>/;"	f	class:raytracer::pipeline	typeref:typename:std::shared_ptr<Processor<animation::Animation<std::shared_ptr<Scene>>,std::shared_ptr<Scene>>>
animation	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> animation(double fps) const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
animation	tests/animation/animation-tests.cpp	/^    auto animation = animate(0.0, 1.0, 1_s);$/;"	v	typeref:typename:auto
animation	tests/animation/animation-tests.cpp	/^    auto animation = animate(0.0, 2.0, 1_s);$/;"	v	typeref:typename:auto
animation	tests/animation/animation-tests.cpp	/^    auto animation = animate(1.0, 2.0, 1_s);$/;"	v	typeref:typename:auto
animation	tests/animation/animation-tests.cpp	/^    auto animation = animate(1.0, 2.0, 2_s);$/;"	v	typeref:typename:auto
annotation	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:std::string
annotation	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:std::string
annotation	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:std::string
annotation	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Attribute_Access	typeref:typename:std::string
annotation	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:std::string
annotation	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:std::string
annotation	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual std::string annotation() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Proxy_Function_Impl_Base	typeref:typename:std::string
annotation	chaiscript/language/chaiscript_common.hpp	/^      AST_NodePtr annotation;$/;"	m	struct:chaiscript::AST_Node	typeref:typename:AST_NodePtr
append	chaiscript/utility/json.hpp	/^        void append( T arg ) {$/;"	f	class:json::JSON	typeref:typename:void
append	chaiscript/utility/json.hpp	/^        void append( T arg, U... args ) {$/;"	f	class:json::JSON	typeref:typename:void
apply	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void apply(InItr begin, const InItr end, T &t) $/;"	f	class:chaiscript::Module	typeref:typename:void
apply	chaiscript/dispatchkit/dispatchkit.hpp	/^        void apply(Eval &t_eval, Engine &t_engine) const$/;"	f	class:chaiscript::Module	typeref:typename:void
apply_eval	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void apply_eval(InItr begin, InItr end, T &t)$/;"	f	class:chaiscript::Module	typeref:typename:void
apply_globals	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void apply_globals(InItr begin, InItr end, T &t)$/;"	f	class:chaiscript::Module	typeref:typename:void
apply_single	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void apply_single(InItr begin, InItr end, T &t)$/;"	f	class:chaiscript::Module	typeref:typename:void
approx	math/approx.h	/^    approximately<T> approx(T x, double epsilon = 0.00000001)$/;"	f	namespace:math	typeref:typename:approximately<T>
approximately	animation/duration.h	/^        explicit approximately(const animation::Duration& value, double epsilon = 0.00001)$/;"	f	struct:math::approximately
approximately	animation/duration.h	/^    struct approximately<animation::Duration>$/;"	s	namespace:math
approximately	animation/time-stamp.h	/^        explicit approximately(const animation::TimeStamp& value, double epsilon = 0.00001)$/;"	f	struct:math::approximately
approximately	animation/time-stamp.h	/^    struct approximately<animation::TimeStamp>$/;"	s	namespace:math
approximately	imaging/color.h	/^        explicit approximately(const imaging::Color& value, double epsilon = 0.00001)$/;"	f	struct:math::approximately
approximately	imaging/color.h	/^    struct approximately<imaging::Color>$/;"	s	namespace:math
approximately	math/angle.h	/^        explicit approximately(const Angle& value, double epsilon = 0.00001)$/;"	f	struct:math::approximately
approximately	math/angle.h	/^    struct approximately<Angle>$/;"	s	namespace:math
approximately	math/approx.h	/^        explicit approximately(double value, double epsilon = 0.00000001)$/;"	f	struct:math::approximately
approximately	math/approx.h	/^    struct approximately<double>$/;"	s	namespace:math
approximately	math/ray.h	/^        explicit approximately(const math::Ray& value, double epsilon = 0.00001)$/;"	f	struct:math::approximately
approximately	math/ray.h	/^    struct approximately<Ray>$/;"	s	namespace:math
arcSafeRelease	Catch.h	/^inline void arcSafeRelease(NSObject* obj) {$/;"	f
arcSafeRelease	Catch.h	/^inline void arcSafeRelease(NSObject*){}$/;"	f
arcSafeRelease	Catch.h	/^void arcSafeRelease(NSObject* obj);$/;"	f
arithmetic_error	chaiscript/dispatchkit/boxed_number.hpp	/^      arithmetic_error(const std::string& reason) : std::runtime_error("Arithmetic error: " + re/;"	f	struct:chaiscript::exception::arithmetic_error
arithmetic_error	chaiscript/dispatchkit/boxed_number.hpp	/^    struct arithmetic_error : std::runtime_error$/;"	s	namespace:chaiscript::exception
arity	chaiscript/dispatchkit/callable_traits.hpp	/^          static const size_t arity = sizeof...(Params);$/;"	m	struct:chaiscript::dispatch::detail::Arity	typeref:typename:const size_t
arity_error	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      arity_error(int t_got, int t_expected)$/;"	f	struct:chaiscript::exception::arity_error
arity_error	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^    struct arity_error : std::range_error$/;"	s	namespace:chaiscript::exception
around	data-structures/grid.h	/^        void around(const Position2D& p, unsigned distance, std::function<void(const Position2D&/;"	f	class:data::Grid	typeref:typename:void
array	chaiscript/dispatchkit/bootstrap.hpp	/^      ModulePtr array(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:ModulePtr
array	data-structures/array.h	/^    array(const array<T>& arr)$/;"	f	class:array
array	data-structures/array.h	/^    array(size_t size)$/;"	f	class:array
array	data-structures/array.h	/^    array(std::shared_ptr<T> data, size_t start, size_t size)$/;"	f	class:array
array	data-structures/array.h	/^class array$/;"	c
assert_equals	tests/cameras/camera-transformation-tests.cpp	/^    void assert_equals(const Point3D& expected, const Point3D& actual)$/;"	f	namespace:__anon7420feb00110	typeref:typename:void
assert_equals	tests/cameras/camera-transformation-tests.cpp	/^    void assert_equals(const Vector3D& expected, const Vector3D& actual)$/;"	f	namespace:__anon7420feb00110	typeref:typename:void
assign	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign(Boxed_Number t_lhs, const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value assign(const Boxed_Value &rhs)$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:Boxed_Value
assign	chaiscript/dispatchkit/operators.hpp	/^          auto assign(L l, R r) -> L&$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:L &
assign	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual void assign(const std::shared_ptr<const Proxy_Function_Base> &t_rhs) CHAISCRIPT_/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:void
assign	chaiscript/language/chaiscript_algebraic.hpp	/^      assign, pre_increment, pre_decrement, assign_product, assign_sum,$/;"	e	enum:chaiscript::Operators::Opers
assign_bitwise_and	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_bitwise_and(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_bitwise_and	chaiscript/dispatchkit/operators.hpp	/^          auto assign_bitwise_and(L l, R r) -> decltype((l &= r))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l &=r))
assign_bitwise_and	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_bitwise_and(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_bitwise_and	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_bitwise_and, assign_bitwise_or, assign_shift_left, assign_shift_right,$/;"	e	enum:chaiscript::Operators::Opers
assign_bitwise_or	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_bitwise_or(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_bitwise_or	chaiscript/dispatchkit/operators.hpp	/^          auto assign_bitwise_or(L l, R r) -> decltype((l |= r))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l|=r))
assign_bitwise_or	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_bitwise_or(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_bitwise_or	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_bitwise_and, assign_bitwise_or, assign_shift_left, assign_shift_right,$/;"	e	enum:chaiscript::Operators::Opers
assign_bitwise_xor	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_bitwise_xor(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_bitwise_xor	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_remainder, assign_bitwise_xor,$/;"	e	enum:chaiscript::Operators::Opers
assign_difference	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_difference(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_difference	chaiscript/dispatchkit/operators.hpp	/^          auto assign_difference(L l, R r) -> decltype(( l -= r))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l-=r))
assign_difference	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_difference(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_difference	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_quotient, assign_difference,$/;"	e	enum:chaiscript::Operators::Opers
assign_left_shift	chaiscript/dispatchkit/operators.hpp	/^          auto assign_left_shift(L l, R r) -> decltype(( l <<= r))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l<<=r))
assign_left_shift	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_left_shift(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_product	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_product(Boxed_Number t_lhs, const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_product	chaiscript/dispatchkit/operators.hpp	/^          auto assign_product(L l, R r) -> decltype(( l *= r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l * =r))
assign_product	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_product(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_product	chaiscript/language/chaiscript_algebraic.hpp	/^      assign, pre_increment, pre_decrement, assign_product, assign_sum,$/;"	e	enum:chaiscript::Operators::Opers
assign_quotient	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_quotient(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_quotient	chaiscript/dispatchkit/operators.hpp	/^          auto assign_quotient(L l, R r) -> decltype(( l \/= r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l/=r))
assign_quotient	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_quotient(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_quotient	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_quotient, assign_difference,$/;"	e	enum:chaiscript::Operators::Opers
assign_remainder	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_remainder(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_remainder	chaiscript/dispatchkit/operators.hpp	/^          auto assign_remainder(L l, R r) -> decltype(( l %= r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l%=r))
assign_remainder	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_remainder(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_remainder	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_remainder, assign_bitwise_xor,$/;"	e	enum:chaiscript::Operators::Opers
assign_right_shift	chaiscript/dispatchkit/operators.hpp	/^          auto assign_right_shift(L l, R r) -> decltype(( l >>= r))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l>>=r))
assign_right_shift	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_right_shift(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_shift_left	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_shift_left(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_shift_left	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_bitwise_and, assign_bitwise_or, assign_shift_left, assign_shift_right,$/;"	e	enum:chaiscript::Operators::Opers
assign_shift_right	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_shift_right(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_shift_right	chaiscript/language/chaiscript_algebraic.hpp	/^      assign_bitwise_and, assign_bitwise_or, assign_shift_left, assign_shift_right,$/;"	e	enum:chaiscript::Operators::Opers
assign_sum	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number assign_sum(Boxed_Number t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
assign_sum	chaiscript/dispatchkit/operators.hpp	/^          auto assign_sum(L l, R r) -> L&$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:L &
assign_sum	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_sum(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assign_sum	chaiscript/language/chaiscript_algebraic.hpp	/^      assign, pre_increment, pre_decrement, assign_product, assign_sum,$/;"	e	enum:chaiscript::Operators::Opers
assign_xor	chaiscript/dispatchkit/operators.hpp	/^          auto assign_xor(L l, R r) -> decltype((l^=r))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l^=r))
assign_xor	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr assign_xor(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
assignable_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr assignable_type(const std::string &type, ModulePtr m = std::make_shared<Module/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
ast	chaiscript/language/chaiscript_parser.hpp	/^      AST_NodePtr ast() const {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:AST_NodePtr
ast_node_type_to_string	chaiscript/language/chaiscript_common.hpp	/^    const char *ast_node_type_to_string(int ast_node_type) {$/;"	f	namespace:chaiscript::__anonedc6a9390110	typeref:typename:const char *
asyncLogQueue	easylogging++.h	/^    inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *
at	chaiscript/utility/json.hpp	/^        JSON &at( const string &key ) {$/;"	f	class:json::JSON	typeref:typename:JSON &
at	chaiscript/utility/json.hpp	/^        JSON &at( unsigned index ) {$/;"	f	class:json::JSON	typeref:typename:JSON &
at	chaiscript/utility/json.hpp	/^        const JSON &at( const string &key ) const {$/;"	f	class:json::JSON	typeref:typename:const JSON &
at	chaiscript/utility/json.hpp	/^        const JSON &at( unsigned index ) const {$/;"	f	class:json::JSON	typeref:typename:const JSON &
at	materials/composition-material.cpp	/^        MaterialProperties at(const HitPosition& hp) const override$/;"	f	class:__anon13f113d70110::CompositionMaterial2D	typeref:typename:MaterialProperties	file:
at	materials/composition-material.cpp	/^        MaterialProperties at(const HitPosition& hp) const override$/;"	f	class:__anon13f113d70110::CompositionMaterial3D	typeref:typename:MaterialProperties	file:
at	materials/material.cpp	/^        MaterialProperties at(const math::Point2D& p) const override$/;"	f	class:__anonefa653160110::FunctionMaterial2D	typeref:typename:MaterialProperties	file:
at	materials/material.cpp	/^        MaterialProperties at(const math::Point3D& p) const override$/;"	f	class:__anonefa653160110::FunctionMaterial3D	typeref:typename:MaterialProperties	file:
at	materials/material.cpp	/^MaterialProperties raytracer::materials::_private_::Material2DImplementation::at(const HitPositi/;"	f	class:raytracer::materials::_private_::Material2DImplementation	typeref:typename:MaterialProperties
at	materials/material.cpp	/^MaterialProperties raytracer::materials::_private_::Material3DImplementation::at(const HitPositi/;"	f	class:raytracer::materials::_private_::Material3DImplementation	typeref:typename:MaterialProperties
at	materials/uniform-material.cpp	/^        MaterialProperties at(const HitPosition&) const$/;"	f	class:__anondea639030110::UniformMaterial	typeref:typename:MaterialProperties	file:
at	math/matrix.h	/^        double at(unsigned row, unsigned col) const$/;"	f	class:math::Matrix	typeref:typename:double
at	math/matrix.h	/^        double& at(unsigned row, unsigned col)$/;"	f	class:math::Matrix	typeref:typename:double &
at	math/ray.cpp	/^Point3D math::Ray::at(double t) const $/;"	f	class:math::Ray	typeref:typename:Point3D
at	tests/animation/animation-tests.cpp	/^    TimeStamp at(Duration d)$/;"	f	namespace:__anon5cc3ace70110	typeref:typename:TimeStamp
azimuth	math/coordinate-systems.h	/^        math::Angle azimuth, elevation;$/;"	m	struct:math::Spherical	typeref:typename:math::Angle
azimuth	math/coordinate-systems.h	/^        math::Angle azimuth;$/;"	m	struct:math::CylindricalX	typeref:typename:math::Angle
azimuth	math/coordinate-systems.h	/^        math::Angle azimuth;$/;"	m	struct:math::CylindricalY	typeref:typename:math::Angle
azimuth	math/coordinate-systems.h	/^        math::Angle azimuth;$/;"	m	struct:math::CylindricalZ	typeref:typename:math::Angle
b	imaging/bmp-format.cpp	/^        uint8_t b;$/;"	m	struct:__anon5b9926d60110::ARGB	typeref:typename:uint8_t	file:
b	imaging/bmp-format.cpp	/^        uint8_t b;$/;"	m	struct:__anon5b9926d60110::RGB	typeref:typename:uint8_t	file:
b	imaging/color.h	/^        double b;$/;"	m	struct:imaging::Color	typeref:typename:double
b	imaging/wif-format.cpp	/^        uint8_t r, g, b;$/;"	m	struct:__anon10e0153d0110::RGBColor	typeref:typename:uint8_t	file:
b_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   b_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
back	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          const_reference_type back() const$/;"	f	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:const_reference_type
back	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          reference_type back() const$/;"	f	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:reference_type
back_insertion_sequence_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr back_insertion_sequence_type(const std::string &type, ModulePtr m = std::make_/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
backptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename ContainerType::reference (ContainerType::*backptr)();$/;"	t	function:chaiscript::bootstrap::standard_library::back_insertion_sequence_type	typeref:typename:ContainerType::reference (ContainerType::*)()
bad_any_cast	chaiscript/dispatchkit/any.hpp	/^          bad_any_cast() CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::detail::exception::bad_any_cast
bad_any_cast	chaiscript/dispatchkit/any.hpp	/^      class bad_any_cast : public std::bad_cast$/;"	c	namespace:chaiscript::detail::exception
bad_boxed_cast	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        bad_boxed_cast(Type_Info t_from, const std::type_info &t_to)$/;"	f	class:chaiscript::exception::bad_boxed_cast
bad_boxed_cast	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        bad_boxed_cast(Type_Info t_from, const std::type_info &t_to,$/;"	f	class:chaiscript::exception::bad_boxed_cast
bad_boxed_cast	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        explicit bad_boxed_cast(std::string t_what) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::bad_boxed_cast
bad_boxed_cast	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^    class bad_boxed_cast : public std::bad_cast$/;"	c	namespace:chaiscript::exception
bad_boxed_dynamic_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        bad_boxed_dynamic_cast(const Type_Info &t_from, const std::type_info &t_to) CHAISCRIPT_N/;"	f	class:chaiscript::exception::bad_boxed_dynamic_cast
bad_boxed_dynamic_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        bad_boxed_dynamic_cast(const Type_Info &t_from, const std::type_info &t_to,$/;"	f	class:chaiscript::exception::bad_boxed_dynamic_cast
bad_boxed_dynamic_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        bad_boxed_dynamic_cast(const std::string &w) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::bad_boxed_dynamic_cast
bad_boxed_dynamic_cast	chaiscript/dispatchkit/type_conversions.hpp	/^    class bad_boxed_dynamic_cast : public bad_boxed_cast$/;"	c	namespace:chaiscript::exception
bad_boxed_type_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        bad_boxed_type_cast(const Type_Info &t_from, const std::type_info &t_to) CHAISCRIPT_NOEX/;"	f	class:chaiscript::exception::bad_boxed_type_cast
bad_boxed_type_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        bad_boxed_type_cast(const Type_Info &t_from, const std::type_info &t_to,$/;"	f	class:chaiscript::exception::bad_boxed_type_cast
bad_boxed_type_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        bad_boxed_type_cast(const std::string &w) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::bad_boxed_type_cast
bad_boxed_type_cast	chaiscript/dispatchkit/type_conversions.hpp	/^    class bad_boxed_type_cast : public bad_boxed_cast$/;"	c	namespace:chaiscript::exception
bare_equal	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool bare_equal(const Type_Info &ti) const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
bare_equal_type_info	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool bare_equal_type_info(const std::type_info &ti) const CHAISCRIPT_/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
bare_name	chaiscript/dispatchkit/type_info.hpp	/^      std::string bare_name() const$/;"	f	class:chaiscript::Type_Info	typeref:typename:std::string
bare_type_info	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR const std::type_info *bare_type_info() const$/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR const std::type_info *
base	easylogging++.h	/^namespace base {$/;"	n	namespace:el
base64	pipeline/base64-processor.cpp	/^    const std::string base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\//;"	v	namespace:__anon63dcdf0d0110	typeref:typename:const std::string
base64	pipeline/base64-processor.cpp	/^std::shared_ptr<Processor<std::shared_ptr<std::vector<uint8_t>>, std::string>> raytracer::pipeli/;"	f	class:raytracer::pipeline	typeref:typename:std::shared_ptr<Processor<std::shared_ptr<std::vector<uint8_t>>,std::string>>
base64	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> base64() const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
base64	util/base64.cpp	/^    const std::string base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\//;"	v	namespace:__anon73cd7d280110	typeref:typename:const std::string
base_class	chaiscript/dispatchkit/type_conversions.hpp	/^  Type_Conversion base_class(typename std::enable_if<std::is_polymorphic<Base>::value && std::is/;"	f	namespace:chaiscript	typeref:typename:Type_Conversion
basic	animation/animation.cpp	/^Animation<double> animation::basic(double from, double to, const Duration& duration)$/;"	f	class:animation	typeref:typename:Animation<double>
basic_constructors	chaiscript/dispatchkit/bootstrap.hpp	/^    ModulePtr basic_constructors(const std::string &type, ModulePtr m = std::make_shared<Module>/;"	f	namespace:chaiscript::bootstrap	typeref:typename:ModulePtr
basic_sample	demos/basic-sample.cpp	/^void demos::basic_sample(std::shared_ptr<pipeline::Consumer<std::shared_ptr<Bitmap>>> output)$/;"	f	class:demos	typeref:typename:void
beep	util/beep.cpp	/^void beep()$/;"	f	typeref:typename:void
begin	chaiscript/utility/json.hpp	/^                typename Container::const_iterator begin() const { return object ? object->begin/;"	f	class:json::JSON::JSONConstWrapper	typeref:typename:Container::const_iterator
begin	chaiscript/utility/json.hpp	/^                typename Container::const_iterator begin() const { return object ? object->begin/;"	f	class:json::JSON::JSONWrapper	typeref:typename:Container::const_iterator
begin	chaiscript/utility/json.hpp	/^                typename Container::iterator begin() { return object ? object->begin() : typenam/;"	f	class:json::JSON::JSONWrapper	typeref:typename:Container::iterator
begin	easylogging++.h	/^    iterator begin(void) { return getContainer().begin(); }$/;"	f	class:el::base::workarounds::IterableContainer	typeref:typename:iterator
begin	easylogging++.h	/^    virtual inline iterator begin(void) ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:iterator
bidir	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual bool bidir() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Static_Conversion_Impl	typeref:typename:bool
bidir	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual bool bidir() const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Type_Conversion_Impl	typeref:typename:bool
bidir	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual bool bidir() const$/;"	f	class:chaiscript::detail::Type_Conversion_Base	typeref:typename:bool
bin_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   bin_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
binary_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value binary_go(Operators::Opers t_oper, T &t, const U &u, const Boxed_Value /;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
binary_int_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value binary_int_go(Operators::Opers t_oper, T &t, const U &u, const Boxed_Va/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
bind_first	chaiscript/dispatchkit/bind_first.hpp	/^      std::function<Ret (Param...)> bind_first(Ret (*f)(P1, Param...), O&& o)$/;"	f	namespace:chaiscript::detail	typeref:typename:std::function<Ret (Param...)>
bind_first	chaiscript/dispatchkit/bind_first.hpp	/^      std::function<Ret (Param...)> bind_first(Ret (Class::*f)(Param...) const, O&& o)$/;"	f	namespace:chaiscript::detail	typeref:typename:std::function<Ret (Param...)>
bind_first	chaiscript/dispatchkit/bind_first.hpp	/^      std::function<Ret (Param...)> bind_first(Ret (Class::*f)(Param...), O&& o)$/;"	f	namespace:chaiscript::detail	typeref:typename:std::function<Ret (Param...)>
bind_first	chaiscript/dispatchkit/bind_first.hpp	/^      std::function<Ret (Param...)> bind_first(const std::function<Ret (P1, Param...)> &f, O&& o/;"	f	namespace:chaiscript::detail	typeref:typename:std::function<Ret (Param...)>
bind_function	chaiscript/dispatchkit/bootstrap.hpp	/^      static Boxed_Value bind_function(const std::vector<Boxed_Value> &params)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:Boxed_Value
bitmap_function	imaging/bitmap-function.cpp	/^Function<Color(const Point2D&)> imaging::bitmap_function(std::shared_ptr<Bitmap> bitmap)$/;"	f	class:imaging	typeref:typename:Function<Color (const Point2D &)>
bitmap_header	imaging/bmp-format.cpp	/^        BITMAP_HEADER_V3 bitmap_header;$/;"	m	struct:__anon5b9926d60110::BITMAP_FILE_V3	typeref:typename:BITMAP_HEADER_V3	file:
bitmap_header	imaging/bmp-format.cpp	/^        BITMAP_HEADER_V4 bitmap_header;$/;"	m	struct:__anon5b9926d60110::BITMAP_FILE_V4	typeref:typename:BITMAP_HEADER_V4	file:
bitmap_header	imaging/bmp-format.cpp	/^        BITMAP_HEADER_V5 bitmap_header;$/;"	m	struct:__anon5b9926d60110::BITMAP_FILE_V5	typeref:typename:BITMAP_HEADER_V5	file:
bitwise	easylogging++.h	/^namespace bitwise {$/;"	n	namespace:el::base::utils
bitwise_and	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number bitwise_and(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
bitwise_and	chaiscript/dispatchkit/operators.hpp	/^          auto bitwise_and(L l, R r) -> decltype(( l & r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l & r))
bitwise_and	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr bitwise_and(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
bitwise_and	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
bitwise_complement	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number bitwise_complement(const Boxed_Number &t_lhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
bitwise_complement	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
bitwise_compliment	chaiscript/dispatchkit/operators.hpp	/^          auto bitwise_compliment(L l) -> decltype(( ~l ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((~l))
bitwise_compliment	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr bitwise_compliment(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
bitwise_or	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number bitwise_or(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
bitwise_or	chaiscript/dispatchkit/operators.hpp	/^          auto bitwise_or(L l, R r) -> decltype(( l | r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l|r))
bitwise_or	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr bitwise_or(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
bitwise_or	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
bitwise_xor	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number bitwise_xor(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
bitwise_xor	chaiscript/dispatchkit/operators.hpp	/^          auto bitwise_xor(L l, R r) -> decltype(( l ^ r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l^r))
bitwise_xor	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr bitwise_xor(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
bitwise_xor	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
black	imaging/color.h	/^        constexpr Color black()   { return Color{ 0, 0, 0 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
blue	imaging/color.h	/^        constexpr Color blue()    { return Color{ 0, 0, 1 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
bool_mapper	math/functions/bool-mapper.h	/^        Function<R(bool)> bool_mapper(R t, R f)$/;"	f	namespace:math::functions	typeref:typename:Function<R (bool)>
bool_to_string	chaiscript/dispatchkit/bootstrap.hpp	/^      static std::string bool_to_string(bool b)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:std::string
boolean_flag	chaiscript/language/chaiscript_algebraic.hpp	/^      boolean_flag,$/;"	e	enum:chaiscript::Operators::Opers
boolean_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value boolean_go(Operators::Opers t_oper, const T &t, const T &u)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
bootstrap	chaiscript/dispatchkit/bootstrap.hpp	/^      static ModulePtr bootstrap(ModulePtr m = std::make_shared<Module>())$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:ModulePtr
bootstrap	chaiscript/dispatchkit/bootstrap.hpp	/^  namespace bootstrap$/;"	n	namespace:chaiscript
bootstrap	chaiscript/dispatchkit/bootstrap_stl.hpp	/^  namespace bootstrap$/;"	n	namespace:chaiscript
bootstrap	chaiscript/dispatchkit/operators.hpp	/^  namespace bootstrap$/;"	n	namespace:chaiscript
bootstrap_pod_type	chaiscript/dispatchkit/bootstrap.hpp	/^    ModulePtr bootstrap_pod_type(const std::string &name, ModulePtr m = std::make_shared<Module>/;"	f	namespace:chaiscript::bootstrap	typeref:typename:ModulePtr
bound	math/interval.h	/^        constexpr T bound() const$/;"	f	struct:math::Interval	typeref:typename:T
bounding_box	primitives/decorator-primitive.cpp	/^        math::Box bounding_box() const override$/;"	f	class:__anon08e8fc9a0110::DecoratorImplementation	typeref:typename:math::Box	file:
bounding_box	primitives/plane-primitive.cpp	/^        math::Box bounding_box() const override$/;"	f	class:__anon22e967e70110::PlaneXYImplementation	typeref:typename:math::Box	file:
bounding_box	primitives/sphere-primitive.cpp	/^        math::Box bounding_box() const override$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:math::Box	file:
bounding_box	primitives/transformer-primitive.cpp	/^        math::Box bounding_box() const override$/;"	f	class:__anonee3963ea0110::TransformerImplementation	typeref:typename:math::Box	file:
bounding_box	primitives/union-primitive.cpp	/^        math::Box bounding_box() const override$/;"	f	class:__anond3e0bd200110::BinaryUnionImplementation	typeref:typename:math::Box	file:
box	chaiscript/dispatchkit/function_call_detail.hpp	/^          static Boxed_Value box(Boxed_Value bv)$/;"	f	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper	typeref:typename:Boxed_Value
box	chaiscript/dispatchkit/function_call_detail.hpp	/^          static auto box(Q&& q) -> typename std::enable_if<!std::is_reference<P>::value&&!std::/;"	f	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper
box	chaiscript/dispatchkit/function_call_detail.hpp	/^          static auto box(Q&& q) -> typename std::enable_if<std::is_reference<P>::value&&!std::i/;"	f	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper
boxed_cast	chaiscript/dispatchkit/boxed_cast.hpp	/^  typename detail::Cast_Helper<Type>::Result_Type boxed_cast(const Boxed_Value &bv, const Type_C/;"	f	namespace:chaiscript	typeref:typename:detail::Cast_Helper<Type>::Result_Type
boxed_cast	chaiscript/dispatchkit/dispatchkit.hpp	/^          typename detail::Cast_Helper<Type>::Result_Type boxed_cast(const Boxed_Value &bv) cons/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:detail::Cast_Helper<Type>::Result_Type
boxed_cast	chaiscript/language/chaiscript_engine.hpp	/^      typename detail::Cast_Helper<Type>::Result_Type boxed_cast(const Boxed_Value &bv) const$/;"	f	class:chaiscript::ChaiScript	typeref:typename:detail::Cast_Helper<Type>::Result_Type
boxed_type_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^        Boxed_Value boxed_type_conversion(Conversion_Saves &t_saves, const Boxed_Value &from) co/;"	f	class:chaiscript::Type_Conversions	typeref:typename:Boxed_Value
boxed_type_down_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^        Boxed_Value boxed_type_down_conversion(Conversion_Saves &t_saves, const Boxed_Value &to)/;"	f	class:chaiscript::Type_Conversions	typeref:typename:Boxed_Value
brief	easylogging++.h	/^        const char* brief;$/;"	m	struct:el::base::consts::__anoncd3bcdca1108	typeref:typename:const char *
build	easylogging++.h	/^    base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const {$/;"	f	class:el::base::DefaultLogBuilder	typeref:typename:base::type::string_t
build	easylogging++.h	/^    void build(Configurations* configurations) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:void
buildBaseFilename	easylogging++.h	/^    static void buildBaseFilename(const std::string& fullPath, char buff[], $/;"	f	class:el::base::utils::File	typeref:typename:void
buildFloat	chaiscript/language/chaiscript_parser.hpp	/^      static Boxed_Value buildFloat(const std::string &t_val)$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:Boxed_Value
buildInt	chaiscript/language/chaiscript_parser.hpp	/^      static Boxed_Value buildInt(const int base, const std::string &t_val, const bool prefixed)$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:Boxed_Value
buildStrippedFilename	easylogging++.h	/^    static void buildStrippedFilename(const char* filename, char buff[], $/;"	f	class:el::base::utils::File	typeref:typename:void
buildTimeInfo	easylogging++.h	/^    static inline struct ::tm* buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo) {$/;"	f	class:el::base::utils::DateTime	typeref:struct:::tm *
build_constructor_	chaiscript/dispatchkit/proxy_constructors.hpp	/^        Proxy_Function build_constructor_(Class (*)(Params...))$/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:Proxy_Function
build_eval_system	chaiscript/language/chaiscript_engine.hpp	/^    void build_eval_system(const ModulePtr &t_lib) {$/;"	f	class:chaiscript::ChaiScript	typeref:typename:void
build_function_caller_helper	chaiscript/dispatchkit/function_call_detail.hpp	/^        std::function<Ret (Params...)> build_function_caller_helper(Ret (Params...), const std::/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:std::function<Ret (Params...)>
build_id	chaiscript/language/chaiscript_engine.hpp	/^    static std::string build_id()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
build_match	chaiscript/language/chaiscript_parser.hpp	/^      void build_match(size_t t_match_start, std::string t_text = "") {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
build_param_list	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::vector<Boxed_Value> build_param_list(const std::vector<Boxed_Value> &params) const$/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:std::vector<Boxed_Value>
build_param_type_info	chaiscript/dispatchkit/proxy_functions.hpp	/^        static std::vector<Type_Info> build_param_type_info(const Const_Proxy_Function &t_f, $/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:std::vector<Type_Info>
build_param_type_list	chaiscript/dispatchkit/proxy_functions.hpp	/^        static std::vector<Type_Info> build_param_type_list(const Param_Types &t_types)$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:std::vector<Type_Info>
build_param_type_list	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        std::vector<Type_Info> build_param_type_list(Ret (*)(Params...))$/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:std::vector<Type_Info>
build_param_types	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          static std::vector<Type_Info> build_param_types($/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:std::vector<Type_Info>
build_tests_file_path	test-generation/shared.rb	/^def build_tests_file_path(test_path)$/;"	f
build_type_infos	chaiscript/dispatchkit/dispatchkit.hpp	/^        static std::vector<Type_Info> build_type_infos(const std::vector<Proxy_Function> &t_func/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:std::vector<Type_Info>
build_type_list	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          static std::vector<Type_Info> build_type_list(const std::vector<Type_Info> &tl)$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:std::vector<Type_Info>
build_union_tree	primitives/union-primitive.cpp	/^    Primitive build_union_tree(std::vector<Primitive>& children, int from, int to)$/;"	f	namespace:__anond3e0bd200110	typeref:typename:Primitive
bv	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Value bv;$/;"	m	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
cStringCaseEq	easylogging++.h	/^    static bool cStringCaseEq(const char* s1, const char* s2) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
cStringEq	easylogging++.h	/^    static inline bool cStringEq(const char* s1, const char* s2) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
calculate_arity	chaiscript/dispatchkit/dispatchkit.hpp	/^        static int calculate_arity(const std::vector<Proxy_Function> &t_funcs)$/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:int
call	chaiscript/dispatchkit/function_call_detail.hpp	/^          static Ret call(const std::vector<Const_Proxy_Function> &t_funcs, $/;"	f	struct:chaiscript::dispatch::detail::Function_Caller_Ret	typeref:typename:Ret
call	chaiscript/dispatchkit/function_call_detail.hpp	/^          static void call(const std::vector<Const_Proxy_Function> &t_funcs, $/;"	f	struct:chaiscript::dispatch::detail::Function_Caller_Ret	typeref:typename:void
call_depth	chaiscript/dispatchkit/dispatchkit.hpp	/^      int call_depth;$/;"	m	struct:chaiscript::detail::Stack_Holder	typeref:typename:int
call_exists	chaiscript/dispatchkit/dispatchkit.hpp	/^        Boxed_Value call_exists(const std::vector<Boxed_Value> &params) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Boxed_Value
call_func	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        Ret call_func(const chaiscript::dispatch::detail::Function_Signature<Ret (Params...)> &,/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:Ret
call_func	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        Ret call_func(const chaiscript::dispatch::detail::Function_Signature<Ret (Params...)> &s/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:Ret
call_function	chaiscript/dispatchkit/dispatchkit.hpp	/^        Boxed_Value call_function(const std::string &t_name, std::atomic_uint_fast32_t &t_loc, c/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Boxed_Value
call_match	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_Sta/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:bool
call_match	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_S/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:bool
call_match	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_S/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
call_match	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_Sta/;"	f	class:chaiscript::dispatch::Attribute_Access	typeref:typename:bool
call_match	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_Sta/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:bool
call_match	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_Sta/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:bool
call_match	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool call_match(const std::vector<Boxed_Value> &vals, const Type_Conversions_Sta/;"	f	class:chaiscript::dispatch::Proxy_Function_Impl_Base	typeref:typename:bool
call_member	chaiscript/dispatchkit/dispatchkit.hpp	/^        Boxed_Value call_member(const std::string &t_name, std::atomic_uint_fast32_t &t_loc, con/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Boxed_Value
call_params	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<std::vector<Boxed_Value>> call_params;$/;"	m	struct:chaiscript::detail::Stack_Holder	typeref:typename:std::vector<std::vector<Boxed_Value>>
call_stack	chaiscript/language/chaiscript_common.hpp	/^      std::vector<AST_NodePtr_Const> call_stack;$/;"	m	struct:chaiscript::exception::eval_error	typeref:typename:std::vector<AST_NodePtr_Const>
callback	easylogging++.h	/^    inline T* callback(const std::string& id, std::map<std::string, TPtr>* mapT) {$/;"	f	class:el::base::Storage	typeref:typename:T *
camera	raytracers/scene.h	/^        raytracer::Camera camera;$/;"	m	struct:raytracer::Scene	typeref:typename:raytracer::Camera
camera	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            auto camera = cameras::perspective(Point3D(0, 0, z), Point3D(0, 0, 0), Vector3D(0, 1/;"	v	typeref:typename:auto
cameras	cameras/camera.h	/^    namespace cameras$/;"	n	namespace:raytracer
cameras	cameras/displaceable-camera.h	/^    namespace cameras$/;"	n	namespace:raytracer
cameras	cameras/perspective-camera.h	/^    namespace cameras$/;"	n	namespace:raytracer
cartesian	math/vector.h	/^            static T cartesian(const Cartesian3D& cartesian)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
cartesian	math/vector.h	/^            static T cartesian(double x, double y)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
cartesian	math/vector.h	/^            static T cartesian(double x, double y, double z)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
cartesian2d	scripting/math-module.cpp	/^        Point2D cartesian2d(double x, double y) const                           { return Point2D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point2D	file:
cartesian2d	scripting/math-module.cpp	/^        Vector2D cartesian2d(double x, double y) const                          { return Vector2/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector2D	file:
cartesian3d	scripting/math-module.cpp	/^        Point3D cartesian3d(double x, double y, double z) const                 { return Point3D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point3D	file:
cartesian3d	scripting/math-module.cpp	/^        Vector3D cartesian3d(double x, double y, double z) const                { return Vector3/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector3D	file:
cartesian_coordinates	tests/primitives/disk/disk-tests.cpp	/^                        Cartesian3D cartesian_coordinates = convert_coordinates<Cartesian3D>(cyl/;"	v	typeref:typename:Cartesian3D
cast	chaiscript/dispatchkit/any.hpp	/^          ToType &cast() const$/;"	f	class:chaiscript::detail::Any	typeref:typename:ToType &
cast	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        static Result_Type cast(const Boxed_Value &ob, const Type_Conversions_State *)$/;"	f	struct:chaiscript::detail::Cast_Helper_Inner	typeref:typename:Result_Type
cast	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^        static Result_Type cast(const Boxed_Value &ob, const Type_Conversions_State *t_conversio/;"	f	struct:chaiscript::detail::Cast_Helper	typeref:typename:Result_Type
cast	chaiscript/dispatchkit/boxed_number.hpp	/^        static Result_Type cast(const Boxed_Value &ob, const Type_Conversions_State *)$/;"	f	struct:chaiscript::detail::Cast_Helper	typeref:typename:Result_Type
cast	chaiscript/dispatchkit/function_call.hpp	/^        static Result_Type cast(const Boxed_Value &ob, const Type_Conversions_State *t_conversio/;"	f	struct:chaiscript::detail::Cast_Helper	typeref:typename:Result_Type
cast	chaiscript/dispatchkit/type_conversions.hpp	/^          static Boxed_Value cast(const Boxed_Value &t_from)$/;"	f	class:chaiscript::detail::Dynamic_Caster	typeref:typename:Boxed_Value
cast	chaiscript/dispatchkit/type_conversions.hpp	/^          static Boxed_Value cast(const Boxed_Value &t_from)$/;"	f	class:chaiscript::detail::Static_Caster	typeref:typename:Boxed_Value
castFromInt	easylogging++.h	/^    static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType
castFromInt	easylogging++.h	/^    static Level castFromInt(base::type::EnumType l) {$/;"	f	class:el::LevelHelper	typeref:typename:Level
castToInt	easylogging++.h	/^    static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:base::type::EnumType
castToInt	easylogging++.h	/^    static base::type::EnumType castToInt(Level level) {$/;"	f	class:el::LevelHelper	typeref:typename:base::type::EnumType
cast_lightray_to	lights/omnidirectional-point-light.cpp	/^        LightRay cast_lightray_to(const math::Point3D& p) const override$/;"	f	class:__anon4ff1f30d0110::OmnidirectionalPointLight	typeref:typename:LightRay	file:
cast_symbol	chaiscript/language/chaiscript_engine.hpp	/^          static T cast_symbol(void *p)$/;"	f	struct:chaiscript::detail::Loadable_Module::DLSym	typeref:typename:T
cast_union	chaiscript/language/chaiscript_engine.hpp	/^            union cast_union$/;"	u	function:chaiscript::detail::Loadable_Module::DLSym::cast_symbol
cast_union	chaiscript/language/chaiscript_engine.hpp	/^      union cast_union$/;"	u	function:chaiscript::ChaiScript::ChaiScript
cast_vector_elements	scripting/scripting-util.h	/^            std::vector<T> cast_vector_elements(const std::vector<chaiscript::Boxed_Value>& boxe/;"	f	namespace:raytracer::scripting::util	typeref:typename:std::vector<T>
cbegin	easylogging++.h	/^    virtual inline const_iterator cbegin(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator
cend	easylogging++.h	/^    virtual inline const_iterator cend(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:const_iterator
center	math/box.cpp	/^Point3D math::Box::center() const$/;"	f	class:math::Box	typeref:typename:Point3D
center	math/interval.h	/^        T center() const$/;"	f	struct:math::Interval	typeref:typename:T
center	math/rectangle2d.cpp	/^Point2D math::Rectangle2D::center() const$/;"	f	class:math::Rectangle2D	typeref:typename:Point2D
chaiscript	chaiscript/chaiscript_defines.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/chaiscript_stdlib.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/chaiscript_threading.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/any.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/bind_first.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/bootstrap.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/bootstrap_stl.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/boxed_cast.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/boxed_cast.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/boxed_number.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/boxed_number.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/boxed_number.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/boxed_value.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/callable_traits.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/dispatchkit.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/dispatchkit.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/dynamic_object.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/dynamic_object.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/exception_specification.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/exception_specification.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/function_call.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/function_call.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/function_call_detail.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/handle_return.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/handle_return.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/operators.hpp	/^namespace chaiscript $/;"	n
chaiscript	chaiscript/dispatchkit/proxy_constructors.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/proxy_functions.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/proxy_functions.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/register_function.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/type_conversions.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/dispatchkit/type_info.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/language/chaiscript_algebraic.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/language/chaiscript_common.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/language/chaiscript_common.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/language/chaiscript_engine.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/language/chaiscript_eval.hpp	/^namespace chaiscript {$/;"	n
chaiscript	chaiscript/language/chaiscript_eval.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/language/chaiscript_parser.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/utility/json_wrap.hpp	/^namespace chaiscript$/;"	n
chaiscript	chaiscript/utility/utility.hpp	/^namespace chaiscript $/;"	n
charPtrVal	easylogging++.h	/^static inline const char* charPtrVal(const char* pointer) {$/;"	f	namespace:el::base::utils	typeref:typename:const char *
char_in_alphabet	chaiscript/language/chaiscript_parser.hpp	/^      bool char_in_alphabet(char c, detail::Alphabet a) const { return m_alphabet[a][static_cast/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
char_t	easylogging++.h	/^typedef wchar_t char_t;$/;"	t	namespace:el::base::type	typeref:typename:wchar_t
char_type	chaiscript/language/chaiscript_parser.hpp	/^        typedef typename string_type::value_type char_type;$/;"	t	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:string_type::value_type
chars_ready	util/base64.cpp	/^unsigned Base64::chars_ready() const$/;"	f	class:Base64	typeref:typename:unsigned
check_divide_by_zero	chaiscript/dispatchkit/boxed_number.hpp	/^      static inline void check_divide_by_zero(T t, typename std::enable_if<std::is_integral<T>::/;"	f	class:chaiscript::Boxed_Number	typeref:typename:void
check_divide_by_zero	chaiscript/dispatchkit/boxed_number.hpp	/^      static inline void check_divide_by_zero(T, typename std::enable_if<std::is_floating_point</;"	f	class:chaiscript::Boxed_Number	typeref:typename:void
children	chaiscript/language/chaiscript_common.hpp	/^      std::vector<AST_NodePtr> children;$/;"	m	struct:chaiscript::AST_Node	typeref:typename:std::vector<AST_NodePtr>
clamp	imaging/color.cpp	/^    double clamp(double x)$/;"	f	namespace:__anon983fa7a00110	typeref:typename:double
clamp	imaging/color.cpp	/^void imaging::Color::clamp()$/;"	f	class:imaging::Color	typeref:typename:void
clamped	imaging/color.cpp	/^Color imaging::Color::clamped() const$/;"	f	class:imaging::Color	typeref:typename:Color
clean	easylogging++.h	/^    inline bool clean() {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:bool
cleanup	performance/performance.cpp	/^void performance::cleanup()$/;"	f	class:performance	typeref:typename:void
clear	easylogging++.h	/^    inline void clear(void) {$/;"	f	class:el::Configurations	typeref:typename:void
clear	imaging/bitmap.cpp	/^void imaging::Bitmap::clear(const Color& Color)$/;"	f	class:imaging::Bitmap	typeref:typename:void
clearBuff	easylogging++.h	/^    static inline char* clearBuff(char buff[], std::size_t lim) {$/;"	f	class:el::base::utils::Str	typeref:typename:char *
clearModules	easylogging++.h	/^    inline void clearModules(void) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
clear_match_stack	chaiscript/language/chaiscript_parser.hpp	/^      void clear_match_stack() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
clone	chaiscript/dispatchkit/any.hpp	/^            std::unique_ptr<Data> clone() const CHAISCRIPT_OVERRIDE$/;"	f	struct:chaiscript::detail::Any::Data_Impl	typeref:typename:std::unique_ptr<Data>
clone_attrs	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value &clone_attrs(const Boxed_Value &t_obj)$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:Boxed_Value &
close	util/base64.cpp	/^void Base64::close()$/;"	f	class:Base64	typeref:typename:void
close_enough	animation/duration.h	/^        bool close_enough(const animation::Duration& other) const$/;"	f	struct:math::approximately	typeref:typename:bool
close_enough	animation/time-stamp.h	/^        bool close_enough(const animation::TimeStamp& other) const$/;"	f	struct:math::approximately	typeref:typename:bool
close_enough	imaging/color.h	/^        bool close_enough(const imaging::Color& other) const$/;"	f	struct:math::approximately	typeref:typename:bool
close_enough	math/angle.h	/^        bool close_enough(const Angle& other) const$/;"	f	struct:math::approximately	typeref:typename:bool
close_enough	math/approx.h	/^        bool close_enough(double other) const$/;"	f	struct:math::approximately	typeref:typename:bool
close_enough	math/ray.h	/^        bool close_enough(const math::Ray& other) const$/;"	f	struct:math::approximately	typeref:typename:bool
col	chaiscript/language/chaiscript_parser.hpp	/^        int col;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:int
color	lights/light-ray.h	/^        imaging::Color color;$/;"	m	struct:raytracer::LightRay	typeref:typename:imaging::Color
color	raytracers/trace-result.h	/^        imaging::Color color;$/;"	m	struct:raytracer::TraceResult	typeref:typename:imaging::Color
color	tests/raytracers/v1/raytracer-v1-tests.cpp	/^    for (auto& color : colors)$/;"	v	typeref:typename:auto &
color_mapping	imaging/color-mapper.h	/^    namespace color_mapping$/;"	n	namespace:imaging
colors	imaging/color.h	/^    namespace colors$/;"	n	namespace:imaging
colors	tests/raytracers/v1/raytracer-v1-tests.cpp	/^    std::vector<Color> colors = { colors::white(), colors::red(), colors::green() };$/;"	v	typeref:typename:std::vector<Color>
column	chaiscript/language/chaiscript_common.hpp	/^    int column;$/;"	m	struct:chaiscript::File_Position	typeref:typename:int
commandLineArgs	easylogging++.h	/^    inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	class:el::base::Storage	typeref:typename:const base::utils::CommandLineArgs *
common_type	chaiscript/dispatchkit/boxed_number.hpp	/^        typedef typename std::common_type<LHS, RHS>::type common_type;$/;"	t	function:chaiscript::Boxed_Number::go	typeref:typename:std::common_type<LHS,RHS>::type
compare_first_type	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual bool compare_first_type(const Boxed_Value &bv, const Type_Conversions_State &t/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
compare_first_type	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool compare_first_type(const Boxed_Value &bv, const Type_Conversions_State &t_c/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
compare_type_to_param	chaiscript/dispatchkit/proxy_functions.hpp	/^        static bool compare_type_to_param(const Type_Info &ti, const Boxed_Value &bv, const Type/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
compare_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        static bool compare_types(const std::vector<Type_Info> &tis, const std::vector<Boxed_Val/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
compare_types_cast	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        bool compare_types_cast(Indexes<I...>, Ret (*)(Params...),$/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:bool
compare_types_cast	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        bool compare_types_cast(Ret (*)(Params...),$/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:bool
compare_types_cast	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        bool compare_types_cast(Ret (*f)(Params...),$/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:bool
compare_types_with_cast	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool compare_types_with_cast(const std::vector<Boxed_Value> &vals, const Type_Co/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:bool
compare_types_with_cast	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool compare_types_with_cast(const std::vector<Boxed_Value> &vals, const Type_Co/;"	f	class:chaiscript::dispatch::Proxy_Function_Callable_Impl	typeref:typename:bool
compiler_id	chaiscript/language/chaiscript_engine.hpp	/^    static std::string compiler_id()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
compiler_name	chaiscript/chaiscript_defines.hpp	/^  static const char *compiler_name = CHAISCRIPT_COMPILER_NAME;$/;"	v	namespace:chaiscript	typeref:typename:const char *
compiler_name	chaiscript/language/chaiscript_engine.hpp	/^    static std::string compiler_name()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
compiler_version	chaiscript/chaiscript_defines.hpp	/^  static const char *compiler_version = CHAISCRIPT_COMPILER_VERSION;$/;"	v	namespace:chaiscript	typeref:typename:const char *
compiler_version	chaiscript/language/chaiscript_engine.hpp	/^    static std::string compiler_version()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
compose	math/function.h	/^    Function<R2(Ts...)> compose(const Function<R1(Ts...)>& f, const Function<R2(R1)>& g)$/;"	f	namespace:math	typeref:typename:Function<R2 (Ts...)>
composite	materials/composition-material.cpp	/^Material raytracer::materials::composite(math::Function<Material(const math::Point2D&)> function/;"	f	class:raytracer::materials	typeref:typename:Material
composite	materials/composition-material.cpp	/^Material raytracer::materials::composite(math::Function<Material(const math::Point3D&)> function/;"	f	class:raytracer::materials	typeref:typename:Material
compute_normal_at	primitives/sphere-primitive.cpp	/^        Vector3D compute_normal_at(const Ray& ray, const Point3D& position) const$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:Vector3D	file:
compute_uv_from_xyz	primitives/sphere-primitive.cpp	/^        Point2D compute_uv_from_xyz(const Point3D& p) const$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:Point2D	file:
configurationFile	easylogging++.h	/^    inline const std::string& configurationFile(void) const {$/;"	f	class:el::Configurations	typeref:typename:const std::string &
configurationType	easylogging++.h	/^    inline ConfigurationType configurationType(void) const {$/;"	f	class:el::Configuration	typeref:typename:ConfigurationType
configurations	easylogging++.h	/^    const Configurations* configurations(void) const {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const Configurations *
configurations	easylogging++.h	/^    inline Configurations* configurations(void) {$/;"	f	class:el::Logger	typeref:typename:Configurations *
configure	easylogging++.h	/^    void configure(const Configurations& configurations) {$/;"	f	class:el::Logger	typeref:typename:void
configure	logging.cpp	/^void logging::configure()$/;"	f	class:logging	typeref:typename:INITIALIZE_EASYLOGGINGPP void
const_binary_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value const_binary_go(Operators::Opers t_oper, const T &t, const T &u) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
const_binary_int_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value const_binary_int_go(Operators::Opers t_oper, const T &t, const T &u) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
const_elem_access	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef const typename MapType::mapped_type &(MapType::*const_elem_access)(const typen/;"	t	function:chaiscript::bootstrap::standard_library::map_type	typeref:typename:const typename MapType::mapped_type & (MapType::*)(const typename MapType::key_type &)const
const_flag	chaiscript/language/chaiscript_algebraic.hpp	/^      const_flag,$/;"	e	enum:chaiscript::Operators::Opers
const_front_ptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename ContainerType::const_reference (ContainerType::*const_front_ptr)() co/;"	t	function:chaiscript::bootstrap::standard_library::front_insertion_sequence_type	typeref:typename:ContainerType::const_reference (ContainerType::*)()const
const_int_flag	chaiscript/language/chaiscript_algebraic.hpp	/^      const_int_flag,$/;"	e	enum:chaiscript::Operators::Opers
const_iterator	easylogging++.h	/^    typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::base::utils::AbstractRegistry	typeref:typename:Container::const_iterator
const_iterator	easylogging++.h	/^    typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::base::workarounds::IterableContainer	typeref:typename:Container::const_iterator
const_iterator	easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::const_iterator
const_iterator	easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::const_iterator
const_reference_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename std::iterator_traits<typename Container::const_iterator>::reference c/;"	t	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:std::iterator_traits<typename Container::const_iterator>::reference
const_unary_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value const_unary_go(Operators::Opers t_oper, const T &t)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
const_unary_int_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value const_unary_int_go(Operators::Opers t_oper, const T &t) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
const_var	chaiscript/dispatchkit/boxed_value.hpp	/^    Boxed_Value const_var(const T &t)$/;"	f	namespace:chaiscript	typeref:typename:Boxed_Value
const_var	chaiscript/dispatchkit/boxed_value.hpp	/^  inline Boxed_Value const_var(bool b) {$/;"	f	namespace:chaiscript	typeref:typename:Boxed_Value
const_var_impl	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value const_var_impl(T *t)$/;"	f	namespace:chaiscript::detail	typeref:typename:Boxed_Value
const_var_impl	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value const_var_impl(const T &t)$/;"	f	namespace:chaiscript::detail	typeref:typename:Boxed_Value
const_var_impl	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value const_var_impl(const std::reference_wrapper<T> &t)$/;"	f	namespace:chaiscript::detail	typeref:typename:Boxed_Value
const_var_impl	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value const_var_impl(const std::shared_ptr<T> &t)$/;"	f	namespace:chaiscript::detail	typeref:typename:Boxed_Value
constant	math/functions/constant.h	/^        math::Function<R(T)> constant(R value)$/;"	f	namespace:math::functions	typeref:typename:math::Function<R (T)>
constfrontptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename VectorType::const_reference (VectorType::*constfrontptr)() const;$/;"	t	function:chaiscript::bootstrap::standard_library::vector_type	typeref:typename:VectorType::const_reference (VectorType::*)()const
construct_pod	chaiscript/dispatchkit/bootstrap.hpp	/^      std::shared_ptr<P1> construct_pod(const Boxed_Number &v)$/;"	f	namespace:chaiscript::bootstrap::detail	typeref:typename:std::shared_ptr<P1>
construct_pod	chaiscript/dispatchkit/bootstrap.hpp	/^    ModulePtr construct_pod(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:ModulePtr
constructor	chaiscript/dispatchkit/proxy_constructors.hpp	/^    Proxy_Function constructor()$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
consts	easylogging++.h	/^namespace consts {$/;"	n	namespace:el::base
consume	pipeline/animation-processor.cpp	/^        void consume(animation::Animation<std::shared_ptr<Scene>> animation) override$/;"	f	class:__anon103f23280110::AnimationProducer	typeref:typename:void	file:
consume	pipeline/base64-processor.cpp	/^        void consume(std::shared_ptr<std::vector<uint8_t>> buffer) override$/;"	f	class:__anon63dcdf0d0110::Base64Processor	typeref:typename:void	file:
consume	pipeline/null-consumer.h	/^                void consume(T) override$/;"	f	class:raytracer::pipeline::_private_::NullConsumer	typeref:typename:void
consume	pipeline/renderer-processor.cpp	/^        void consume(std::shared_ptr<Scene> scene) override$/;"	f	class:__anon2af506bf0110::RendererProcessor	typeref:typename:void	file:
consume	pipeline/text-writer-consumer.cpp	/^        void consume(std::string string) override$/;"	f	class:__anon324c0a430110::TextWriter	typeref:typename:void	file:
consume	pipeline/wif-consumer.cpp	/^        void consume(std::shared_ptr<imaging::Bitmap> bitmap) override$/;"	f	class:__anon4cc5e2fa0110::Wif	typeref:typename:void	file:
consume	pipeline/wif-processor.cpp	/^        void consume(std::shared_ptr<imaging::Bitmap> frame) override$/;"	f	class:__anon3a087a4e0110::WifProcessor	typeref:typename:void	file:
consume_ws	chaiscript/utility/json.hpp	/^    void consume_ws( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:void
container_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef Container container_type;$/;"	t	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:Container
container_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef const Container container_type;$/;"	t	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:const Container
container_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr container_type(const std::string &\/*type*\/, ModulePtr m = std::make_shared<M/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
contains	easylogging++.h	/^    static inline bool contains(const char* str, char c) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
contains	math/box.cpp	/^bool math::Box::contains(const Point3D& p) const$/;"	f	class:math::Box	typeref:typename:bool
contains	math/interval.h	/^        constexpr bool contains(T x) const$/;"	f	struct:math::Interval	typeref:typename:bool
continueRunning	easylogging++.h	/^    bool continueRunning(void) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:bool
conversion_saves	chaiscript/dispatchkit/dispatchkit.hpp	/^        Type_Conversions::Conversion_Saves &conversion_saves() const {$/;"	f	class:chaiscript::detail::Dispatch_State	typeref:typename:Type_Conversions::Conversion_Saves &
conversion_saves	chaiscript/dispatchkit/type_conversions.hpp	/^      Conversion_Saves &conversion_saves() const {$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:Conversion_Saves &
conversions	chaiscript/dispatchkit/dispatchkit.hpp	/^        const Type_Conversions &conversions() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:const Type_Conversions &
conversions	chaiscript/dispatchkit/dispatchkit.hpp	/^        const Type_Conversions_State &conversions() const {$/;"	f	class:chaiscript::detail::Dispatch_State	typeref:typename:const Type_Conversions_State &
convert	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual Boxed_Value convert(const Boxed_Value &t_derived) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Dynamic_Conversion_Impl	typeref:typename:Boxed_Value
convert	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual Boxed_Value convert(const Boxed_Value &t_derived) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Static_Conversion_Impl	typeref:typename:Boxed_Value
convert	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual Boxed_Value convert(const Boxed_Value &t_from) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Type_Conversion_Impl	typeref:typename:Boxed_Value
convert	math/coordinate-systems.h	/^            static Cartesian2D convert(const Polar& polar)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Cartesian2D
convert	math/coordinate-systems.h	/^            static Cartesian3D convert(const CylindricalX& cyl)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Cartesian3D
convert	math/coordinate-systems.h	/^            static Cartesian3D convert(const CylindricalY& cyl)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Cartesian3D
convert	math/coordinate-systems.h	/^            static Cartesian3D convert(const CylindricalZ& cyl)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Cartesian3D
convert	math/coordinate-systems.h	/^            static Cartesian3D convert(const Spherical& spherical)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Cartesian3D
convert	math/coordinate-systems.h	/^            static CylindricalX convert(const Cartesian3D& c3d)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:CylindricalX
convert	math/coordinate-systems.h	/^            static CylindricalY convert(const Cartesian3D& c3d)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:CylindricalY
convert	math/coordinate-systems.h	/^            static CylindricalZ convert(const Cartesian3D& c3d)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:CylindricalZ
convert	math/coordinate-systems.h	/^            static Polar convert(const Cartesian2D& cartesian)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Polar
convert	math/coordinate-systems.h	/^            static Spherical convert(const Cartesian3D& cartesian)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:Spherical
convert	math/coordinate-systems.h	/^            static T convert(const T& x)$/;"	f	struct:math::_private_::CoordinateConverter	typeref:typename:T
convertAndAddToBuff	easylogging++.h	/^    static inline char* convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLi/;"	f	class:el::base::utils::Str	typeref:typename:char *
convertFromString	easylogging++.h	/^    static ConfigurationType convertFromString(const char* configStr) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:ConfigurationType
convertFromString	easylogging++.h	/^    static Level convertFromString(const char* levelStr) {$/;"	f	class:el::LevelHelper	typeref:typename:Level
convertToColoredOutput	easylogging++.h	/^    void convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	class:el::LogBuilder	typeref:typename:void
convertToString	easylogging++.h	/^    static const char* convertToString(ConfigurationType configurationType) {$/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:const char *
convertToString	easylogging++.h	/^    static const char* convertToString(Level level) {$/;"	f	class:el::LevelHelper	typeref:typename:const char *
convert_coordinates	math/coordinate-systems.h	/^    std::enable_if_t<is_2d_coordinate_system<FROM>::value && is_2d_coordinate_system<TO>::value,/;"	f	namespace:math	typeref:typename:std::enable_if_t<is_2d_coordinate_system<FROM>::value && is_2d_coordinate_system<TO>::value,TO>
convert_coordinates	math/coordinate-systems.h	/^    std::enable_if_t<is_3d_coordinate_system<FROM>::value && is_3d_coordinate_system<TO>::value,/;"	f	namespace:math	typeref:typename:std::enable_if_t<is_3d_coordinate_system<FROM>::value && is_3d_coordinate_system<TO>::value,TO>
convert_down	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual Boxed_Value convert_down(const Boxed_Value &) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Type_Conversion_Impl	typeref:typename:Boxed_Value
convert_down	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual Boxed_Value convert_down(const Boxed_Value &t_base) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Dynamic_Conversion_Impl	typeref:typename:Boxed_Value
convert_down	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual Boxed_Value convert_down(const Boxed_Value &t_base) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::Static_Conversion_Impl	typeref:typename:Boxed_Value
convert_frame	imaging/wif-format.cpp	/^void imaging::wif::convert_frame(std::vector<uint8_t>& buffer, const Bitmap& bitmap)$/;"	f	class:imaging::wif	typeref:typename:void
convertable_type	chaiscript/dispatchkit/type_conversions.hpp	/^        bool convertable_type() const$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:bool
converts	chaiscript/dispatchkit/type_conversions.hpp	/^        bool converts() const$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:bool
converts	chaiscript/dispatchkit/type_conversions.hpp	/^      bool converts(const Type_Info &to, const Type_Info &from) const$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:bool
coord	math/point.h	/^        double coord() const$/;"	f	class:math::Point	typeref:typename:double
coord	math/point.h	/^        double& coord()$/;"	f	class:math::Point	typeref:typename:double &
coord	math/vector.h	/^        double coord() const$/;"	f	class:math::Vector	typeref:typename:double
coord	math/vector.h	/^        double& coord()$/;"	f	class:math::Vector	typeref:typename:double &
coordinate_system	math/transformation-matrices.cpp	/^Matrix4x4 math::transformation_matrices::coordinate_system(const Point3D& origin, const Vector3D/;"	f	class:math::transformation_matrices	typeref:typename:Matrix4x4
copy_attrs	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value &copy_attrs(const Boxed_Value &t_obj)$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:Boxed_Value &
copy_constructor	chaiscript/dispatchkit/bootstrap.hpp	/^    ModulePtr copy_constructor(const std::string &type, ModulePtr m = std::make_shared<Module>()/;"	f	namespace:chaiscript::bootstrap	typeref:typename:ModulePtr
corner	math/box.h	/^        Point3D corner() const$/;"	f	class:math::Box	typeref:typename:Point3D
cos	math/angle.cpp	/^double math::cos(Angle a)$/;"	f	class:math	typeref:typename:double
cos_of_angle_between	math/vector.h	/^    double cos_of_angle_between(const Vector<N>& u, const Vector<N>& v)$/;"	f	namespace:math	typeref:typename:double
count	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        size_t count(const T &t_target, const typename T::key_type &t_key)$/;"	f	namespace:chaiscript::bootstrap::standard_library::detail	typeref:typename:size_t
count_fun_calls	chaiscript/language/chaiscript_parser.hpp	/^      static std::map<std::string, int> count_fun_calls(const AST_NodePtr &p, bool in_loop) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::map<std::string,int>
count_nodes	chaiscript/language/chaiscript_parser.hpp	/^      static int count_nodes(const AST_NodePtr &p)$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:int
counters	performance/performance.cpp	/^    std::vector<performance::_private_::CounterImplementation*> counters;$/;"	v	namespace:__anonee6446090110	typeref:typename:std::vector<performance::_private_::CounterImplementation * >
createPath	easylogging++.h	/^    static bool createPath(const std::string& path) {$/;"	f	class:el::base::utils::File	typeref:typename:bool
create_animation_module	scripting/animation-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_animation_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_camera	demos/basic-sample.cpp	/^        raytracer::Camera create_camera(TimeStamp) override$/;"	f	class:__anonec0ba32e0110::MeshDemo	typeref:typename:raytracer::Camera	file:
create_cameras_module	scripting/cameras-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_cameras_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_counter	performance/performance.cpp	/^Counter performance::create_counter(const std::string& name)$/;"	f	class:performance	typeref:typename:Counter
create_imaging_module	scripting/imaging-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_imaging_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_light_sources	demos/basic-sample.cpp	/^        std::vector<raytracer::LightSource> create_light_sources(TimeStamp now) override$/;"	f	class:__anonec0ba32e0110::MeshDemo	typeref:typename:std::vector<raytracer::LightSource>	file:
create_lights_module	scripting/lights-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_lights_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_materials_module	scripting/materials-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_materials_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_math_module	scripting/math-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_math_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_modules	scripting/scripting.cpp	/^        ModulePtr create_modules()$/;"	f	namespace:raytracer::scripting	typeref:typename:ModulePtr
create_pipeline_module	scripting/pipeline-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_pipeline_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_point2d	scripting/math-module.cpp	/^    Point2D create_point2d(double x, double y)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:Point2D
create_point3d	scripting/math-module.cpp	/^    Point3D create_point3d(double x, double y, double z)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:Point3D
create_primitives_module	scripting/primitives-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_primitives_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_ray_tracer	demos/demo.cpp	/^RayTracer demos::Demo::create_ray_tracer()$/;"	f	class:demos::Demo	typeref:typename:RayTracer
create_raytracing_module	scripting/raytracing-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_raytracing_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_rectangle3d	scripting/math-module.cpp	/^    Rectangle3D create_rectangle3d(const Point3D& origin, const Vector3D& x_axis, const Vector3D/;"	f	namespace:__anon63c0fd550110	typeref:typename:Rectangle3D
create_renderer	demos/demo.cpp	/^Renderer demos::Demo::create_renderer()$/;"	f	class:demos::Demo	typeref:typename:Renderer
create_rendering_module	scripting/rendering-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_rendering_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_root	demos/basic-sample.cpp	/^        raytracer::Primitive create_root(TimeStamp now) override$/;"	f	class:__anonec0ba32e0110::MeshDemo	typeref:typename:raytracer::Primitive	file:
create_sampler	demos/demo.cpp	/^Sampler demos::Demo::create_sampler()$/;"	f	class:demos::Demo	typeref:typename:Sampler
create_samplers_module	scripting/samplers-module.cpp	/^ModulePtr raytracer::scripting::_private_::create_samplers_module()$/;"	f	class:raytracer::scripting::_private_	typeref:typename:ModulePtr
create_scene	scripting/raytracing-module.cpp	/^    std::shared_ptr<Scene> create_scene(Camera camera, Primitive root, const std::vector<Boxed_V/;"	f	namespace:__anon5f59be3f0110	typeref:typename:std::shared_ptr<Scene>
create_scene_animation	demos/demo.cpp	/^Animation<std::shared_ptr<Scene>> demos::Demo::create_scene_animation()$/;"	f	class:demos::Demo	typeref:typename:Animation<std::shared_ptr<Scene>>
create_scheduler	demos/demo.cpp	/^tasks::TaskScheduler demos::Demo::create_scheduler()$/;"	f	class:demos::Demo	typeref:typename:tasks::TaskScheduler
create_transformation	cameras/camera.cpp	/^Matrix4x4 raytracer::cameras::_private_::create_transformation(const Point3D& eye, const Point3D/;"	f	class:raytracer::cameras::_private_	typeref:typename:Matrix4x4
create_vector2d	scripting/math-module.cpp	/^    Vector2D create_vector2d(double x, double y)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:Vector2D
create_vector3d	scripting/math-module.cpp	/^    Vector3D create_vector3d(double x, double y, double z)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:Vector3D
cross	math/vector.h	/^        Vector<3> cross(const Vector<3>& v) const$/;"	f	class:math::Vector	typeref:typename:Vector<3>
currentHost	easylogging++.h	/^    static inline std::string currentHost(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
currentUser	easylogging++.h	/^    static inline std::string currentUser(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
customFormatSpecifiers	easylogging++.h	/^    const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	class:el::base::Storage	typeref:typename:const std::vector<CustomFormatSpecifier> *
cv	easylogging++.h	/^    std::condition_variable cv;$/;"	m	class:el::base::AsyncDispatchWorker	typeref:typename:std::condition_variable
cyan	imaging/color.h	/^        constexpr Color cyan()    { return Color{ 0, 1, 1 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
cylindrical_coordinates	tests/primitives/disk/disk-tests.cpp	/^                        CylindricalY cylindrical_coordinates{ radius, angle, -y };$/;"	v	typeref:typename:CylindricalY
cylindrical_coordinates	tests/primitives/disk/disk-tests.cpp	/^                        CylindricalY cylindrical_coordinates{ radius, angle, y };$/;"	v	typeref:typename:CylindricalY
cylindrical_x	math/vector.h	/^            static T cylindrical_x(double radius, math::Angle azimuth, double x)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
cylindrical_x	scripting/math-module.cpp	/^        Point3D cylindrical_x(double radius, Angle azimuth, double x) const     { return Point3D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point3D	file:
cylindrical_x	scripting/math-module.cpp	/^        Vector3D cylindrical_x(double radius, Angle azimuth, double x) const    { return Vector3/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector3D	file:
cylindrical_y	math/vector.h	/^            static T cylindrical_y(double radius, math::Angle azimuth, double y)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
cylindrical_y	scripting/math-module.cpp	/^        Point3D cylindrical_y(double radius, Angle azimuth, double y) const     { return Point3D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point3D	file:
cylindrical_y	scripting/math-module.cpp	/^        Vector3D cylindrical_y(double radius, Angle azimuth, double y) const    { return Vector3/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector3D	file:
cylindrical_z	math/vector.h	/^            static T cylindrical_z(double radius, math::Angle azimuth, double z)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
cylindrical_z	scripting/math-module.cpp	/^        Point3D cylindrical_z(double radius, Angle azimuth, double z) const     { return Point3D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point3D	file:
cylindrical_z	scripting/math-module.cpp	/^        Vector3D cylindrical_z(double radius, Angle azimuth, double z) const    { return Vector3/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector3D	file:
d	Makefile	/^d: debug_build$/;"	t
data	chaiscript/dispatchkit/any.hpp	/^            virtual void *data() CHAISCRIPT_OVERRIDE$/;"	f	struct:chaiscript::detail::Any::Data_Impl	typeref:typename:void *
data	data-structures/grid.h	/^namespace data$/;"	n
data	easylogging++.h	/^    inline LogDispatchData* data(void) { return &m_dispatchData; }$/;"	f	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData *
dateTimeFormat	easylogging++.h	/^    inline const std::string& dateTimeFormat(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:const std::string &
debug_build	Makefile	/^debug_build:$/;"	t
debug_build	chaiscript/chaiscript_defines.hpp	/^  static const bool debug_build = CHAISCRIPT_DEBUG;$/;"	v	namespace:chaiscript	typeref:typename:const bool
debug_build	chaiscript/language/chaiscript_engine.hpp	/^    static bool debug_build()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:bool
debug_no_scripting_build	Makefile	/^debug_no_scripting_build:$/;"	t
debug_print	chaiscript/language/chaiscript_parser.hpp	/^      void debug_print(AST_NodePtr t, std::string prepend = "") const {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
decorate	primitives/decorator-primitive.cpp	/^Primitive raytracer::primitives::decorate(Material material, Primitive child)$/;"	f	class:raytracer::primitives	typeref:typename:Primitive
deepCopy	easylogging++.h	/^    virtual inline void deepCopy(const AbstractRegistry<T_Ptr, std::map<T_Key, T_Ptr*>>& sr) ELP/;"	f	class:el::base::utils::Registry	typeref:typename:void
deepCopy	easylogging++.h	/^    virtual inline void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
defaultConfigurations	easylogging++.h	/^    inline Configurations* defaultConfigurations(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:Configurations *
defaultPreRollOutCallback	easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	namespace:el::base	typeref:typename:void
default_constructible_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr default_constructible_type(const std::string &type, ModulePtr m = std::make_sh/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
degrees	math/angle.cpp	/^Angle math::Angle::degrees(long double x)$/;"	f	class:math::Angle	typeref:typename:Angle
degrees	math/angle.cpp	/^double math::Angle::degrees() const$/;"	f	class:math::Angle	typeref:typename:double
demos	demos/basic-sample.h	/^namespace demos$/;"	n
demos	demos/demo.h	/^namespace demos$/;"	n
detail	chaiscript/chaiscript_threading.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/any.hpp	/^  namespace detail {$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/bind_first.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/bootstrap.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::bootstrap
detail	chaiscript/dispatchkit/bootstrap_stl.hpp	/^      namespace detail {$/;"	n	namespace:chaiscript::bootstrap::standard_library
detail	chaiscript/dispatchkit/boxed_cast.hpp	/^namespace detail {$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/boxed_number.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/boxed_value.hpp	/^  namespace detail {$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/callable_traits.hpp	/^    namespace detail {$/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/dispatchkit.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/exception_specification.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/function_call.hpp	/^  namespace detail{$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/function_call.hpp	/^namespace detail {$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/function_call_detail.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/handle_return.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/operators.hpp	/^      namespace detail$/;"	n	namespace:chaiscript::bootstrap::operators
detail	chaiscript/dispatchkit/proxy_constructors.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/proxy_functions.hpp	/^    namespace detail $/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::dispatch
detail	chaiscript/dispatchkit/type_conversions.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/dispatchkit/type_info.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/language/chaiscript_common.hpp	/^      std::string detail;$/;"	m	struct:chaiscript::exception::eval_error	typeref:typename:std::string
detail	chaiscript/language/chaiscript_common.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::eval
detail	chaiscript/language/chaiscript_engine.hpp	/^  namespace detail$/;"	n	namespace:chaiscript
detail	chaiscript/language/chaiscript_eval.hpp	/^    namespace detail$/;"	n	namespace:chaiscript::eval
detail	chaiscript/language/chaiscript_parser.hpp	/^    namespace detail $/;"	n	namespace:chaiscript::parser
detail	easylogging++.h	/^        const char* detail;$/;"	m	struct:el::base::consts::__anoncd3bcdca1108	typeref:typename:const char *
difference	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number difference(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
difference	chaiscript/language/chaiscript_algebraic.hpp	/^      sum, quotient, product, difference, unary_plus, unary_minus, $/;"	e	enum:chaiscript::Operators::Opers
diffuse	materials/material-properties.h	/^        const imaging::Color diffuse;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const imaging::Color
direction	math/ray.h	/^        Vector3D direction;$/;"	m	struct:math::Ray	typeref:typename:Vector3D
disk	tests/primitives/disk/disk-tests.cpp	/^    auto disk = raytracer::primitives::disk();$/;"	v	typeref:typename:auto
dispatch	chaiscript/dispatchkit/callable_traits.hpp	/^  namespace dispatch {$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/dispatchkit.hpp	/^namespace dispatch {$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/dynamic_object.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/dynamic_object.hpp	/^namespace dispatch {$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^namespace dispatch {$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/function_call.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/function_call_detail.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/handle_return.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/proxy_constructors.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/proxy_functions.hpp	/^      Boxed_Value dispatch(const Funcs &funcs,$/;"	f	namespace:chaiscript::dispatch	typeref:typename:Boxed_Value
dispatch	chaiscript/dispatchkit/proxy_functions.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^  namespace dispatch$/;"	n	namespace:chaiscript
dispatch	easylogging++.h	/^    void dispatch(base::type::string_t&& logLine) {$/;"	f	class:el::base::DefaultLogDispatchCallback	typeref:typename:void
dispatch	easylogging++.h	/^    void dispatch(void) {$/;"	f	class:el::base::LogDispatcher	typeref:typename:void
dispatchAction	easylogging++.h	/^    inline base::DispatchAction dispatchAction(void) const { return m_dispatchAction; }$/;"	f	class:el::LogDispatchData	typeref:typename:base::DispatchAction
dispatch_error	chaiscript/dispatchkit/proxy_functions.hpp	/^        dispatch_error(std::vector<Boxed_Value> t_parameters, $/;"	f	class:chaiscript::exception::dispatch_error
dispatch_error	chaiscript/dispatchkit/proxy_functions.hpp	/^    class dispatch_error : public std::runtime_error$/;"	c	namespace:chaiscript::exception
dispatch_with_conversions	chaiscript/dispatchkit/proxy_functions.hpp	/^        Boxed_Value dispatch_with_conversions(InItr begin, const InItr &end, const std::vector<B/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:Boxed_Value
distance	math/plane.cpp	/^double math::distance(const Plane& plane, const Point3D& point)$/;"	f	class:math	typeref:typename:double
distance	math/point.h	/^    double distance(const Point<N>& p, const Point<N>& q)$/;"	f	namespace:math	typeref:typename:double
division	chaiscript/dispatchkit/operators.hpp	/^          auto division(L l, R r) -> decltype(( l \/ r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l/r))
division	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr division(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
dn	Makefile	/^dn: debug_no_scripting_build$/;"	t
do_call	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Conversio/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Convers/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Convers/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Conversio/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Conversio/;"	f	class:chaiscript::dispatch::Attribute_Access	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Conversio/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Conversio/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function_Impl	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual Boxed_Value do_call(const std::vector<Boxed_Value> &params, const Type_Conversio/;"	f	class:chaiscript::dispatch::Proxy_Function_Callable_Impl	typeref:typename:Boxed_Value
do_call	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^            static Ret do_call(const Callable &f,$/;"	f	struct:chaiscript::dispatch::detail::Call_Func	typeref:typename:Ret
do_call	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^          static Ret do_call(const Callable &f,$/;"	f	struct:chaiscript::dispatch::detail::Call_Func	typeref:typename:Ret
do_eval	chaiscript/language/chaiscript_engine.hpp	/^    Boxed_Value do_eval(const std::string &t_input, const std::string &t_filename = "__EVAL__", /;"	f	class:chaiscript::ChaiScript	typeref:typename:Boxed_Value
do_oper	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value do_oper(Operators::Opers t_oper, const Boxed_Value &t_lhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
do_oper	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value do_oper(Operators::Opers t_oper, const Boxed_Value &t_lhs, const Boxed_/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
do_oper	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value do_oper(const chaiscript::detail::Dispatch_State &t_ss, $/;"	f	struct:chaiscript::eval::Binary_Operator_AST_Node	typeref:typename:Boxed_Value
do_return_boxed_value_vector	chaiscript/dispatchkit/bootstrap.hpp	/^        static std::vector<Boxed_Value> do_return_boxed_value_vector(FunctionType f,$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:std::vector<Boxed_Value>
do_try	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^          static void do_try(const std::vector<Boxed_Value> &, size_t, const Type_Conversions_St/;"	f	struct:chaiscript::dispatch::detail::Try_Cast	typeref:typename:void
do_try	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^          static void do_try(const std::vector<Boxed_Value> &params, size_t generation, const Ty/;"	f	struct:chaiscript::dispatch::detail::Try_Cast	typeref:typename:void
dot	math/vector.h	/^        double dot(const Vector<N>& p) const$/;"	f	class:math::Vector	typeref:typename:double
double_animation	scripting/animation-module.cpp	/^        Animation<double> double_animation(double from, double to, Duration duration) const$/;"	f	struct:__anona5945eab0110::AnimationLibrary	typeref:typename:Animation<double>	file:
dump	chaiscript/utility/json.hpp	/^        string dump( int depth = 1, string tab = "  ") const {$/;"	f	class:json::JSON	typeref:typename:string
dump_function	chaiscript/dispatchkit/dispatchkit.hpp	/^        void dump_function(const std::pair<const std::string, Proxy_Function > &f) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
dump_object	chaiscript/dispatchkit/dispatchkit.hpp	/^        void dump_object(const Boxed_Value &o) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
dump_system	chaiscript/dispatchkit/dispatchkit.hpp	/^        void dump_system() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
dump_type	chaiscript/dispatchkit/dispatchkit.hpp	/^        void dump_type(const Type_Info &type) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
duration	animation/animation.h	/^        Duration duration() const$/;"	f	class:animation::Animation	typeref:typename:Duration
dx	tests/primitives/disk/disk-tests.cpp	/^                for (double dx = 0.1; dx < 10; dx *= 1.5)$/;"	v	typeref:typename:double
dx	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                for (double dx = -2; dx < 2; dx += 0.87)$/;"	v	typeref:typename:double
dx	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                for (double dx = -2; dx < 2; dx += 0.87)$/;"	v	typeref:typename:double
dx	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                for (double dx = -2; dx < 2; dx += 0.87)$/;"	v	typeref:typename:double
dx	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                for (double dx = -2; dx < 2; dx += 0.87)$/;"	v	typeref:typename:double
dy	tests/primitives/disk/disk-tests.cpp	/^                for (double dy = 0.1; dy < 5; dy += 0.7)$/;"	v	typeref:typename:double
dy	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                    for (double dy = -2; dy < 2; dy += .47)$/;"	v	typeref:typename:double
dy	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                    for (double dy = -2; dy < 2; dy += .47)$/;"	v	typeref:typename:double
dy	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                    for (double dy = -2; dy < 2; dy += .47)$/;"	v	typeref:typename:double
dy	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                    for (double dy = -2; dy < 2; dy += .47)$/;"	v	typeref:typename:double
dynamic_object_typename_match	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          bool dynamic_object_typename_match(const Boxed_Value &bv, const std::string &name,$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
dynamic_object_typename_match	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          bool dynamic_object_typename_match(const std::vector<Boxed_Value> &bvs, const std::str/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
dz	tests/primitives/disk/disk-tests.cpp	/^                    for (double dz = 0.1; dz < 10; dz *= 2.5)$/;"	v	typeref:typename:double
dz	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                        for (double dz = -2; dz < 2; dz += 61)$/;"	v	typeref:typename:double
dz	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                        for (double dz = -2; dz < 2; dz += 61)$/;"	v	typeref:typename:double
dz	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                        for (double dz = -2; dz < 2; dz += 61)$/;"	v	typeref:typename:double
dz	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                        for (double dz = -2; dz < 2; dz += 61)$/;"	v	typeref:typename:double
ease	animation/ease-animation.h	/^    Animation<T> ease(Animation<T> animation, math::functions::EasingFunction easing_function)$/;"	f	namespace:animation	typeref:typename:Animation<T>
eased	tests/animation/animation-tests.cpp	/^    auto eased = ease(animation, math::functions::easing::bounce(3, 3));$/;"	v	typeref:typename:auto
easing	math/functions/easing/linear-easing-function.h	/^        namespace easing$/;"	n	namespace:math::functions
easing	math/functions/easing/stretch-easing-function.h	/^        namespace easing$/;"	n	namespace:math::functions
el	easylogging++.h	/^namespace el {$/;"	n
elem_access	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename MapType::mapped_type &(MapType::*elem_access)(const typename MapType:/;"	t	function:chaiscript::bootstrap::standard_library::map_type	typeref:typename:MapType::mapped_type & (MapType::*)(const typename MapType::key_type &)
elevation	math/coordinate-systems.h	/^        math::Angle azimuth, elevation;$/;"	m	struct:math::Spherical	typeref:typename:math::Angle
emit_beep	app.cpp	/^    void emit_beep()$/;"	f	namespace:__anon3bd80ed70110	typeref:typename:void
empty	animation/animation.h	/^        static Animation<T> empty()$/;"	f	class:animation::Animation	typeref:typename:Animation<T>
empty	chaiscript/dispatchkit/any.hpp	/^        bool empty() const$/;"	f	class:chaiscript::detail::Any	typeref:typename:bool
empty	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          bool empty() const$/;"	f	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:bool
empty	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          bool empty() const$/;"	f	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:bool
empty	easylogging++.h	/^    inline bool empty(void) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:bool
empty	easylogging++.h	/^    inline bool empty(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:bool
empty	easylogging++.h	/^    virtual inline bool empty(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:bool
empty	math/box.cpp	/^Box math::Box::empty()$/;"	f	class:math::Box	typeref:typename:Box
empty	math/interval.h	/^        static constexpr Interval<T> empty()$/;"	f	struct:math::Interval	typeref:typename:Interval<T>
emptyQueue	easylogging++.h	/^    inline void emptyQueue() {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
empty_interval	test-generation/interval-tests.rb	/^    def empty_interval$/;"	f
enable	logging.cpp	/^void logging::enable(const std::string& channel)$/;"	f	class:logging	typeref:typename:void
enable_3dstudio_output	app.cpp	/^    void enable_3dstudio_output()$/;"	f	namespace:__anon3bd80ed70110	typeref:typename:void
enable_conversion_saves	chaiscript/dispatchkit/type_conversions.hpp	/^      static void enable_conversion_saves(Conversion_Saves &t_saves, bool t_val) $/;"	f	class:chaiscript::Type_Conversions	typeref:typename:void
enabled	chaiscript/dispatchkit/type_conversions.hpp	/^        bool enabled;$/;"	m	struct:chaiscript::Type_Conversions::Conversion_Saves	typeref:typename:bool
enabled	easylogging++.h	/^    inline bool enabled(Level level) const {$/;"	f	class:el::Logger	typeref:typename:bool
enabled	easylogging++.h	/^    inline bool enabled(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
enabled	easylogging++.h	/^    inline bool enabled(void) const { return m_enabled; }$/;"	f	class:el::Callback	typeref:typename:bool
end	chaiscript/language/chaiscript_common.hpp	/^      const File_Position &end() const {$/;"	f	struct:chaiscript::AST_Node	typeref:typename:const File_Position &
end	chaiscript/language/chaiscript_common.hpp	/^    File_Position end;$/;"	m	struct:chaiscript::Parse_Location	typeref:typename:File_Position
end	chaiscript/utility/json.hpp	/^                typename Container::const_iterator end() const { return object ? object->end() :/;"	f	class:json::JSON::JSONConstWrapper	typeref:typename:Container::const_iterator
end	chaiscript/utility/json.hpp	/^                typename Container::const_iterator end() const { return object ? object->end() :/;"	f	class:json::JSON::JSONWrapper	typeref:typename:Container::const_iterator
end	chaiscript/utility/json.hpp	/^                typename Container::iterator end() { return object ? object->end() : typename Co/;"	f	class:json::JSON::JSONWrapper	typeref:typename:Container::iterator
end	easylogging++.h	/^    iterator end(void) { return getContainer().end(); }$/;"	f	class:el::base::workarounds::IterableContainer	typeref:typename:iterator
end	easylogging++.h	/^    virtual inline iterator end(void) ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:iterator
end	pipeline/base64-processor.cpp	/^        void end() override$/;"	f	class:__anon63dcdf0d0110::Base64Processor	typeref:typename:void	file:
end	pipeline/consumer.h	/^            virtual void end() { }$/;"	f	class:raytracer::pipeline::Consumer	typeref:typename:void
end	pipeline/processor.h	/^            void end() override$/;"	f	class:raytracer::pipeline::Processor	typeref:typename:void
end	pipeline/text-writer-consumer.cpp	/^        void end() override$/;"	f	class:__anon324c0a430110::TextWriter	typeref:typename:void	file:
end	pipeline/wif-processor.cpp	/^        void end() override$/;"	f	class:__anon3a087a4e0110::WifProcessor	typeref:typename:void	file:
endsWith	easylogging++.h	/^    static inline bool endsWith(const std::string& str, const std::string& end) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
ends_with	util/misc.cpp	/^bool ends_with(const std::string& string, const std::string& suffix)$/;"	f	typeref:typename:bool
engine_state	chaiscript/language/chaiscript_engine.hpp	/^      chaiscript::detail::Dispatch_Engine::State engine_state;$/;"	m	struct:chaiscript::ChaiScript::State	typeref:typename:chaiscript::detail::Dispatch_Engine::State
enumerate_rays	cameras/camera.cpp	/^std::vector<Ray> raytracer::cameras::_private_::CameraImplementation::enumerate_rays(const math:/;"	f	class:raytracer::cameras::_private_::CameraImplementation	typeref:typename:std::vector<Ray>
enumerate_rays	cameras/camera.cpp	/^void raytracer::cameras::_private_::CameraImplementation::enumerate_rays(const math::Point2D& p,/;"	f	class:raytracer::cameras::_private_::CameraImplementation	typeref:typename:void
enumerate_rays	cameras/displaceable-camera.cpp	/^void raytracer::cameras::_private_::DisplaceableCamera::enumerate_rays(const math::Point2D& p, s/;"	f	class:raytracer::cameras::_private_::DisplaceableCamera	typeref:typename:void
enumerate_untransformed_rays	cameras/perspective-camera.cpp	/^void raytracer::cameras::_private_::PerspectiveCamera::enumerate_untransformed_rays(const Point2/;"	f	class:raytracer::cameras::_private_::PerspectiveCamera	typeref:typename:void
epsilon	animation/duration.h	/^        double epsilon;$/;"	m	struct:math::approximately	typeref:typename:double
epsilon	animation/time-stamp.h	/^        double epsilon;$/;"	m	struct:math::approximately	typeref:typename:double
epsilon	imaging/color.h	/^        double epsilon;$/;"	m	struct:math::approximately	typeref:typename:double
epsilon	math/angle.h	/^        double epsilon;$/;"	m	struct:math::approximately	typeref:typename:double
epsilon	math/approx.h	/^        double epsilon;$/;"	m	struct:math::approximately	typeref:typename:double
epsilon	math/ray.h	/^        double epsilon;$/;"	m	struct:math::approximately	typeref:typename:double
equal	chaiscript/dispatchkit/operators.hpp	/^          auto equal(L l, R r) -> decltype(( l == r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l==r))
equal	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr equal(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
equals	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool equals(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
equals	chaiscript/language/chaiscript_algebraic.hpp	/^      equals, less_than, greater_than, less_than_equal, greater_than_equal, not_equal, $/;"	e	enum:chaiscript::Operators::Opers
erase_at	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void erase_at(Type &container, int pos)$/;"	f	namespace:chaiscript::bootstrap::standard_library::detail	typeref:typename:void
erase_ptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef size_t (ContainerType::*erase_ptr)(const typename ContainerType::key_type &);$/;"	t	function:chaiscript::bootstrap::standard_library::unique_associative_container_type	typeref:typename:size_t (ContainerType::*)(const typename ContainerType::key_type &)
eval	chaiscript/dispatchkit/dispatchkit.hpp	/^      Module &eval(const std::string &str)$/;"	f	class:chaiscript::Module	typeref:typename:Module &
eval	chaiscript/language/chaiscript_common.hpp	/^      Boxed_Value eval(const chaiscript::detail::Dispatch_State &t_e) const$/;"	f	struct:chaiscript::AST_Node	typeref:typename:Boxed_Value
eval	chaiscript/language/chaiscript_common.hpp	/^  namespace eval$/;"	n	namespace:chaiscript
eval	chaiscript/language/chaiscript_engine.hpp	/^    Boxed_Value eval(const std::string &t_input, const Exception_Handler &t_handler = Exception_/;"	f	class:chaiscript::ChaiScript	typeref:typename:Boxed_Value
eval	chaiscript/language/chaiscript_engine.hpp	/^    T eval(const std::string &t_input, const Exception_Handler &t_handler = Exception_Handler(),/;"	f	class:chaiscript::ChaiScript	typeref:typename:T
eval	chaiscript/language/chaiscript_engine.hpp	/^    const Boxed_Value eval(const AST_NodePtr &t_ast)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:const Boxed_Value
eval	chaiscript/language/chaiscript_eval.hpp	/^  namespace eval$/;"	n	namespace:chaiscript
eval_error	chaiscript/language/chaiscript_common.hpp	/^      eval_error(const std::string &t_why) CHAISCRIPT_NOEXCEPT$/;"	f	struct:chaiscript::exception::eval_error
eval_error	chaiscript/language/chaiscript_common.hpp	/^      eval_error(const std::string &t_why, $/;"	f	struct:chaiscript::exception::eval_error
eval_error	chaiscript/language/chaiscript_common.hpp	/^      eval_error(const std::string &t_why, const File_Position &t_where, const std::string &t_fn/;"	f	struct:chaiscript::exception::eval_error
eval_error	chaiscript/language/chaiscript_common.hpp	/^    struct eval_error : std::runtime_error {$/;"	s	namespace:chaiscript::exception
eval_file	chaiscript/language/chaiscript_engine.hpp	/^    Boxed_Value eval_file(const std::string &t_filename, const Exception_Handler &t_handler = Ex/;"	f	class:chaiscript::ChaiScript	typeref:typename:Boxed_Value
eval_file	chaiscript/language/chaiscript_engine.hpp	/^    T eval_file(const std::string &t_filename, const Exception_Handler &t_handler = Exception_Ha/;"	f	class:chaiscript::ChaiScript	typeref:typename:T
eval_function	chaiscript/language/chaiscript_eval.hpp	/^      static Boxed_Value eval_function(chaiscript::detail::Dispatch_Engine &t_ss, const AST_Node/;"	f	namespace:chaiscript::eval::detail	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_common.hpp	/^      virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const$/;"	f	struct:chaiscript::AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Break_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Continue_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Float_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Int_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Noop_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Quoted_String_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &) const CHAI/;"	f	struct:chaiscript::eval::Single_Quoted_String_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Array_Call_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Attr_Decl_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Binary_Operator_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Block_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Case_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Class_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Def_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Default_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Dot_Access_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Equation_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::File_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::For_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Fun_Call_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Global_Decl_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Id_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::If_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Inline_Array_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Inline_Map_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Inline_Range_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Lambda_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Logical_And_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Logical_Or_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Method_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Prefix_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Reference_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Return_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Switch_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Ternary_Cond_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Try_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::Var_Decl_AST_Node	typeref:typename:Boxed_Value
eval_internal	chaiscript/language/chaiscript_eval.hpp	/^        virtual Boxed_Value eval_internal(const chaiscript::detail::Dispatch_State &t_ss) const /;"	f	struct:chaiscript::eval::While_AST_Node	typeref:typename:Boxed_Value
evaluate	math/function.h	/^        R evaluate(Ts... args) const override { return m_lambda(args...); }$/;"	f	class:math::LambdaFunctionBody	typeref:typename:R
evaluate	math/function.h	/^        R2 evaluate(Ts... args) const override$/;"	f	class:math::Composition	typeref:typename:R2
evaluate	scripting/scripting.h	/^        T evaluate(const std::string& source)$/;"	f	namespace:raytracer::scripting	typeref:typename:T
evaluate	scripting/scripting.h	/^        inline void evaluate(const std::string& source)$/;"	f	namespace:raytracer::scripting	typeref:typename:void
exception	chaiscript/dispatchkit/any.hpp	/^    namespace exception$/;"	n	namespace:chaiscript::detail
exception	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/boxed_cast.hpp	/^namespace exception {$/;"	n	namespace:chaiscript::detail
exception	chaiscript/dispatchkit/boxed_number.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/dispatchkit.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/exception_specification.hpp	/^namespace exception {$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/proxy_functions.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/proxy_functions.hpp	/^namespace exception {$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^namespace exception {$/;"	n	namespace:chaiscript
exception	chaiscript/dispatchkit/type_conversions.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/language/chaiscript_common.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/language/chaiscript_engine.hpp	/^  namespace exception$/;"	n	namespace:chaiscript
exception	chaiscript/language/chaiscript_eval.hpp	/^namespace exception {$/;"	n	namespace:chaiscript
exception_specification	chaiscript/dispatchkit/exception_specification.hpp	/^  Exception_Handler exception_specification()$/;"	f	namespace:chaiscript	typeref:typename:Exception_Handler
expected	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      int expected;$/;"	m	struct:chaiscript::exception::arity_error	typeref:typename:int
expected	tests/cameras/camera-transformation-tests.cpp	/^    auto expected = math::identity<4>();$/;"	v	typeref:typename:auto
expected_hit_position	tests/primitives/disk/disk-tests.cpp	/^                        Point3D expected_hit_position = Point3D(cartesian_coordinates.x, 0, cart/;"	v	typeref:typename:Point3D
expected_t	tests/primitives/disk/disk-tests.cpp	/^                        double expected_t = y \/ dy;$/;"	v	typeref:typename:double
extract	util/base64.cpp	/^std::string Base64::extract()$/;"	f	class:Base64	typeref:typename:std::string
extractPathFromFilename	easylogging++.h	/^    static std::string extractPathFromFilename(const std::string& fullPath,$/;"	f	class:el::base::utils::File	typeref:typename:std::string
eye	tests/cameras/camera-transformation-tests.cpp	/^    Point3D eye(0, 0, 0);$/;"	v	typeref:typename:Point3D
eye	tests/cameras/camera-transformation-tests.cpp	/^    Point3D eye(1, 0, 0);$/;"	v	typeref:typename:Point3D
feed	util/base64.cpp	/^void Base64::feed(uint8_t datum)$/;"	f	class:Base64	typeref:typename:void
file	easylogging++.h	/^    inline const std::string& file(void) const { return m_file; }$/;"	f	class:el::LogMessage	typeref:typename:const std::string &
fileStream	easylogging++.h	/^    inline base::type::fstream_t* fileStream(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:base::type::fstream_t *
file_exists	scripting/scripting.cpp	/^    bool file_exists(const std::string& path)$/;"	f	namespace:__anondc80204b0110	typeref:typename:bool
file_header	imaging/bmp-format.cpp	/^        FILE_HEADER      file_header;$/;"	m	struct:__anon5b9926d60110::BITMAP_FILE_V3	typeref:typename:FILE_HEADER	file:
file_header	imaging/bmp-format.cpp	/^        FILE_HEADER      file_header;$/;"	m	struct:__anon5b9926d60110::BITMAP_FILE_V4	typeref:typename:FILE_HEADER	file:
file_header	imaging/bmp-format.cpp	/^        FILE_HEADER      file_header;$/;"	m	struct:__anon5b9926d60110::BITMAP_FILE_V5	typeref:typename:FILE_HEADER	file:
file_not_found_error	chaiscript/language/chaiscript_common.hpp	/^      file_not_found_error(const std::string &t_filename) CHAISCRIPT_NOEXCEPT$/;"	f	struct:chaiscript::exception::file_not_found_error
file_not_found_error	chaiscript/language/chaiscript_common.hpp	/^    struct file_not_found_error : std::runtime_error {$/;"	s	namespace:chaiscript::exception
file_size	imaging/bmp-format.cpp	/^    unsigned file_size(std::ifstream& in)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:unsigned
filename	chaiscript/language/chaiscript_common.hpp	/^      const std::string &filename() const {$/;"	f	struct:chaiscript::AST_Node	typeref:typename:const std::string &
filename	chaiscript/language/chaiscript_common.hpp	/^      std::string filename;$/;"	m	struct:chaiscript::exception::eval_error	typeref:typename:std::string
filename	chaiscript/language/chaiscript_common.hpp	/^    std::shared_ptr<std::string> filename;$/;"	m	struct:chaiscript::Parse_Location	typeref:typename:std::shared_ptr<std::string>
filename	easylogging++.h	/^    inline const char* filename(void) const {$/;"	f	class:el::base::HitCounter	typeref:typename:const char *
filename	easylogging++.h	/^    inline const std::string& filename(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const std::string &
filter	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool filter(const std::vector<Boxed_Value> &vals, const Type_Conversions_State &t_conver/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
find	chaiscript/dispatchkit/type_conversions.hpp	/^      std::set<std::shared_ptr<detail::Type_Conversion_Base> >::const_iterator find($/;"	f	class:chaiscript::Type_Conversions	typeref:typename:std::set<std::shared_ptr<detail::Type_Conversion_Base>>::const_iterator
find_all_hits	primitives/decorator-primitive.cpp	/^        std::vector<std::shared_ptr<Hit>> find_all_hits(const math::Ray& ray) const override$/;"	f	class:__anon08e8fc9a0110::DecoratorImplementation	typeref:typename:std::vector<std::shared_ptr<Hit>>	file:
find_all_hits	primitives/plane-primitive.cpp	/^        std::vector<std::shared_ptr<Hit>> find_all_hits(const math::Ray& ray) const override$/;"	f	class:__anon22e967e70110::CoordinatePlaneImplementation	typeref:typename:std::vector<std::shared_ptr<Hit>>	file:
find_all_hits	primitives/sphere-primitive.cpp	/^        std::vector<std::shared_ptr<Hit>> find_all_hits(const Ray& ray) const override$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:std::vector<std::shared_ptr<Hit>>	file:
find_all_hits	primitives/transformer-primitive.cpp	/^        std::vector<std::shared_ptr<Hit>> find_all_hits(const math::Ray& ray) const override$/;"	f	class:__anonee3963ea0110::TransformerImplementation	typeref:typename:std::vector<std::shared_ptr<Hit>>	file:
find_all_hits	primitives/union-primitive.cpp	/^        std::vector<std::shared_ptr<Hit>> find_all_hits(const math::Ray& ray) const override$/;"	f	class:__anond3e0bd200110::BinaryUnionImplementation	typeref:typename:std::vector<std::shared_ptr<Hit>>	file:
find_bidir	chaiscript/dispatchkit/type_conversions.hpp	/^      std::set<std::shared_ptr<detail::Type_Conversion_Base> >::const_iterator find_bidir($/;"	f	class:chaiscript::Type_Conversions	typeref:typename:std::set<std::shared_ptr<detail::Type_Conversion_Base>>::const_iterator
find_first_positive_hit	primitives/decorator-primitive.cpp	/^        bool find_first_positive_hit(const Ray& ray, Hit* hit) const override$/;"	f	class:__anon08e8fc9a0110::DecoratorImplementation	typeref:typename:bool	file:
find_first_positive_hit	primitives/primitive.cpp	/^bool raytracer::primitives::_private_::PrimitiveImplementation::find_first_positive_hit(const ma/;"	f	class:raytracer::primitives::_private_::PrimitiveImplementation	typeref:typename:bool
find_first_positive_hit	primitives/sphere-primitive.cpp	/^        bool find_first_positive_hit(const Ray& ray, Hit* hit) const override$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:bool	file:
find_first_positive_hit	primitives/transformer-primitive.cpp	/^        bool find_first_positive_hit(const Ray& ray, Hit* hit) const override$/;"	f	class:__anonee3963ea0110::TransformerImplementation	typeref:typename:bool	file:
find_first_positive_hit	primitives/union-primitive.cpp	/^        bool find_first_positive_hit(const Ray& ray, Hit* hit) const override$/;"	f	class:__anond3e0bd200110::BinaryUnionImplementation	typeref:typename:bool	file:
find_keyed_value	chaiscript/dispatchkit/dispatchkit.hpp	/^        static typename Container::const_iterator find_keyed_value(const Container &t_c, const K/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Container::const_iterator
find_keyed_value	chaiscript/dispatchkit/dispatchkit.hpp	/^        static typename Container::iterator find_keyed_value(Container &t_c, const Key &t_key)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Container::iterator
find_perpendicular_on	math/vector.h	/^    inline Vector3D find_perpendicular_on(const Vector3D& v)$/;"	f	namespace:math	typeref:typename:Vector3D
first	pipeline/pipeline-builder.h	/^                std::shared_ptr<pipeline::Consumer<T1>> first;$/;"	m	struct:raytracer::pipeline::_private_::PipelineBuilder	typeref:typename:std::shared_ptr<pipeline::Consumer<T1>>
first_positive_position	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	v	typeref:typename:auto
first_positive_position	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	v	typeref:typename:auto
first_positive_position	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	v	typeref:typename:auto
first_positive_position	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                                auto first_positive_position = std::find_if(hits.begin(), hits.e/;"	v	typeref:typename:auto
flags	easylogging++.h	/^    inline base::type::EnumType flags(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:base::type::EnumType
flags	easylogging++.h	/^    inline base::type::EnumType flags(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::type::EnumType
float_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   float_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
float_suffix_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   float_suffix_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
flush	easylogging++.h	/^    inline void flush(Level level, base::type::fstream_t* fs) {$/;"	f	class:el::Logger	typeref:typename:void
flush	easylogging++.h	/^    inline void flush(void) {$/;"	f	class:el::Logger	typeref:typename:void
flushAll	easylogging++.h	/^    inline void flushAll(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
fname	chaiscript/language/chaiscript_common.hpp	/^        static const std::string &fname(const T& t)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:const std::string &
forEachConfigType	easylogging++.h	/^    static inline void forEachConfigType(base::type::EnumType* startIndex, const std::function<b/;"	f	class:el::ConfigurationTypeHelper	typeref:typename:void
forEachLevel	easylogging++.h	/^    static inline void forEachLevel(base::type::EnumType* startIndex, const std::function<bool(v/;"	f	class:el::LevelHelper	typeref:typename:void
for_each_pixel	renderers/renderer.cpp	/^void raytracer::renderers::_private_::RendererImplementation::for_each_pixel(std::function<void(/;"	f	class:raytracer::renderers::_private_::RendererImplementation	typeref:typename:void
for_each_position	data-structures/grid.h	/^        void for_each_position(std::function<void(const Position2D&)> callback) const$/;"	f	class:data::Grid	typeref:typename:void
for_each_position	imaging/bitmap.cpp	/^void imaging::Bitmap::for_each_position(std::function<void(const Position2D&)> callback) const$/;"	f	class:imaging::Bitmap	typeref:typename:void
format	chaiscript/language/chaiscript_common.hpp	/^      static std::string format(const std::string &t_why, $/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format	chaiscript/language/chaiscript_common.hpp	/^      static std::string format(const std::string &t_why, const File_Position &t_where, const st/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format	easylogging++.h	/^    inline const base::type::string_t& format(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:const base::type::string_t &
formatSpecifier	easylogging++.h	/^    inline const char* formatSpecifier(void) const { return m_formatSpecifier; }$/;"	f	class:el::CustomFormatSpecifier	typeref:typename:const char *
formatTime	easylogging++.h	/^    static base::type::string_t formatTime(unsigned long long time, base::TimestampUnit timestam/;"	f	class:el::base::utils::DateTime	typeref:typename:base::type::string_t
format_detail	chaiscript/language/chaiscript_common.hpp	/^      static std::string format_detail(const std::vector<chaiscript::Const_Proxy_Function> &t_fu/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_filename	chaiscript/language/chaiscript_common.hpp	/^      static std::string format_filename(const std::string &t_fname)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_guard	chaiscript/language/chaiscript_common.hpp	/^        static std::string format_guard(const T &t)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_location	chaiscript/language/chaiscript_common.hpp	/^        static std::string format_location(const T &t)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_location	chaiscript/language/chaiscript_common.hpp	/^      static std::string format_location(const File_Position &t_where)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_parameters	chaiscript/language/chaiscript_common.hpp	/^      static std::string format_parameters(const std::vector<Boxed_Value> &t_parameters,$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_types	chaiscript/language/chaiscript_common.hpp	/^      static std::string format_types(const Const_Proxy_Function &t_func,$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
format_why	chaiscript/language/chaiscript_common.hpp	/^      static std::string format_why(const std::string &t_why)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
found	scripting/scripting-util.h	/^                bool found;$/;"	m	struct:raytracer::scripting::util::SingleArgumentParser	typeref:typename:bool
found_hit	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                            bool found_hit = primitive->find_first_positive_hit(ray, &hit1);$/;"	v	typeref:typename:bool
found_hit	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                            bool found_hit = primitive->find_first_positive_hit(ray, &hit1);$/;"	v	typeref:typename:bool
found_hit	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                            bool found_hit = primitive->find_first_positive_hit(ray, &hit1);$/;"	v	typeref:typename:bool
found_hit	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                            bool found_hit = primitive->find_first_positive_hit(ray, &hit1);$/;"	v	typeref:typename:bool
from	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        Type_Info from; \/\/\/< Type_Info contained in the Boxed_Value$/;"	m	class:chaiscript::exception::bad_boxed_cast	typeref:typename:Type_Info
from	chaiscript/dispatchkit/type_conversions.hpp	/^        const Type_Info &from() const$/;"	f	class:chaiscript::detail::Type_Conversion_Base	typeref:typename:const Type_Info &
from	math/interval-mapper.h	/^        Interval<T1> from;$/;"	m	struct:math::IntervalMapper	typeref:typename:Interval<T1>
from_argb	imaging/bmp-format.cpp	/^    Color from_argb(const ARGB& argb)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:Color
from_corners	math/box.cpp	/^Box math::Box::from_corners(const Point3D& p, const Point3D& q)$/;"	f	class:math::Box	typeref:typename:Box
from_epoch	animation/time-stamp.h	/^        static TimeStamp from_epoch(const Duration& duration) { return TimeStamp(duration); }$/;"	f	class:animation::TimeStamp	typeref:typename:TimeStamp
from_json	chaiscript/utility/json_wrap.hpp	/^      static Boxed_Value from_json(const json::JSON &t_json)$/;"	f	class:chaiscript::json_wrap	typeref:typename:Boxed_Value
from_json	chaiscript/utility/json_wrap.hpp	/^      static Boxed_Value from_json(const std::string &t_json)$/;"	f	class:chaiscript::json_wrap	typeref:typename:Boxed_Value
from_lambda	math/function.h	/^    Function<R(Ts...)> from_lambda(std::function<R(Ts...)> lambda)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
from_lambda	tasks/lambda-task.cpp	/^std::shared_ptr<Task> tasks::from_lambda(std::function<void()> lambda)$/;"	f	class:tasks	typeref:typename:std::shared_ptr<Task>
from_milliseconds	animation/duration.cpp	/^Duration animation::Duration::from_milliseconds(double ms)$/;"	f	class:animation::Duration	typeref:typename:Duration
from_point_and_normal	math/plane.cpp	/^Plane math::Plane::from_point_and_normal(const Point3D& p, const Vector3D& n)$/;"	f	class:math::Plane	typeref:typename:Plane
from_raw_corners	math/box.cpp	/^Box math::Box::from_raw_corners(const Point3D& lower_corner, const Point3D& upper_corner)$/;"	f	class:math::Box	typeref:typename:Box
from_relative	math/interval.h	/^        constexpr T from_relative(double t) const$/;"	f	struct:math::Interval	typeref:typename:T
from_relative	math/rectangle2d.cpp	/^Point2D math::Rectangle2D::from_relative(const Point2D& p) const$/;"	f	class:math::Rectangle2D	typeref:typename:Point2D
from_rgb	imaging/bmp-format.cpp	/^    Color from_rgb(const RGB& rgb)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:Color
from_seconds	animation/duration.cpp	/^Duration animation::Duration::from_seconds(double s)$/;"	f	class:animation::Duration	typeref:typename:Duration
from_seconds_since_epoch	animation/time-stamp.h	/^        static TimeStamp from_seconds_since_epoch(double duration) { return TimeStamp(Duration::/;"	f	class:animation::TimeStamp	typeref:typename:TimeStamp
front	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          const_reference_type front() const$/;"	f	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:const_reference_type
front	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          reference_type front() const$/;"	f	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:reference_type
front	easylogging++.h	/^    inline AsyncLogItem front(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem
front_insertion_sequence_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr front_insertion_sequence_type(const std::string &type, ModulePtr m = std::make/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
front_ptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename ContainerType::reference (ContainerType::*front_ptr)();$/;"	t	function:chaiscript::bootstrap::standard_library::front_insertion_sequence_type	typeref:typename:ContainerType::reference (ContainerType::*)()
frontptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename VectorType::reference (VectorType::*frontptr)();$/;"	t	function:chaiscript::bootstrap::standard_library::vector_type	typeref:typename:VectorType::reference (VectorType::*)()
fstream_t	easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wfstream
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(Ret (*func)(Param...))$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(Ret (Class::*t_func)(Param...) const)$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(Ret (Class::*t_func)(Param...))$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(T &&t, Q &&q, R &&r)$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(T &&t, const Q &q)$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(T Class::* m \/*, typename std::enable_if<std::is_member_object_pointer<T/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
fun	chaiscript/dispatchkit/register_function.hpp	/^    Proxy_Function fun(const T &t)$/;"	f	namespace:chaiscript	typeref:typename:Proxy_Function
func	easylogging++.h	/^    inline const std::string& func(void) const { return m_func; }$/;"	f	class:el::LogMessage	typeref:typename:const std::string &
func_ptr	chaiscript/language/chaiscript_engine.hpp	/^              T func_ptr;$/;"	m	union:chaiscript::detail::Loadable_Module::DLSym::cast_symbol::cast_union	typeref:typename:T
function	animation/animation.h	/^        math::Function<T(TimeStamp)> function() const$/;"	f	class:animation::Animation	typeref:typename:math::Function<T (TimeStamp)>
function_exists	chaiscript/dispatchkit/dispatchkit.hpp	/^        bool function_exists(const std::string &name) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:bool
function_less_than	chaiscript/dispatchkit/dispatchkit.hpp	/^        static bool function_less_than(const Proxy_Function &lhs, const Proxy_Function &rhs)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:bool
functions	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::vector<Const_Proxy_Function> functions;$/;"	m	class:chaiscript::exception::dispatch_error	typeref:typename:std::vector<Const_Proxy_Function>
functions	math/functions/bool-mapper.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/constant.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/easing-function.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/easing/linear-easing-function.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/easing/stretch-easing-function.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/horizontal-lines-pattern.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/identity.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/noise.h	/^    namespace functions$/;"	n	namespace:math
functions	math/functions/random-function.h	/^    namespace functions$/;"	n	namespace:math
functor	chaiscript/dispatchkit/function_call.hpp	/^      functor(Const_Proxy_Function func, const Type_Conversions_State *t_conversions)$/;"	f	namespace:chaiscript::dispatch	typeref:typename:std::function<FunctionType>
functor	chaiscript/dispatchkit/function_call.hpp	/^      functor(const Boxed_Value &bv, const Type_Conversions_State *t_conversions)$/;"	f	namespace:chaiscript::dispatch	typeref:typename:std::function<FunctionType>
functor	chaiscript/dispatchkit/function_call.hpp	/^      functor(const std::vector<Const_Proxy_Function> &funcs, const Type_Conversions_State *t_co/;"	f	namespace:chaiscript::dispatch	typeref:typename:std::function<FunctionType>
future_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr future_type(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
g	imaging/bmp-format.cpp	/^        uint8_t g;$/;"	m	struct:__anon5b9926d60110::ARGB	typeref:typename:uint8_t	file:
g	imaging/bmp-format.cpp	/^        uint8_t g;$/;"	m	struct:__anon5b9926d60110::RGB	typeref:typename:uint8_t	file:
g	imaging/color.h	/^        double g;$/;"	m	struct:imaging::Color	typeref:typename:double
g	imaging/wif-format.cpp	/^        uint8_t r, g, b;$/;"	m	struct:__anon10e0153d0110::RGBColor	typeref:typename:uint8_t	file:
generate_source	test-generation/shared.rb	/^  def generate_source$/;"	f	class:TestFileContext
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(T *t, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(T t, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(const T *t, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(const std::shared_ptr<T> &obj, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(const std::shared_ptr<T> *obj, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(std::reference_wrapper<T> obj, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^          static std::shared_ptr<Data> get(std::shared_ptr<T> &&obj, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^        static std::shared_ptr<Data> get()$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^        static std::shared_ptr<Data> get(Boxed_Value::Void_Type, bool t_return_value)$/;"	f	struct:chaiscript::Boxed_Value::Object_Data	typeref:typename:std::shared_ptr<Data>
get	chaiscript/dispatchkit/boxed_value.hpp	/^      const chaiscript::detail::Any & get() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:const chaiscript::detail::Any &
get	chaiscript/dispatchkit/type_conversions.hpp	/^      const Type_Conversions *get() const {$/;"	f	class:chaiscript::Type_Conversions_State	typeref:typename:const Type_Conversions *
get	chaiscript/dispatchkit/type_info.hpp	/^        static Type_Info get()$/;"	f	struct:chaiscript::detail::Get_Type_Info	typeref:typename:Type_Info
get	easylogging++.h	/^    Logger* get(const std::string& id, bool forceCreation = true) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:Logger *
get	easylogging++.h	/^    inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Configurations	typeref:typename:Configuration *
get	easylogging++.h	/^    inline T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:T_Ptr *
get	easylogging++.h	/^    inline T_Ptr* get(const T_Key& uniqKey) {$/;"	f	class:el::base::utils::Registry	typeref:typename:T_Ptr *
getBashOutput	easylogging++.h	/^    static const std::string getBashOutput(const char* command) {$/;"	f	class:el::base::utils::OS	typeref:typename:const std::string
getConfigByRef	easylogging++.h	/^    inline Conf_T& getConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* con/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T &
getConfigByVal	easylogging++.h	/^    inline Conf_T getConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T
getCounter	easylogging++.h	/^    inline const base::HitCounter* getCounter(const char* filename, unsigned long int lineNumber/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:const base::HitCounter *
getCurrentThreadId	easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	namespace:el::base::threading	typeref:typename:std::string
getDateTime	easylogging++.h	/^    static inline std::string getDateTime(const char* format, const base::MillisecondsWidth* msW/;"	f	class:el::base::utils::DateTime	typeref:typename:std::string
getDeviceName	easylogging++.h	/^    static std::string getDeviceName(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
getEnvironmentVariable	easylogging++.h	/^    static std::string getEnvironmentVariable(const char* variableName, const char* defaultVal, /;"	f	class:el::base::utils::OS	typeref:typename:std::string
getParamValue	easylogging++.h	/^    inline const char* getParamValue(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:const char *
getProperty	easylogging++.h	/^    static inline std::string getProperty(const char* prop) {$/;"	f	class:el::base::utils::OS	typeref:typename:std::string
getSizeOfFile	easylogging++.h	/^    static std::size_t getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	class:el::base::utils::File	typeref:typename:std::size_t
getTimeDifference	easylogging++.h	/^    static inline unsigned long long getTimeDifference(const struct timeval& endTime, const stru/;"	f	class:el::base::utils::DateTime	typeref:typename:unsigned long long
getULong	easylogging++.h	/^    unsigned long getULong(std::string confVal) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:unsigned long
getWindowsEnvironmentVariable	easylogging++.h	/^    static const char* getWindowsEnvironmentVariable(const char* varname) {$/;"	f	class:el::base::utils::OS	typeref:typename:const char *
get_arg_name	chaiscript/language/chaiscript_eval.hpp	/^        static std::string get_arg_name(const AST_NodePtr &t_node) {$/;"	f	struct:chaiscript::eval::Arg_List_AST_Node	typeref:typename:std::string
get_arg_names	chaiscript/language/chaiscript_eval.hpp	/^        static std::vector<std::string> get_arg_names(const AST_NodePtr &t_node) {$/;"	f	struct:chaiscript::eval::Arg_List_AST_Node	typeref:typename:std::vector<std::string>
get_arg_type	chaiscript/language/chaiscript_eval.hpp	/^        static std::pair<std::string, Type_Info> get_arg_type(const AST_NodePtr &t_node, const c/;"	f	struct:chaiscript::eval::Arg_List_AST_Node	typeref:typename:std::pair<std::string,Type_Info>
get_arg_types	chaiscript/language/chaiscript_eval.hpp	/^        static dispatch::Param_Types get_arg_types(const AST_NodePtr &t_node, const chaiscript::/;"	f	struct:chaiscript::eval::Arg_List_AST_Node	typeref:typename:dispatch::Param_Types
get_arity	chaiscript/dispatchkit/proxy_functions.hpp	/^        int get_arity() const$/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:int
get_as	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number get_as(const Type_Info &inp_) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
get_as	chaiscript/dispatchkit/boxed_number.hpp	/^      template<typename Target> Target get_as() const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Target
get_as_aux	chaiscript/dispatchkit/boxed_number.hpp	/^          static inline Target get_as_aux(const Boxed_Value &t_bv)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Target
get_attr	chaiscript/dispatchkit/boxed_value.hpp	/^      Boxed_Value get_attr(const std::string &t_name)$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:Boxed_Value
get_attr	chaiscript/dispatchkit/dynamic_object.hpp	/^        Boxed_Value &get_attr(const std::string &t_attr_name)$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:Boxed_Value &
get_attr	chaiscript/dispatchkit/dynamic_object.hpp	/^        const Boxed_Value &get_attr(const std::string &t_attr_name) const$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:const Boxed_Value &
get_attrs	chaiscript/dispatchkit/dynamic_object.hpp	/^        std::map<std::string, Boxed_Value> get_attrs() const$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:std::map<std::string,Boxed_Value>
get_bool_condition	chaiscript/language/chaiscript_common.hpp	/^      static bool get_bool_condition(const Boxed_Value &t_bv) {$/;"	f	struct:chaiscript::AST_Node	typeref:typename:bool
get_boxed_functions_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        const std::vector<std::pair<std::string, Boxed_Value>> &get_boxed_functions_int() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:const std::vector<std::pair<std::string,Boxed_Value>> &
get_boxed_functions_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::vector<std::pair<std::string, Boxed_Value>> &get_boxed_functions_int() $/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<std::pair<std::string,Boxed_Value>> &
get_common_type	chaiscript/dispatchkit/boxed_number.hpp	/^      static CHAISCRIPT_CONSTEXPR Common_Types get_common_type(size_t t_size, bool t_signed)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:CHAISCRIPT_CONSTEXPR Common_Types
get_common_type	chaiscript/dispatchkit/boxed_number.hpp	/^      static Common_Types get_common_type(const Boxed_Value &t_bv)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Common_Types
get_const_ptr	chaiscript/dispatchkit/boxed_value.hpp	/^      const void *get_const_ptr() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:const void *
get_contained_functions	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual std::vector<Const_Proxy_Function> get_contained_functions() const CHAISCRIPT_OVE/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:std::vector<Const_Proxy_Function>
get_contained_functions	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual std::vector<Const_Proxy_Function> get_contained_functions() const CHAISCRIPT_O/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:std::vector<Const_Proxy_Function>
get_contained_functions	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual std::vector<Const_Proxy_Function> get_contained_functions() const CHAISCRIPT_OVE/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:std::vector<Const_Proxy_Function>
get_contained_functions	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual std::vector<std::shared_ptr<const Proxy_Function_Base> > get_contained_functions/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:std::vector<std::shared_ptr<const Proxy_Function_Base>>
get_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^      std::shared_ptr<detail::Type_Conversion_Base> get_conversion(const Type_Info &to, const Ty/;"	f	class:chaiscript::Type_Conversions	typeref:typename:std::shared_ptr<detail::Type_Conversion_Base>
get_conversions	chaiscript/dispatchkit/type_conversions.hpp	/^      std::set<std::shared_ptr<detail::Type_Conversion_Base>> get_conversions() const$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:std::set<std::shared_ptr<detail::Type_Conversion_Base>>
get_eval_engine	chaiscript/language/chaiscript_engine.hpp	/^    chaiscript::detail::Dispatch_Engine &get_eval_engine() {$/;"	f	class:chaiscript::ChaiScript	typeref:typename:chaiscript::detail::Dispatch_Engine &
get_function	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::pair<size_t, std::shared_ptr<std::vector< Proxy_Function>>> get_function(const std:/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::pair<size_t,std::shared_ptr<std::vector<Proxy_Function>>>
get_function_object	chaiscript/dispatchkit/dispatchkit.hpp	/^        Boxed_Value get_function_object(const std::string &t_name) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Boxed_Value
get_function_object_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::pair<size_t, Boxed_Value> get_function_object_int(const std::string &t_name, const /;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::pair<size_t,Boxed_Value>
get_function_objects	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::map<std::string, Boxed_Value> get_function_objects() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::map<std::string,Boxed_Value>
get_function_objects_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        const std::vector<std::pair<std::string, Proxy_Function>> &get_function_objects_int() co/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:const std::vector<std::pair<std::string,Proxy_Function>> &
get_function_objects_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::vector<std::pair<std::string, Proxy_Function>> &get_function_objects_int() $/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<std::pair<std::string,Proxy_Function>> &
get_functions	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::vector<std::pair<std::string, Proxy_Function > > get_functions() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<std::pair<std::string,Proxy_Function>>
get_functions_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        const std::vector<std::pair<std::string, std::shared_ptr<std::vector<Proxy_Function>>>> /;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:const std::vector<std::pair<std::string,std::shared_ptr<std::vector<Proxy_Function>>>> &
get_functions_int	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::vector<std::pair<std::string, std::shared_ptr<std::vector<Proxy_Function>>>> &get_f/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<std::pair<std::string,std::shared_ptr<std::vector<Proxy_Function>>>> &
get_guard	chaiscript/dispatchkit/bootstrap.hpp	/^      static Const_Proxy_Function get_guard(const Const_Proxy_Function &t_pf)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:Const_Proxy_Function
get_guard	chaiscript/dispatchkit/proxy_functions.hpp	/^        Proxy_Function get_guard() const$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:Proxy_Function
get_locals	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::map<std::string, Boxed_Value> get_locals() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::map<std::string,Boxed_Value>
get_locals	chaiscript/language/chaiscript_engine.hpp	/^    std::map<std::string, Boxed_Value> get_locals() const$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::map<std::string,Boxed_Value>
get_method_missing_functions	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::shared_ptr<std::vector<Proxy_Function>> get_method_missing_functions() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::shared_ptr<std::vector<Proxy_Function>>
get_object	chaiscript/dispatchkit/dispatchkit.hpp	/^        Boxed_Value get_object(const std::string &name, std::atomic_uint_fast32_t &t_loc) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Boxed_Value
get_param_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        const std::vector<Type_Info> &get_param_types() const { return m_types; }$/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:const std::vector<Type_Info> &
get_parent_locals	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::map<std::string, Boxed_Value> get_parent_locals() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::map<std::string,Boxed_Value>
get_parse_tree	chaiscript/dispatchkit/bootstrap.hpp	/^      static chaiscript::AST_NodePtr get_parse_tree(const chaiscript::Const_Proxy_Function &t_pf/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:chaiscript::AST_NodePtr
get_parse_tree	chaiscript/dispatchkit/proxy_functions.hpp	/^        AST_NodePtr get_parse_tree() const$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:AST_NodePtr
get_pointer	chaiscript/dispatchkit/bind_first.hpp	/^      T* get_pointer(T *t)$/;"	f	namespace:chaiscript::detail	typeref:typename:T *
get_pointer	chaiscript/dispatchkit/bind_first.hpp	/^      T* get_pointer(const std::reference_wrapper<T> &t)$/;"	f	namespace:chaiscript::detail	typeref:typename:T *
get_ptr	chaiscript/dispatchkit/boxed_value.hpp	/^      void *get_ptr() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:void *
get_scripting_objects	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::map<std::string, Boxed_Value> get_scripting_objects() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::map<std::string,Boxed_Value>
get_stack_data	chaiscript/dispatchkit/dispatchkit.hpp	/^        StackData &get_stack_data()$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:StackData &
get_stack_data	chaiscript/dispatchkit/dispatchkit.hpp	/^        const StackData &get_stack_data() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:const StackData &
get_stack_data	chaiscript/dispatchkit/dispatchkit.hpp	/^        static StackData &get_stack_data(Stack_Holder &t_holder)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:StackData &
get_stack_holder	chaiscript/dispatchkit/dispatchkit.hpp	/^        Stack_Holder &get_stack_holder()$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Stack_Holder &
get_state	chaiscript/dispatchkit/dispatchkit.hpp	/^        State get_state() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:State
get_state	chaiscript/language/chaiscript_engine.hpp	/^    State get_state() const$/;"	f	class:chaiscript::ChaiScript	typeref:typename:State
get_tls	chaiscript/chaiscript_threading.hpp	/^            std::shared_ptr<T> get_tls() const$/;"	f	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:std::shared_ptr<T>
get_type	chaiscript/dispatchkit/dispatchkit.hpp	/^        Type_Info get_type(const std::string &name, bool t_throw = true) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Type_Info
get_type_info	chaiscript/dispatchkit/boxed_value.hpp	/^      const Type_Info &get_type_info() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:const Type_Info &
get_type_name	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string get_type_name(const Type_Info &ti) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::string
get_type_name	chaiscript/dispatchkit/dynamic_object.hpp	/^        std::string get_type_name() const$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:std::string
get_type_name	chaiscript/language/chaiscript_engine.hpp	/^    std::string get_type_name() const$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
get_type_name	chaiscript/language/chaiscript_engine.hpp	/^    std::string get_type_name(const Type_Info &ti) const$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
get_types	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::vector<std::pair<std::string, Type_Info> > get_types() const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::vector<std::pair<std::string,Type_Info>>
get_value	chaiscript/language/chaiscript_eval.hpp	/^        static Boxed_Value get_value(const std::string &t_text)$/;"	f	struct:chaiscript::eval::Id_AST_Node	typeref:typename:Boxed_Value
gettimeofday	easylogging++.h	/^    static void gettimeofday(struct timeval* tv) {$/;"	f	class:el::base::utils::DateTime	typeref:typename:void
global_non_const	chaiscript/dispatchkit/dispatchkit.hpp	/^        global_non_const() CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::global_non_const
global_non_const	chaiscript/dispatchkit/dispatchkit.hpp	/^    class global_non_const : public std::runtime_error$/;"	c	namespace:chaiscript::exception
go	chaiscript/dispatchkit/boxed_number.hpp	/^      static auto go(Operators::Opers t_oper, const Boxed_Value &t_lhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:std::enable_if<std::is_floating_point<LHS>::value,Boxed_Value>::type
go	chaiscript/dispatchkit/boxed_number.hpp	/^      static auto go(Operators::Opers t_oper, const Boxed_Value &t_lhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:std::enable_if<!std::is_floating_point<LHS>::value,Boxed_Value>::type
go	chaiscript/dispatchkit/boxed_number.hpp	/^      static auto go(Operators::Opers t_oper, const Boxed_Value &t_lhs, const Boxed_Value &t_rhs/;"	f	class:chaiscript::Boxed_Number	typeref:typename:std::enable_if<!std::is_floating_point<LHS>::value &&!std::is_floating_point<RHS>::value,Boxed_Value>::type
go	chaiscript/dispatchkit/boxed_number.hpp	/^      static auto go(Operators::Opers t_oper, const Boxed_Value &t_lhs, const Boxed_Value &t_rhs/;"	f	class:chaiscript::Boxed_Number	typeref:typename:std::enable_if<std::is_floating_point<LHS>::value||std::is_floating_point<RHS>::value,Boxed_Value>::type
go	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^          static Boxed_Value go(const Callable &fun, const std::vector<Boxed_Value> &params, con/;"	f	struct:chaiscript::dispatch::detail::Do_Call	typeref:typename:Boxed_Value
got	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      int got;$/;"	m	struct:chaiscript::exception::arity_error	typeref:typename:int
grayscale	imaging/color-mapper.cpp	/^math::Function<Color(double)> imaging::color_mapping::grayscale()$/;"	f	class:imaging::color_mapping	typeref:typename:math::Function<Color (double)>
greater_than	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool greater_than(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
greater_than	chaiscript/dispatchkit/operators.hpp	/^          auto greater_than(L l, R r) -> decltype(( l > r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l> r))
greater_than	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr greater_than(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
greater_than	chaiscript/language/chaiscript_algebraic.hpp	/^      equals, less_than, greater_than, less_than_equal, greater_than_equal, not_equal, $/;"	e	enum:chaiscript::Operators::Opers
greater_than_equal	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool greater_than_equal(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
greater_than_equal	chaiscript/dispatchkit/operators.hpp	/^          auto greater_than_equal(L l, R r) -> decltype(( l >= r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l>=r))
greater_than_equal	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr greater_than_equal(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
greater_than_equal	chaiscript/language/chaiscript_algebraic.hpp	/^      equals, less_than, greater_than, less_than_equal, greater_than_equal, not_equal, $/;"	e	enum:chaiscript::Operators::Opers
green	imaging/color.h	/^        constexpr Color green()   { return Color{ 0, 1, 0 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
group_id	primitives/hit.h	/^        unsigned group_id;$/;"	m	struct:raytracer::Hit	typeref:typename:unsigned
group_id	raytracers/trace-result.h	/^        unsigned group_id;$/;"	m	struct:raytracer::TraceResult	typeref:typename:unsigned
guard_error	chaiscript/dispatchkit/proxy_functions.hpp	/^        guard_error() CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::guard_error
guard_error	chaiscript/dispatchkit/proxy_functions.hpp	/^    class guard_error : public std::runtime_error$/;"	c	namespace:chaiscript::exception
h	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                                for (auto h : hits)$/;"	v	typeref:typename:auto
h	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                                for (auto h : hits)$/;"	v	typeref:typename:auto
h	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                                for (auto h : hits)$/;"	v	typeref:typename:auto
h	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                                for (auto h : hits)$/;"	v	typeref:typename:auto
handle	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual void handle(const Boxed_Value &bv, const Dispatch_Engine &t_engine) CHAISCRIPT_O/;"	f	struct:chaiscript::detail::Exception_Handler_Impl1	typeref:typename:void
handle	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual void handle(const Boxed_Value &bv, const Dispatch_Engine &t_engine) CHAISCRIPT_O/;"	f	struct:chaiscript::detail::Exception_Handler_Impl2	typeref:typename:void
handle	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual void handle(const Boxed_Value &bv, const Dispatch_Engine &t_engine) CHAISCRIPT_O/;"	f	struct:chaiscript::detail::Exception_Handler_Impl3	typeref:typename:void
handle	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual void handle(const Boxed_Value &bv, const Dispatch_Engine &t_engine) CHAISCRIPT_O/;"	f	struct:chaiscript::detail::Exception_Handler_Impl4	typeref:typename:void
handle	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual void handle(const Boxed_Value &bv, const Dispatch_Engine &t_engine) CHAISCRIPT_O/;"	f	struct:chaiscript::detail::Exception_Handler_Impl5	typeref:typename:void
handle	chaiscript/dispatchkit/handle_return.hpp	/^          static Boxed_Value handle(T &&r)$/;"	f	struct:chaiscript::dispatch::detail::Handle_Return	typeref:typename:::type> Boxed_Value
handle	chaiscript/dispatchkit/handle_return.hpp	/^          static Boxed_Value handle(T r)$/;"	f	struct:chaiscript::dispatch::detail::Handle_Return	typeref:typename:Boxed_Value
handle	chaiscript/dispatchkit/handle_return.hpp	/^          static Boxed_Value handle(const std::function<Ret> &f) {$/;"	f	struct:chaiscript::dispatch::detail::Handle_Return	typeref:typename:Boxed_Value
handle	easylogging++.h	/^    void handle(AsyncLogItem* logItem) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
handle	easylogging++.h	/^    void handle(const LogDispatchData* data) {$/;"	f	class:el::base::AsyncLogDispatchCallback	typeref:typename:void
handle	easylogging++.h	/^    void handle(const LogDispatchData* data) {$/;"	f	class:el::base::DefaultLogDispatchCallback	typeref:typename:void
handle_exception	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value handle_exception(const chaiscript::detail::Dispatch_State &t_ss, const Boxed/;"	f	struct:chaiscript::eval::Try_AST_Node	typeref:typename:Boxed_Value
has	easylogging++.h	/^    inline bool has(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:bool
hasConfiguration	easylogging++.h	/^    bool hasConfiguration(ConfigurationType configurationType) {$/;"	f	class:el::Configurations	typeref:typename:bool
hasConfiguration	easylogging++.h	/^    inline bool hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Configurations	typeref:typename:bool
hasCustomFormatSpecifier	easylogging++.h	/^    inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::base::Storage	typeref:typename:bool
hasFlag	easylogging++.h	/^    inline bool hasFlag(LoggingFlag flag) const {$/;"	f	class:el::base::Storage	typeref:typename:bool
hasFlag	easylogging++.h	/^    inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	class:el::base::LogFormat	typeref:typename:bool
hasFlag	easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::base::utils	typeref:typename:bool
hasKey	chaiscript/utility/json.hpp	/^        bool hasKey( const string &key ) const {$/;"	f	class:json::JSON	typeref:typename:bool
hasParam	easylogging++.h	/^    inline bool hasParam(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:bool
hasParamWithValue	easylogging++.h	/^    inline bool hasParamWithValue(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:bool
has_arithmetic_param	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool has_arithmetic_param() const $/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
has_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^      bool has_conversion(const Type_Info &to, const Type_Info &from) const$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:bool
has_function	chaiscript/dispatchkit/dispatchkit.hpp	/^      bool has_function(const Proxy_Function &new_f, const std::string &name)$/;"	f	class:chaiscript::Module	typeref:typename:bool
has_guard	chaiscript/dispatchkit/bootstrap.hpp	/^      static bool has_guard(const Const_Proxy_Function &t_pf)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:bool
has_more	chaiscript/language/chaiscript_parser.hpp	/^        bool has_more() const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:bool
has_parse_tree	chaiscript/dispatchkit/bootstrap.hpp	/^      static bool has_parse_tree(const chaiscript::Const_Proxy_Function &t_pf)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:bool
has_solutions	math/quadratic_equation.cpp	/^bool math::QuadraticEquation::has_solutions() const$/;"	f	class:math::QuadraticEquation	typeref:typename:bool
height	data-structures/grid.h	/^        unsigned height() const$/;"	f	class:data::Grid	typeref:typename:unsigned
height	imaging/bitmap.cpp	/^unsigned imaging::Bitmap::height() const$/;"	f	class:imaging::Bitmap	typeref:typename:unsigned
hex_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   hex_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
hex_matches	chaiscript/language/chaiscript_parser.hpp	/^        string_type hex_matches;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:string_type
hit	tests/primitives/disk/disk-tests.cpp	/^                        Hit hit;$/;"	v	typeref:typename:Hit
hit	tests/primitives/triangle/triangle-tests.cpp	/^    Hit hit;$/;"	v	typeref:typename:Hit
hit1	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                            Hit hit1;$/;"	v	typeref:typename:Hit
hit1	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                            Hit hit1;$/;"	v	typeref:typename:Hit
hit1	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                            Hit hit1;$/;"	v	typeref:typename:Hit
hit1	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                            Hit hit1;$/;"	v	typeref:typename:Hit
hit2	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                                auto hit2 = *first_positive_position;$/;"	v	typeref:typename:auto
hit2	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                                auto hit2 = *first_positive_position;$/;"	v	typeref:typename:auto
hit2	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                                auto hit2 = *first_positive_position;$/;"	v	typeref:typename:auto
hit2	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                                auto hit2 = *first_positive_position;$/;"	v	typeref:typename:auto
hitCounters	easylogging++.h	/^    inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *
hitCounts	easylogging++.h	/^    inline std::size_t hitCounts(void) const {$/;"	f	class:el::base::HitCounter	typeref:typename:std::size_t
hit_position	raytracers/trace-result.h	/^        math::Point3D hit_position() const$/;"	f	struct:raytracer::TraceResult	typeref:typename:math::Point3D
hits	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                            auto hits = primitive->find_all_hits(ray);$/;"	v	typeref:typename:auto
hits	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                            auto hits = primitive->find_all_hits(ray);$/;"	v	typeref:typename:auto
hits	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                            auto hits = primitive->find_all_hits(ray);$/;"	v	typeref:typename:auto
hits	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                            auto hits = primitive->find_all_hits(ray);$/;"	v	typeref:typename:auto
hits	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    auto hits = sphere_intersection->find_all_hits(ray);$/;"	v	typeref:typename:auto
hits_xy_face	math/box.cpp	/^bool math::Box::hits_xy_face(const Ray& ray, double z, bool only_positive) const$/;"	f	class:math::Box	typeref:typename:bool
hits_xz_face	math/box.cpp	/^bool math::Box::hits_xz_face(const Ray& ray, double y, bool only_positive) const$/;"	f	class:math::Box	typeref:typename:bool
hits_yz_face	math/box.cpp	/^bool math::Box::hits_yz_face(const Ray& ray, double x, bool only_positive) const$/;"	f	class:math::Box	typeref:typename:bool
horizontal_lines	materials/pattern-materials.cpp	/^Material raytracer::materials::horizontal_lines(double thickness, Material m1, Material m2)$/;"	f	class:raytracer::materials	typeref:typename:Material
horizontal_lines	math/functions/horizontal-lines-pattern.cpp	/^Function<bool(const Point2D&)> math::functions::horizontal_lines(double thickness)$/;"	f	class:math::functions	typeref:typename:Function<bool (const Point2D &)>
horizontal_lines	scripting/materials-module.cpp	/^        Material horizontal_lines(double thickness, Material m1, Material m2) const$/;"	f	struct:__anond88f774d0110::MaterialLibrary	typeref:typename:Material	file:
horizontal_subdivisions	math/rasterizer.cpp	/^unsigned math::Rasterizer::horizontal_subdivisions() const$/;"	f	class:math::Rasterizer	typeref:typename:unsigned
id	chaiscript/language/chaiscript_common.hpp	/^        static int id(const T& t)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:int
id	easylogging++.h	/^    inline const std::string& id(void) const {$/;"	f	class:el::Logger	typeref:typename:const std::string &
id_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   id_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
identifier	chaiscript/language/chaiscript_common.hpp	/^      const int identifier; \/\/< \\todo shouldn't this be a strongly typed enum value?$/;"	m	struct:chaiscript::AST_Node	typeref:typename:const int
identity	math/functions/identity.h	/^        Function<R(R)> identity()$/;"	f	namespace:math::functions	typeref:typename:Function<R (R)>
identity	math/matrix.h	/^    Matrix<N> identity()$/;"	f	namespace:math	typeref:typename:Matrix<N>
ignoreComments	easylogging++.h	/^        static void ignoreComments(std::string* line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:void
illegal_name_error	chaiscript/dispatchkit/dispatchkit.hpp	/^        illegal_name_error(const std::string &t_name) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::illegal_name_error
illegal_name_error	chaiscript/dispatchkit/dispatchkit.hpp	/^    class illegal_name_error : public std::runtime_error$/;"	c	namespace:chaiscript::exception
imaging	imaging/bitmap-function.h	/^namespace imaging$/;"	n
imaging	imaging/bitmap.h	/^namespace imaging$/;"	n
imaging	imaging/bmp-format.h	/^namespace imaging$/;"	n
imaging	imaging/color-mapper.h	/^namespace imaging$/;"	n
imaging	imaging/color.h	/^namespace imaging$/;"	n
imaging	imaging/wif-format.h	/^namespace imaging$/;"	n
in_ptr	chaiscript/language/chaiscript_engine.hpp	/^              void *in_ptr;$/;"	m	union:chaiscript::detail::Loadable_Module::DLSym::cast_symbol::cast_union	typeref:typename:void *
increment	easylogging++.h	/^    inline void increment(void) {$/;"	f	class:el::base::HitCounter	typeref:typename:void
increment	performance/performance.cpp	/^            void increment()$/;"	f	class:performance::_private_::CounterImplementation	typeref:typename:void	file:
indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^          typedef typename Make_Indexes<sizeof...(Params)>::indexes indexes;$/;"	t	function:chaiscript::dispatch::detail::call_func
indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^          typedef typename Make_Indexes<sizeof...(Params)>::indexes indexes;$/;"	t	function:chaiscript::dispatch::detail::compare_types_cast
indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        typedef Indexes<I...> indexes;$/;"	t	struct:chaiscript::dispatch::detail::Make_Indexes	typeref:typename:Indexes<I...>
indexes	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^        typedef typename Make_Indexes<S-1, I..., sizeof...(I)>::indexes indexes;$/;"	t	struct:chaiscript::dispatch::detail::Make_Indexes
infinite	animation/duration.cpp	/^Duration animation::Duration::infinite()$/;"	f	class:animation::Duration	typeref:typename:Duration
infinite	math/box.cpp	/^Box math::Box::infinite()$/;"	f	class:math::Box	typeref:typename:Box
infinite	math/interval.h	/^        static constexpr Interval<T> infinite()$/;"	f	struct:math::Interval	typeref:typename:Interval<T>
infinite_interval	test-generation/interval-tests.rb	/^    def infinite_interval$/;"	f
init	easylogging++.h	/^    void init(int width) {$/;"	f	class:el::base::MillisecondsWidth	typeref:typename:void
initUnflushedCount	easylogging++.h	/^    void initUnflushedCount(void) {$/;"	f	class:el::Logger	typeref:typename:void
initialize	test-generation/shared.rb	/^  def initialize$/;"	f	class:Store
initialize	test-generation/shared.rb	/^  def initialize$/;"	f	class:TestFileContext
initialize	test-generation/shared.rb	/^  def initialize$/;"	f	class:TestSuiteContext
initialize_chai	scripting/scripting.cpp	/^    std::shared_ptr<ChaiScript> initialize_chai()$/;"	f	namespace:__anondc80204b0110	typeref:typename:std::shared_ptr<ChaiScript>
initialize_hit	primitives/plane-primitive.cpp	/^        void initialize_hit(Hit* hit, const Ray& ray, double t) const override$/;"	f	class:__anon22e967e70110::PlaneXYImplementation	typeref:typename:void	file:
initialize_hit	primitives/sphere-primitive.cpp	/^        void initialize_hit(Hit* hit, const Ray& ray, double t) const$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:void	file:
input_range_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr input_range_type(const std::string &type, ModulePtr m = std::make_shared<Modul/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
input_range_type_impl	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          ModulePtr input_range_type_impl(const std::string &type, ModulePtr m = std::make_share/;"	f	namespace:chaiscript::bootstrap::standard_library::detail	typeref:typename:ModulePtr
input_type	pipeline/consumer.h	/^            using input_type = INPUT;$/;"	t	class:raytracer::pipeline::Consumer	typeref:typename:INPUT
insert	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void insert(T &t_target, const T &t_other)$/;"	f	namespace:chaiscript::bootstrap::standard_library::detail	typeref:typename:void
insertFile	easylogging++.h	/^    void insertFile(Level level, const std::string& fullFilename) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:void
insert_at	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void insert_at(Type &container, int pos, const typename Type::value_type &v)$/;"	f	namespace:chaiscript::bootstrap::standard_library::detail	typeref:typename:void
insert_ref	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void insert_ref(T &t_target, const typename T::value_type &t_val)$/;"	f	namespace:chaiscript::bootstrap::standard_library::detail	typeref:typename:void
installCallback	easylogging++.h	/^    inline bool installCallback(const std::string& id, std::map<std::string, TPtr>* mapT) {$/;"	f	class:el::base::Storage	typeref:typename:bool
installCustomFormatSpecifier	easylogging++.h	/^    inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier)/;"	f	class:el::base::Storage	typeref:typename:void
installLogDispatchCallback	easylogging++.h	/^    inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:bool
installPerformanceTrackingCallback	easylogging++.h	/^    inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:bool
int_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   int_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
int_suffix_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   int_suffix_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
internal	easylogging++.h	/^namespace internal {$/;"	n	namespace:el::base::threading
internal_eval	chaiscript/language/chaiscript_engine.hpp	/^    const Boxed_Value internal_eval(const std::string &t_e) {$/;"	f	class:chaiscript::ChaiScript	typeref:typename:const Boxed_Value
internal_eval_file	chaiscript/language/chaiscript_engine.hpp	/^    const Boxed_Value internal_eval_file(const std::string &t_filename) {$/;"	f	class:chaiscript::ChaiScript	typeref:typename:const Boxed_Value
internal_function	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::function<Func> internal_function() const$/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:std::function<Func>
interpolation_allowed	chaiscript/language/chaiscript_parser.hpp	/^        const bool interpolation_allowed;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:const bool
intersect	math/box.cpp	/^Box math::Box::intersect(const Box& other) const$/;"	f	class:math::Box	typeref:typename:Box
intersect	math/interval.h	/^        Interval<T> intersect(const Interval& other) const$/;"	f	struct:math::Interval	typeref:typename:Interval<T>
interval	math/interval.h	/^    constexpr Interval<T> interval(const T& lower, const T& upper)$/;"	f	namespace:math	typeref:typename:Interval<T>
interval	test-generation/interval-tests.rb	/^    def interval(from, to)$/;"	f
invalid	chaiscript/language/chaiscript_algebraic.hpp	/^      invalid$/;"	e	enum:chaiscript::Operators::Opers
inverse_transformation_matrix	math/transformation2d.h	/^        Matrix3x3 inverse_transformation_matrix;$/;"	m	class:math::Transformation2D	typeref:typename:Matrix3x3
inverse_transformation_matrix	math/transformation3d.h	/^        Matrix4x4 inverse_transformation_matrix;$/;"	m	class:math::Transformation3D	typeref:typename:Matrix4x4
invert	imaging/bitmap.cpp	/^void imaging::Bitmap::invert()$/;"	f	class:imaging::Bitmap	typeref:typename:void
invert	imaging/color.cpp	/^void imaging::Color::invert()$/;"	f	class:imaging::Color	typeref:typename:void
inverted	imaging/color.cpp	/^Color imaging::Color::inverted() const$/;"	f	class:imaging::Color	typeref:typename:Color
isComment	easylogging++.h	/^        static inline bool isComment(const std::string& line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:bool
isConfig	easylogging++.h	/^        static inline bool isConfig(const std::string& line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:bool
isDigit	easylogging++.h	/^    static inline bool isDigit(char c) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
isFlushNeeded	easylogging++.h	/^    inline bool isFlushNeeded(Level level) {$/;"	f	class:el::Logger	typeref:typename:bool
isLevel	easylogging++.h	/^        static inline bool isLevel(const std::string& line) {$/;"	f	class:el::Configurations::Parser	typeref:typename:bool
isValidId	easylogging++.h	/^    static inline bool isValidId(const std::string& id) {$/;"	f	class:el::Logger	typeref:typename:bool
is_2d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_2d_coordinate_system<Cartesian2D> : std::true_type { };$/;"	s	namespace:math
is_2d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_2d_coordinate_system<Polar> : std::true_type { };$/;"	s	namespace:math
is_2d_coordinate_system	math/coordinate-systems.h	/^    template<typename> struct is_2d_coordinate_system : std::false_type { };$/;"	s	namespace:math
is_3d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_3d_coordinate_system<Cartesian3D> : std::true_type { };$/;"	s	namespace:math
is_3d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_3d_coordinate_system<CylindricalX> : std::true_type { };$/;"	s	namespace:math
is_3d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_3d_coordinate_system<CylindricalY> : std::true_type { };$/;"	s	namespace:math
is_3d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_3d_coordinate_system<CylindricalZ> : std::true_type { };$/;"	s	namespace:math
is_3d_coordinate_system	math/coordinate-systems.h	/^    template<> struct is_3d_coordinate_system<Spherical> : std::true_type { };$/;"	s	namespace:math
is_3d_coordinate_system	math/coordinate-systems.h	/^    template<typename> struct is_3d_coordinate_system : std::false_type { };$/;"	s	namespace:math
is_arithmetic	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool is_arithmetic() const CHAISCRIPT_NOEXCEPT { return (m_flags & (1/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
is_arithmetic_flag	chaiscript/dispatchkit/type_info.hpp	/^      static const int is_arithmetic_flag = 4;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const int
is_attribute_call	chaiscript/dispatchkit/dispatchkit.hpp	/^        static bool is_attribute_call(const std::vector<Proxy_Function> &t_funs, const std::vect/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:bool
is_attribute_function	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual bool is_attribute_function() const CHAISCRIPT_OVERRIDE { return m_is_attribute/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
is_attribute_function	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool is_attribute_function() const CHAISCRIPT_OVERRIDE { return true; } $/;"	f	class:chaiscript::dispatch::Attribute_Access	typeref:typename:bool
is_attribute_function	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool is_attribute_function() const { return false; }$/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
is_const	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_const() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_const	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool is_const() const CHAISCRIPT_NOEXCEPT { return (m_flags & (1 << i/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
is_const_flag	chaiscript/dispatchkit/type_info.hpp	/^      static const int is_const_flag = 0;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const int
is_consumer	pipeline/consumer.h	/^        struct is_consumer$/;"	s	namespace:raytracer::pipeline
is_escaped	chaiscript/language/chaiscript_parser.hpp	/^        bool is_escaped;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:bool
is_explicit	chaiscript/dispatchkit/dynamic_object.hpp	/^        bool is_explicit() const$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:bool
is_floating_point	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool is_floating_point(const Boxed_Value &t_bv)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
is_hex	chaiscript/language/chaiscript_parser.hpp	/^        bool is_hex;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:bool
is_hit_by	math/box.cpp	/^bool math::Box::is_hit_by(const Ray& ray) const$/;"	f	class:math::Box	typeref:typename:bool
is_hit_positively_by	math/box.cpp	/^bool math::Box::is_hit_positively_by(const Ray& ray) const$/;"	f	class:math::Box	typeref:typename:bool
is_infinite	math/box.cpp	/^bool math::Box::is_infinite() const$/;"	f	class:math::Box	typeref:typename:bool
is_infinite	math/interval.h	/^        bool is_infinite() const$/;"	f	struct:math::Interval	typeref:typename:bool
is_inside	data-structures/grid.h	/^        bool is_inside(const Position2D& p) const$/;"	f	class:data::Grid	typeref:typename:bool
is_inside	imaging/bitmap.cpp	/^bool imaging::Bitmap::is_inside(const Position2D& p) const$/;"	f	class:imaging::Bitmap	typeref:typename:bool
is_interpolated	chaiscript/language/chaiscript_parser.hpp	/^        bool is_interpolated;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:bool
is_local	chaiscript/dispatchkit/dispatchkit.hpp	/^            is_local   = 0x40000000,$/;"	e	enum:chaiscript::detail::Dispatch_Engine::get_object::Loc
is_null	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_null() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_octal	chaiscript/language/chaiscript_parser.hpp	/^        bool is_octal;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:bool
is_on_sphere	primitives/sphere-primitive.cpp	/^        bool is_on_sphere(const Point3D& p) const$/;"	f	class:__anon5226e87e0110::SphereImplementation	typeref:typename:bool	file:
is_operator	chaiscript/language/chaiscript_parser.hpp	/^      bool is_operator(const std::string &t_s) const {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
is_perpendicular_on	math/vector.h	/^        bool is_perpendicular_on(const Vector<N>& v) const$/;"	f	class:math::Vector	typeref:typename:bool
is_pointer	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_pointer() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_pointer	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool is_pointer() const CHAISCRIPT_NOEXCEPT { return (m_flags & (1 <</;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
is_pointer_flag	chaiscript/dispatchkit/type_info.hpp	/^      static const int is_pointer_flag = 2;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const int
is_prefix_in_use	command-line-parser.cpp	/^bool CommandLineParser::is_prefix_in_use(const std::string& prefix) const$/;"	f	class:CommandLineParser	typeref:typename:bool
is_processor	pipeline/processor.h	/^        struct is_processor$/;"	s	namespace:raytracer::pipeline
is_producer	pipeline/producer.h	/^        struct is_producer$/;"	s	namespace:raytracer::pipeline
is_ref	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_ref() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_reference	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool is_reference() const CHAISCRIPT_NOEXCEPT { return (m_flags & (1 /;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
is_reference_flag	chaiscript/dispatchkit/type_info.hpp	/^      static const int is_reference_flag = 1;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const int
is_return_value	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_return_value() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_type	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_type(const Type_Info &ti) const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_type	chaiscript/dispatchkit/dispatchkit.hpp	/^        bool is_type(const Boxed_Value &r, const std::string &user_typename) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:bool
is_undef	chaiscript/dispatchkit/boxed_value.hpp	/^      bool is_undef() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
is_undef	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool is_undef() const CHAISCRIPT_NOEXCEPT { return (m_flags & (1 << i/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
is_undef_flag	chaiscript/dispatchkit/type_info.hpp	/^      static const int is_undef_flag = 5;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const int
is_unit	math/vector.h	/^        bool is_unit() const$/;"	f	class:math::Vector	typeref:typename:bool
is_valid_index	data-structures/array.h	/^    bool is_valid_index(size_t index) const$/;"	f	class:array	typeref:typename:bool
is_void	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool is_void() const CHAISCRIPT_NOEXCEPT { return (m_flags & (1 << is/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
is_void_flag	chaiscript/dispatchkit/type_info.hpp	/^      static const int is_void_flag = 3;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const int
isspace	chaiscript/utility/json.hpp	/^    bool isspace(const char c)$/;"	f	namespace:json::__anon08466b710110	typeref:typename:bool
iterator	easylogging++.h	/^    typedef typename Container::iterator iterator;$/;"	t	class:el::base::utils::AbstractRegistry	typeref:typename:Container::iterator
iterator	easylogging++.h	/^    typedef typename Container::iterator iterator;$/;"	t	class:el::base::workarounds::IterableContainer	typeref:typename:Container::iterator
iterator	easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	class:el::base::utils::Registry	typeref:typename:Registry<T_Ptr,T_Key>::iterator
iterator	easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred<T_Ptr,Pred>::iterator
json	chaiscript/utility/json.hpp	/^namespace json {$/;"	n
json_escape	chaiscript/utility/json.hpp	/^    string json_escape( const string &str ) {$/;"	f	namespace:json::__anon08466b710110	typeref:typename:string
json_wrap	chaiscript/utility/json_wrap.hpp	/^  class json_wrap$/;"	c	namespace:chaiscript
kAm	easylogging++.h	/^    static const char* kAm                              =      "AM";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kAppNameFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app"/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kConfigurationComment	easylogging++.h	/^    static const char* kConfigurationComment                   =      "##";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kConfigurationLevel	easylogging++.h	/^    static const char* kConfigurationLevel                     =      "*";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kConfigurationLoggerId	easylogging++.h	/^    static const char* kConfigurationLoggerId                  =      "--";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kCrashSignals	easylogging++.h	/^    } kCrashSignals[] = {$/;"	v	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anoncd3bcdca1108[]
kCrashSignalsCount	easylogging++.h	/^    static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \//;"	v	namespace:el::base::consts	typeref:typename:const int
kCurrentHostFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kCurrentUserFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kDateTimeFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%date/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kDateTimeFormatSpecifierForFilename	easylogging++.h	/^    static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDays	easylogging++.h	/^    static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", /;"	v	namespace:el::base::consts	typeref:typename:const char * [7]
kDaysAbbrev	easylogging++.h	/^    static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Th/;"	v	namespace:el::base::consts	typeref:typename:const char * [7]
kDebugLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kDebugLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kDefaultDateTimeFormat	easylogging++.h	/^    static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultDateTimeFormatInFilename	easylogging++.h	/^    static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultLogFile	easylogging++.h	/^    static const char* kDefaultLogFile                         =      "logs\/myeasylog.log";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultLogFile	easylogging++.h	/^    static const char* kDefaultLogFile                         =      "logs\\\\myeasylog.log";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultLogFile	easylogging++.h	/^    static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultLogFileParam	easylogging++.h	/^    static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultLoggerId	easylogging++.h	/^    static const char* kDefaultLoggerId                        =      "default";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kDefaultMillisecondsWidth	easylogging++.h	/^    static const unsigned int  kDefaultMillisecondsWidth       =      3;$/;"	v	namespace:el::base::consts	typeref:typename:const unsigned int
kErrorLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kErrorLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kFatalLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kFatalLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kFilePathSeperator	easylogging++.h	/^    static const char* kFilePathSeperator                      =      "\/";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kFilePathSeperator	easylogging++.h	/^    static const char* kFilePathSeperator                      =      "\\\\";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kFormatSpecifierChar	easylogging++.h	/^    static const char  kFormatSpecifierChar                    =      '%';$/;"	v	namespace:el::base::consts	typeref:typename:const char
kFormatSpecifierCharValue	easylogging++.h	/^    static const char  kFormatSpecifierCharValue               =      'v';$/;"	v	namespace:el::base::consts	typeref:typename:const char
kInfoLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO ");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kInfoLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLogFileBaseFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbas/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLogFileFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLogFunctionFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLogLineFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLogLocationFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc"/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLoggerIdFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logg/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kLoggingFlagsParam	easylogging++.h	/^    static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kMaxLogPerContainer	easylogging++.h	/^    static const unsigned int kMaxLogPerContainer              =      100;$/;"	v	namespace:el::base::consts	typeref:typename:const unsigned int
kMaxLogPerCounter	easylogging++.h	/^    static const unsigned int kMaxLogPerCounter                =      100000;$/;"	v	namespace:el::base::consts	typeref:typename:const unsigned int
kMaxValid	easylogging++.h	/^    static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Configuratio/;"	m	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType
kMaxValid	easylogging++.h	/^    static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info)/;"	m	class:el::LevelHelper	typeref:typename:const base::type::EnumType
kMaxVerboseLevel	easylogging++.h	/^    static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::VerboseLevel
kMessageFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg"/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kMinValid	easylogging++.h	/^    static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Configuratio/;"	m	class:el::ConfigurationTypeHelper	typeref:typename:const base::type::EnumType
kMinValid	easylogging++.h	/^    static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace/;"	m	class:el::LevelHelper	typeref:typename:const base::type::EnumType
kMonths	easylogging++.h	/^    static const char* kMonths[12]                      =      { "January", "February", "March",/;"	v	namespace:el::base::consts	typeref:typename:const char * [12]
kMonthsAbbrev	easylogging++.h	/^    static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "Ma/;"	v	namespace:el::base::consts	typeref:typename:const char * [12]
kNullPointer	easylogging++.h	/^    static const char* kNullPointer                            =      "nullptr";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kPerformanceLoggerId	easylogging++.h	/^    static const char* kPerformanceLoggerId                    =      "performance";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kPerformanceTrackerDefaultLevel	easylogging++.h	/^    static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	v	namespace:el::base::consts	typeref:typename:const Level
kPm	easylogging++.h	/^    static const char* kPm                              =      "PM";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kSeverityLevelFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%leve/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kSeverityLevelShortFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kSourceFilenameMaxLength	easylogging++.h	/^    static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	v	namespace:el::base::consts	typeref:typename:const std::size_t
kSourceLineMaxLength	easylogging++.h	/^    static const std::size_t kSourceLineMaxLength              =      10;$/;"	v	namespace:el::base::consts	typeref:typename:const std::size_t
kSysLogLoggerId	easylogging++.h	/^    static const char* kSysLogLoggerId                         =      "syslog";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kThreadIdFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thre/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kTimeFormats	easylogging++.h	/^    } kTimeFormats[] = {$/;"	v	namespace:el::base::consts	typeref:typename:const struct el::base::consts::__anoncd3bcdca1008[]
kTimeFormatsCount	easylogging++.h	/^    static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ /;"	v	namespace:el::base::consts	typeref:typename:const int
kTraceLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kTraceLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kUnknownHost	easylogging++.h	/^    static const char* kUnknownHost                            =      "unknown-host";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kUnknownUser	easylogging++.h	/^    static const char* kUnknownUser                            =      "user";$/;"	v	namespace:el::base::consts	typeref:typename:const char *
kValidLoggerIdSymbols	easylogging++.h	/^    static const char* kValidLoggerIdSymbols                   =      "abcdefghijklmnopqrstuvwxy/;"	v	namespace:el::base::consts	typeref:typename:const char *
kVerboseLevelFormatSpecifier	easylogging++.h	/^    static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlev/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kVerboseLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kVerboseLevelLogValue  =   ELPP_LITERAL("VER");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kVerboseLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kWarningLevelLogValue	easylogging++.h	/^    static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARN ");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kWarningLevelShortLogValue	easylogging++.h	/^    static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	v	namespace:el::base::consts	typeref:typename:const base::type::char_t *
kYearBase	easylogging++.h	/^    static const int kYearBase                          =      1900;$/;"	v	namespace:el::base::consts	typeref:typename:const int
keyword_alphabet	chaiscript/language/chaiscript_parser.hpp	/^        ,   keyword_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
last	pipeline/pipeline-builder.h	/^                std::shared_ptr<pipeline::Producer<T2>> last;$/;"	m	struct:raytracer::pipeline::_private_::PipelineBuilder	typeref:typename:std::shared_ptr<pipeline::Producer<T2>>
left_and_right_spheres	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    auto left_and_right_spheres = make_union(primitives);$/;"	v	typeref:typename:auto
left_shift	chaiscript/dispatchkit/operators.hpp	/^          auto left_shift(L l, R r) -> decltype(( l << r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l<<r))
left_shift	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr left_shift(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
left_sphere	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    auto left_sphere = translate(Vector3D(-1, 0, 0), sphere());$/;"	v	typeref:typename:auto
length	chaiscript/utility/json.hpp	/^        int length() const {$/;"	f	class:json::JSON	typeref:typename:int
lengthof_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   lengthof_alphabet = 256$/;"	e	enum:chaiscript::parser::detail::Alphabet
less_than	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool less_than(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
less_than	chaiscript/dispatchkit/operators.hpp	/^          auto less_than(L l, R r) -> decltype(( l < r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l<r))
less_than	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr less_than(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
less_than	chaiscript/language/chaiscript_algebraic.hpp	/^      equals, less_than, greater_than, less_than_equal, greater_than_equal, not_equal, $/;"	e	enum:chaiscript::Operators::Opers
less_than_equal	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool less_than_equal(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
less_than_equal	chaiscript/dispatchkit/operators.hpp	/^          auto less_than_equal(L l, R r) -> decltype(( l <= r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l<=r))
less_than_equal	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr less_than_equal(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
less_than_equal	chaiscript/language/chaiscript_algebraic.hpp	/^      equals, less_than, greater_than, less_than_equal, greater_than_equal, not_equal, $/;"	e	enum:chaiscript::Operators::Opers
level	easylogging++.h	/^    inline Level level(void) const { return m_level; }$/;"	f	class:el::LogMessage	typeref:typename:Level
level	easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::Configuration	typeref:typename:Level
level	easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:Level
level	easylogging++.h	/^    inline base::type::VerboseLevel level(void) const {$/;"	f	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel
library	chaiscript/chaiscript_stdlib.hpp	/^      static ModulePtr library()$/;"	f	class:chaiscript::Std_Lib	typeref:typename:ModulePtr
library	chaiscript/utility/json_wrap.hpp	/^      static ModulePtr library(ModulePtr m = std::make_shared<Module>())$/;"	f	class:chaiscript::json_wrap	typeref:typename:ModulePtr
lies_behind	math/plane.cpp	/^bool math::lies_behind(const math::Plane& plane, const math::Point3D& point)$/;"	f	class:math	typeref:typename:bool
lies_in_front_of	math/plane.cpp	/^bool math::lies_in_front_of(const math::Plane& plane, const Point3D& point)$/;"	f	class:math	typeref:typename:bool
lies_on	math/plane.cpp	/^bool math::lies_on(const math::Plane& plane, const math::Point3D& point, double epsilon)$/;"	f	class:math	typeref:typename:bool
light_sources	raytracers/scene.h	/^        std::vector<LightSource> light_sources;$/;"	m	struct:raytracer::Scene	typeref:typename:std::vector<LightSource>
lightrays_to	lights/point-light.cpp	/^std::vector<LightRay> raytracer::lights::_private_::PointLightImplementation::lightrays_to(const/;"	f	class:raytracer::lights::_private_::PointLightImplementation	typeref:typename:std::vector<LightRay>
lights	lights/light-source.h	/^    namespace lights$/;"	n	namespace:raytracer
lights	lights/omnidirectional-point-light.h	/^    namespace lights$/;"	n	namespace:raytracer
lights	lights/point-light.h	/^    namespace lights$/;"	n	namespace:raytracer
line	chaiscript/language/chaiscript_common.hpp	/^    int line;$/;"	m	struct:chaiscript::File_Position	typeref:typename:int
line	chaiscript/language/chaiscript_parser.hpp	/^        int line;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:int
line	easylogging++.h	/^    inline unsigned long int line(void) const { return m_line; } \/\/ NOLINT$/;"	f	class:el::LogMessage	typeref:typename:unsigned long int
lineNumber	easylogging++.h	/^    inline unsigned long int lineNumber(void) const {$/;"	f	class:el::base::HitCounter	typeref:typename:unsigned long int
linear	math/functions/easing/linear-easing-function.cpp	/^EasingFunction math::functions::easing::linear()$/;"	f	class:math::functions::easing	typeref:typename:EasingFunction
link_to	pipeline/producer.h	/^            T link_to(T receiver)$/;"	f	class:raytracer::pipeline::Producer	typeref:typename:T
list	easylogging++.h	/^    virtual inline Container& list(void) ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:Container &
list	easylogging++.h	/^    virtual inline const Container& list(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:const Container &
list_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr list_type(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
load_bitmap	imaging/bmp-format.cpp	/^std::shared_ptr<Bitmap> imaging::load_bitmap(const std::string& path)$/;"	f	class:imaging	typeref:typename:std::shared_ptr<Bitmap>
load_file	chaiscript/language/chaiscript_engine.hpp	/^    static std::string load_file(const std::string &t_filename) {$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
load_module	chaiscript/language/chaiscript_engine.hpp	/^    std::string load_module(const std::string &t_module_name)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
load_module	chaiscript/language/chaiscript_engine.hpp	/^    void load_module(const std::string &t_module_name, const std::string &t_filename)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:void
load_module_error	chaiscript/language/chaiscript_engine.hpp	/^      load_module_error(const std::string &t_reason) CHAISCRIPT_NOEXCEPT$/;"	f	struct:chaiscript::exception::load_module_error
load_module_error	chaiscript/language/chaiscript_engine.hpp	/^    struct load_module_error : std::runtime_error$/;"	s	namespace:chaiscript::exception
loc_mask	chaiscript/dispatchkit/dispatchkit.hpp	/^            loc_mask   = 0x0000FFFF$/;"	e	enum:chaiscript::detail::Dispatch_Engine::get_object::Loc
local_position	primitives/hit.h	/^        HitPosition local_position;$/;"	m	struct:raytracer::Hit	typeref:typename:HitPosition
located	chaiscript/dispatchkit/dispatchkit.hpp	/^            located    = 0x80000000,$/;"	e	enum:chaiscript::detail::Dispatch_Engine::get_object::Loc
location	chaiscript/language/chaiscript_common.hpp	/^      Parse_Location location;$/;"	m	struct:chaiscript::AST_Node	typeref:typename:Parse_Location
lock	easylogging++.h	/^    inline void lock(void) {$/;"	f	class:el::base::threading::internal::Mutex	typeref:typename:void
lock	easylogging++.h	/^    virtual inline base::threading::Mutex& lock(void) ELPP_FINAL { return m_mutex; }$/;"	f	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex &
lock_guard	chaiscript/chaiscript_threading.hpp	/^          explicit lock_guard(T &t) : std::lock_guard<T>(t) {}$/;"	f	class:chaiscript::detail::threading::lock_guard
lock_guard	chaiscript/chaiscript_threading.hpp	/^      class lock_guard : public std::lock_guard<T>$/;"	c	namespace:chaiscript::detail::threading
log	easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Configuration	typeref:typename:void
log	easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Logger	typeref:typename:void
log	easylogging++.h	/^    virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::base::LogFormat	typeref:typename:void
logBuilder	easylogging++.h	/^    inline LogBuilder* logBuilder(void) const {$/;"	f	class:el::Logger	typeref:typename:LogBuilder *
logDispatchCallback	easylogging++.h	/^    inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:T *
logFlushThreshold	easylogging++.h	/^    inline std::size_t logFlushThreshold(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:std::size_t
logFormat	easylogging++.h	/^    inline const base::LogFormat& logFormat(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const base::LogFormat &
logLine	easylogging++.h	/^    inline base::type::string_t logLine(void) { return m_logLine; }$/;"	f	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t
logMessage	easylogging++.h	/^    inline LogMessage* logMessage(void) { return &m_logMessage; }$/;"	f	class:el::base::AsyncLogItem	typeref:typename:LogMessage *
logMessage	easylogging++.h	/^    inline const LogMessage* logMessage(void) const { return m_logMessage; }$/;"	f	class:el::LogDispatchData	typeref:typename:const LogMessage *
logStreamsReference	easylogging++.h	/^    inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap *
logger	easylogging++.h	/^    inline Logger* logger(void) const { return m_logger; }$/;"	f	class:el::LogMessage	typeref:typename:Logger *
logging	logging.h	/^namespace logging$/;"	n
logical_compliment	chaiscript/dispatchkit/operators.hpp	/^          auto logical_compliment(L l) -> decltype(( !l ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((!l))
logical_compliment	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr logical_compliment(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
lookat	tests/cameras/camera-transformation-tests.cpp	/^    Point3D lookat(0, 0, 1);$/;"	v	typeref:typename:Point3D
lookat	tests/cameras/camera-transformation-tests.cpp	/^    Point3D lookat(1, 0, 0);$/;"	v	typeref:typename:Point3D
lookat	tests/cameras/camera-transformation-tests.cpp	/^    Point3D lookat(1, 0, 1);$/;"	v	typeref:typename:Point3D
lower	math/interval.h	/^        T lower, upper;$/;"	m	struct:math::Interval	typeref:typename:T
ltrim	easylogging++.h	/^    static inline std::string& ltrim(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
m_accumulated	util/base64.h	/^    unsigned m_accumulated;$/;"	m	class:Base64	typeref:typename:unsigned
m_accumulator	util/base64.h	/^    std::stringstream m_accumulator;$/;"	m	class:Base64	typeref:typename:std::stringstream
m_active_loaded_modules	chaiscript/language/chaiscript_engine.hpp	/^    std::set<std::string> m_active_loaded_modules;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:std::set<std::string>
m_alphabet	chaiscript/language/chaiscript_parser.hpp	/^      bool m_alphabet[detail::max_alphabet][detail::lengthof_alphabet];$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool[][]
m_antialias	demos/demo.h	/^        unsigned m_antialias;$/;"	m	class:demos::Demo	typeref:typename:unsigned
m_argc	easylogging++.h	/^    int m_argc;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:int
m_args	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::vector<Boxed_Value> m_args;$/;"	m	class:chaiscript::dispatch::Bound_Function	typeref:typename:std::vector<Boxed_Value>
m_argv	easylogging++.h	/^    char** m_argv;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:char **
m_arity	chaiscript/dispatchkit/proxy_functions.hpp	/^        int m_arity;$/;"	m	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:int
m_array_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_array_loc;$/;"	m	struct:chaiscript::eval::Dot_Access_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_asyncDispatchWorker	easylogging++.h	/^    base::IWorker* m_asyncDispatchWorker;$/;"	m	class:el::base::Storage	typeref:typename:base::IWorker *
m_asyncLogQueue	easylogging++.h	/^    base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	class:el::base::Storage	typeref:typename:base::AsyncLogQueue *
m_attr	chaiscript/dispatchkit/proxy_functions.hpp	/^        T Class::* m_attr;$/;"	m	class:chaiscript::dispatch::Attribute_Access	typeref:typename:T Class::*
m_attrs	chaiscript/dispatchkit/boxed_value.hpp	/^        std::unique_ptr<std::map<std::string, std::shared_ptr<Data>>> m_attrs;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:std::unique_ptr<std::map<std::string,std::shared_ptr<Data>>>
m_attrs	chaiscript/dispatchkit/dynamic_object.hpp	/^        std::map<std::string, Boxed_Value> m_attrs;$/;"	m	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:std::map<std::string,Boxed_Value>
m_bare_type_info	chaiscript/dispatchkit/type_info.hpp	/^      const std::type_info *m_bare_type_info;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const std::type_info *
m_begin	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typename Container::const_iterator m_begin;$/;"	m	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:Container::const_iterator
m_begin	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typename Container::iterator m_begin;$/;"	m	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:Container::iterator
m_bitmap_size	demos/demo.h	/^        unsigned m_bitmap_size;$/;"	m	class:demos::Demo	typeref:typename:unsigned
m_bits	util/base64.h	/^    unsigned m_bits;$/;"	m	class:Base64	typeref:typename:unsigned
m_body	math/function.h	/^        std::shared_ptr<FunctionBody<R, Ts...>> m_body;$/;"	m	class:math::Function	typeref:typename:std::shared_ptr<FunctionBody<R,Ts...>>
m_boxed_functions	chaiscript/dispatchkit/dispatchkit.hpp	/^          std::vector<std::pair<std::string, Boxed_Value>> m_boxed_functions;$/;"	m	struct:chaiscript::detail::Dispatch_Engine::State	typeref:typename:std::vector<std::pair<std::string,Boxed_Value>>
m_buffer	util/base64.h	/^    uint32_t m_buffer;$/;"	m	class:Base64	typeref:typename:uint32_t
m_child	primitives/decorator-primitive.cpp	/^        Primitive m_child;$/;"	m	class:__anon08e8fc9a0110::DecoratorImplementation	typeref:typename:Primitive	file:
m_child1	primitives/union-primitive.cpp	/^        Primitive m_child1;$/;"	m	class:__anond3e0bd200110::BinaryUnionImplementation	typeref:typename:Primitive	file:
m_child2	primitives/union-primitive.cpp	/^        Primitive m_child2;$/;"	m	class:__anond3e0bd200110::BinaryUnionImplementation	typeref:typename:Primitive	file:
m_clone_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_clone_loc;$/;"	m	struct:chaiscript::eval::Equation_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_color	lights/omnidirectional-point-light.cpp	/^        imaging::Color m_color;$/;"	m	class:__anon4ff1f30d0110::OmnidirectionalPointLight	typeref:typename:imaging::Color	file:
m_commandLineArgs	easylogging++.h	/^    base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	class:el::base::Storage	typeref:typename:base::utils::CommandLineArgs
m_configurationFile	easylogging++.h	/^    std::string m_configurationFile;$/;"	m	class:el::Configurations	typeref:typename:std::string
m_configurationType	easylogging++.h	/^        ConfigurationType m_configurationType;$/;"	m	class:el::Configuration::Predicate	typeref:typename:ConfigurationType
m_configurationType	easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	class:el::Configuration	typeref:typename:ConfigurationType
m_configurations	easylogging++.h	/^    Configurations m_configurations;$/;"	m	class:el::Logger	typeref:typename:Configurations
m_configurations	easylogging++.h	/^    Configurations* m_configurations;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:Configurations *
m_const_data_ptr	chaiscript/dispatchkit/boxed_value.hpp	/^        const void *m_const_data_ptr;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:const void *
m_continueRunning	easylogging++.h	/^    bool m_continueRunning;$/;"	m	class:el::base::AsyncDispatchWorker	typeref:typename:bool
m_continueRunningMutex	easylogging++.h	/^    base::threading::Mutex m_continueRunningMutex;$/;"	m	class:el::base::AsyncDispatchWorker	typeref:typename:base::threading::Mutex
m_conversion_saves	chaiscript/dispatchkit/type_conversions.hpp	/^      mutable chaiscript::detail::threading::Thread_Storage<Conversion_Saves> m_conversion_saves/;"	m	class:chaiscript::Type_Conversions	typeref:typename:chaiscript::detail::threading::Thread_Storage<Conversion_Saves>
m_conversions	chaiscript/dispatchkit/dispatchkit.hpp	/^        Type_Conversions m_conversions;$/;"	m	class:chaiscript::detail::Dispatch_Engine	typeref:typename:Type_Conversions
m_conversions	chaiscript/dispatchkit/dispatchkit.hpp	/^        Type_Conversions_State m_conversions;$/;"	m	class:chaiscript::detail::Dispatch_State	typeref:typename:Type_Conversions_State
m_conversions	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<Type_Conversion> m_conversions;$/;"	m	class:chaiscript::Module	typeref:typename:std::vector<Type_Conversion>
m_conversions	chaiscript/dispatchkit/function_call_detail.hpp	/^          const Type_Conversions *m_conversions;$/;"	m	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper	typeref:typename:const Type_Conversions *
m_conversions	chaiscript/dispatchkit/type_conversions.hpp	/^      std::reference_wrapper<const Type_Conversions> m_conversions;$/;"	m	class:chaiscript::Type_Conversions_State	typeref:typename:std::reference_wrapper<const Type_Conversions>
m_conversions	chaiscript/dispatchkit/type_conversions.hpp	/^      std::set<std::shared_ptr<detail::Type_Conversion_Base>> m_conversions;$/;"	m	class:chaiscript::Type_Conversions	typeref:typename:std::set<std::shared_ptr<detail::Type_Conversion_Base>>
m_convertableTypes	chaiscript/dispatchkit/type_conversions.hpp	/^      std::set<const std::type_info *, Less_Than> m_convertableTypes;$/;"	m	class:chaiscript::Type_Conversions	typeref:typename:std::set<const std::type_info *,Less_Than>
m_coords	math/point.h	/^        std::array<double, N> m_coords;$/;"	m	class:math::Point	typeref:typename:std::array<double,N>
m_coords	math/vector.h	/^        std::array<double, N> m_coords;$/;"	m	class:math::Vector	typeref:typename:std::array<double,N>
m_customFormatSpecifiers	easylogging++.h	/^    std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	class:el::base::Storage	typeref:typename:std::vector<CustomFormatSpecifier>
m_data	chaiscript/dispatchkit/any.hpp	/^            T m_data;$/;"	m	struct:chaiscript::detail::Any::Data_Impl	typeref:typename:T
m_data	chaiscript/dispatchkit/any.hpp	/^        std::unique_ptr<Data> m_data;$/;"	m	class:chaiscript::detail::Any	typeref:typename:std::unique_ptr<Data>
m_data	chaiscript/dispatchkit/boxed_value.hpp	/^      std::shared_ptr<Data> m_data;$/;"	m	class:chaiscript::Boxed_Value	typeref:typename:std::shared_ptr<Data>
m_data	chaiscript/language/chaiscript_engine.hpp	/^        void *m_data;$/;"	m	struct:chaiscript::detail::Loadable_Module::DLModule	typeref:typename:void *
m_data	data-structures/array.h	/^    std::shared_ptr<T> m_data;$/;"	m	class:array	typeref:typename:std::shared_ptr<T>
m_data	easylogging++.h	/^    const LogDispatchData* m_data;$/;"	m	class:el::base::DefaultLogDispatchCallback	typeref:typename:const LogDispatchData *
m_data_ptr	chaiscript/dispatchkit/boxed_value.hpp	/^        void *m_data_ptr;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:void *
m_dateTimeFormat	easylogging++.h	/^    std::string m_dateTimeFormat;$/;"	m	class:el::base::LogFormat	typeref:typename:std::string
m_defaultConfigurations	easylogging++.h	/^    Configurations m_defaultConfigurations;$/;"	m	class:el::base::RegisteredLoggers	typeref:typename:Configurations
m_defaultLogBuilder	easylogging++.h	/^    LogBuilderPtr m_defaultLogBuilder;$/;"	m	class:el::base::RegisteredLoggers	typeref:typename:LogBuilderPtr
m_degrees	math/angle.h	/^        double m_degrees;$/;"	m	class:math::Angle	typeref:typename:double
m_description	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::string m_description;$/;"	m	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:std::string
m_dispatchAction	easylogging++.h	/^    base::DispatchAction m_dispatchAction;$/;"	m	class:el::LogDispatchData	typeref:typename:base::DispatchAction
m_dispatchAction	easylogging++.h	/^    base::DispatchAction m_dispatchAction;$/;"	m	class:el::base::LogDispatcher	typeref:typename:base::DispatchAction
m_dispatchData	easylogging++.h	/^    LogDispatchData m_dispatchData;$/;"	m	class:el::base::AsyncLogItem	typeref:typename:LogDispatchData
m_dlmodule	chaiscript/language/chaiscript_engine.hpp	/^      DLModule m_dlmodule;$/;"	m	struct:chaiscript::detail::Loadable_Module	typeref:typename:DLModule
m_doti	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          const Type_Info m_doti;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:const Type_Info
m_doti	chaiscript/dispatchkit/proxy_functions.hpp	/^        Type_Info m_doti;$/;"	m	class:chaiscript::dispatch::Param_Types	typeref:typename:Type_Info
m_ds	chaiscript/language/chaiscript_common.hpp	/^          std::reference_wrapper<const chaiscript::detail::Dispatch_State> m_ds;$/;"	m	struct:chaiscript::eval::detail::Function_Push_Pop	typeref:typename:std::reference_wrapper<const chaiscript::detail::Dispatch_State>
m_ds	chaiscript/language/chaiscript_common.hpp	/^          std::reference_wrapper<const chaiscript::detail::Dispatch_State> m_ds;$/;"	m	struct:chaiscript::eval::detail::Stack_Push_Pop	typeref:typename:std::reference_wrapper<const chaiscript::detail::Dispatch_State>
m_ds	chaiscript/language/chaiscript_common.hpp	/^        std::reference_wrapper<const chaiscript::detail::Dispatch_State> m_ds;$/;"	m	struct:chaiscript::eval::detail::Scope_Push_Pop	typeref:typename:std::reference_wrapper<const chaiscript::detail::Dispatch_State>
m_duration	animation/animation.h	/^        animation::Duration m_duration;$/;"	m	class:animation::Animation	typeref:typename:animation::Duration
m_duration	demos/demo.h	/^        animation::Duration m_duration;$/;"	m	class:demos::Demo	typeref:typename:animation::Duration
m_e	chaiscript/dispatchkit/dispatchkit.hpp	/^                  std::reference_wrapper<Dispatch_Engine> m_e;$/;"	m	struct:chaiscript::detail::Dispatch_Engine::call_member::__anon2c2de5d30602::This_Foist	typeref:typename:std::reference_wrapper<Dispatch_Engine>
m_elements	math/matrix.h	/^        std::unique_ptr<std::array<double, N * N>> m_elements;$/;"	m	class:math::Matrix	typeref:typename:std::unique_ptr<std::array<double,N * N>>
m_elts	data-structures/grid.h	/^        std::unique_ptr<T[]> m_elts;$/;"	m	class:data::Grid	typeref:typename:std::unique_ptr<T[]>
m_enabled	easylogging++.h	/^    bool m_enabled;$/;"	m	class:el::Callback	typeref:typename:bool
m_enabledMap	easylogging++.h	/^    std::map<Level, bool> m_enabledMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,bool>
m_end	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typename Container::const_iterator m_end;$/;"	m	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:Container::const_iterator
m_end	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typename Container::iterator m_end;$/;"	m	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:Container::iterator
m_end	chaiscript/language/chaiscript_parser.hpp	/^          std::string::const_iterator m_end;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:std::string::const_iterator
m_engine	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::reference_wrapper<Dispatch_Engine> m_engine;$/;"	m	class:chaiscript::detail::Dispatch_State	typeref:typename:std::reference_wrapper<Dispatch_Engine>
m_engine	chaiscript/language/chaiscript_engine.hpp	/^    chaiscript::detail::Dispatch_Engine m_engine;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:chaiscript::detail::Dispatch_Engine
m_evals	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<std::string> m_evals;$/;"	m	class:chaiscript::Module	typeref:typename:std::vector<std::string>
m_evaluated	util/lazy.h	/^    bool m_evaluated;$/;"	m	class:Lazy	typeref:typename:bool
m_f	chaiscript/dispatchkit/proxy_functions.hpp	/^        Callable m_f;$/;"	m	class:chaiscript::dispatch::Dynamic_Proxy_Function_Impl	typeref:typename:Callable
m_f	chaiscript/dispatchkit/proxy_functions.hpp	/^        Callable m_f;$/;"	m	class:chaiscript::dispatch::Proxy_Function_Callable_Impl	typeref:typename:Callable
m_f	chaiscript/dispatchkit/proxy_functions.hpp	/^        Const_Proxy_Function m_f;$/;"	m	class:chaiscript::dispatch::Bound_Function	typeref:typename:Const_Proxy_Function
m_f	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::reference_wrapper<std::function<Func>> m_f;$/;"	m	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:std::reference_wrapper<std::function<Func>>
m_f	math/function.h	/^        Function<R1(Ts...)> m_f;$/;"	m	class:math::Composition	typeref:typename:Function<R1 (Ts...)>
m_file	easylogging++.h	/^    std::string m_file;$/;"	m	class:el::LogMessage	typeref:typename:std::string
m_fileStreamMap	easylogging++.h	/^    std::map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,base::FileStreamPtr>
m_filename	chaiscript/language/chaiscript_parser.hpp	/^      std::shared_ptr<std::string> m_filename;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::shared_ptr<std::string>
m_filename	easylogging++.h	/^        const char* m_filename;$/;"	m	class:el::base::HitCounter::Predicate	typeref:typename:const char *
m_filename	easylogging++.h	/^    const char* m_filename;$/;"	m	class:el::base::HitCounter	typeref:typename:const char *
m_filenameMap	easylogging++.h	/^    std::map<Level, std::string> m_filenameMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,std::string>
m_flags	chaiscript/dispatchkit/type_info.hpp	/^      unsigned int m_flags;$/;"	m	class:chaiscript::Type_Info	typeref:typename:unsigned int
m_flags	easylogging++.h	/^    base::type::EnumType m_flags;$/;"	m	class:el::base::LogFormat	typeref:typename:base::type::EnumType
m_flags	easylogging++.h	/^    base::type::EnumType m_flags;$/;"	m	class:el::base::Storage	typeref:typename:base::type::EnumType
m_format	easylogging++.h	/^    base::type::string_t m_format;$/;"	m	class:el::base::LogFormat	typeref:typename:base::type::string_t
m_formatSpecifier	easylogging++.h	/^    const char* m_formatSpecifier;$/;"	m	class:el::CustomFormatSpecifier	typeref:typename:const char *
m_fps	demos/demo.h	/^        unsigned m_fps;$/;"	m	class:demos::Demo	typeref:typename:unsigned
m_fps	pipeline/animation-processor.cpp	/^        double m_fps;$/;"	m	class:__anon103f23280110::AnimationProducer	typeref:typename:double	file:
m_frame_index	imaging/wif-format.h	/^        unsigned m_frame_index;$/;"	m	class:imaging::WIF	typeref:typename:unsigned
m_frame_index	pipeline/wif-processor.cpp	/^        unsigned m_frame_index;$/;"	m	class:__anon3a087a4e0110::WifProcessor	typeref:typename:unsigned	file:
m_from	chaiscript/dispatchkit/type_conversions.hpp	/^        Type_Info m_from;$/;"	m	class:chaiscript::detail::Type_Conversion_Base	typeref:typename:Type_Info
m_fun_name	chaiscript/language/chaiscript_eval.hpp	/^        std::string m_fun_name;$/;"	m	struct:chaiscript::eval::Dot_Access_AST_Node	typeref:typename:std::string
m_func	chaiscript/dispatchkit/callable_traits.hpp	/^        Ret(*m_func)(Param...);$/;"	m	struct:chaiscript::dispatch::detail::Fun_Caller	typeref:typename:Ret (*)(Param...)
m_func	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          Proxy_Function m_func;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:Proxy_Function
m_func	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          Proxy_Function m_func;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:Proxy_Function
m_func	chaiscript/dispatchkit/type_conversions.hpp	/^        Callable m_func;$/;"	m	class:chaiscript::detail::Type_Conversion_Impl	typeref:typename:Callable
m_func	chaiscript/language/chaiscript_engine.hpp	/^      DLSym<Create_Module_Func> m_func;$/;"	m	struct:chaiscript::detail::Loadable_Module	typeref:typename:DLSym<Create_Module_Func>
m_func	easylogging++.h	/^    std::string m_func;$/;"	m	class:el::LogMessage	typeref:typename:std::string
m_funcs	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::vector<Proxy_Function> m_funcs;$/;"	m	class:chaiscript::detail::Dispatch_Function	typeref:typename:std::vector<Proxy_Function>
m_funcs	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<std::pair<Proxy_Function, std::string> > m_funcs;$/;"	m	class:chaiscript::Module	typeref:typename:std::vector<std::pair<Proxy_Function,std::string>>
m_funcs	chaiscript/dispatchkit/function_call_detail.hpp	/^          std::vector<Const_Proxy_Function> m_funcs;$/;"	m	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper	typeref:typename:std::vector<Const_Proxy_Function>
m_function	animation/animation.h	/^        math::Function<T(TimeStamp)> m_function;$/;"	m	class:animation::Animation	typeref:typename:math::Function<T (TimeStamp)>
m_function	materials/composition-material.cpp	/^        math::Function<Material(const Point2D&)> m_function;$/;"	m	class:__anon13f113d70110::CompositionMaterial2D	typeref:typename:math::Function<Material (const Point2D &)>	file:
m_function	materials/composition-material.cpp	/^        math::Function<Material(const Point3D&)> m_function;$/;"	m	class:__anon13f113d70110::CompositionMaterial3D	typeref:typename:math::Function<Material (const Point3D &)>	file:
m_function	materials/material.cpp	/^        math::Function<MaterialProperties(const Point2D&)> m_function;$/;"	m	class:__anonefa653160110::FunctionMaterial2D	typeref:typename:math::Function<MaterialProperties (const Point2D &)>	file:
m_function	materials/material.cpp	/^        math::Function<MaterialProperties(const Point3D&)> m_function;$/;"	m	class:__anonefa653160110::FunctionMaterial3D	typeref:typename:math::Function<MaterialProperties (const Point3D &)>	file:
m_function	util/lazy.h	/^    std::function<T()> m_function;$/;"	m	class:Lazy	typeref:typename:std::function<T ()>
m_function_objects	chaiscript/dispatchkit/dispatchkit.hpp	/^          std::vector<std::pair<std::string, Proxy_Function>> m_function_objects;$/;"	m	struct:chaiscript::detail::Dispatch_Engine::State	typeref:typename:std::vector<std::pair<std::string,Proxy_Function>>
m_functions	chaiscript/dispatchkit/dispatchkit.hpp	/^          std::vector<std::pair<std::string, std::shared_ptr<std::vector<Proxy_Function>>>> m_fu/;"	m	struct:chaiscript::detail::Dispatch_Engine::State	typeref:typename:std::vector<std::pair<std::string,std::shared_ptr<std::vector<Proxy_Function>>>>
m_g	math/function.h	/^        Function<R2(RT)> m_g;$/;"	m	class:math::Composition	typeref:typename:Function<R2 (RT)>
m_global_objects	chaiscript/dispatchkit/dispatchkit.hpp	/^          std::map<std::string, Boxed_Value> m_global_objects;$/;"	m	struct:chaiscript::detail::Dispatch_Engine::State	typeref:typename:std::map<std::string,Boxed_Value>
m_globals	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<std::pair<Boxed_Value, std::string> > m_globals;$/;"	m	class:chaiscript::Module	typeref:typename:std::vector<std::pair<Boxed_Value,std::string>>
m_guard	chaiscript/dispatchkit/proxy_functions.hpp	/^        Proxy_Function m_guard;$/;"	m	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:Proxy_Function
m_has_arithmetic_param	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool m_has_arithmetic_param;$/;"	m	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:bool
m_has_solutions	math/quadratic_equation.h	/^        bool m_has_solutions;$/;"	m	class:math::QuadraticEquation	typeref:typename:bool
m_has_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool m_has_types;$/;"	m	class:chaiscript::dispatch::Param_Types	typeref:typename:bool
m_height	data-structures/grid.h	/^        unsigned m_height;$/;"	m	class:data::Grid	typeref:typename:unsigned
m_hitCounts	easylogging++.h	/^    std::size_t m_hitCounts;$/;"	m	class:el::base::HitCounter	typeref:typename:std::size_t
m_horizontal_size	renderers/renderer.h	/^                unsigned m_horizontal_size, m_vertical_size;$/;"	m	class:raytracer::renderers::_private_::RendererImplementation	typeref:typename:unsigned
m_horizontal_subdivisions	math/rasterizer.h	/^        unsigned m_horizontal_subdivisions;$/;"	m	class:math::Rasterizer	typeref:typename:unsigned
m_id	easylogging++.h	/^    std::string m_id;$/;"	m	class:el::Logger	typeref:typename:std::string
m_impl	materials/material.h	/^        std::shared_ptr<materials::_private_::MaterialImplementation> m_impl;$/;"	m	class:raytracer::Material	typeref:typename:std::shared_ptr<materials::_private_::MaterialImplementation>
m_impl	performance/performance.h	/^        performance::_private_::CounterImplementation* m_impl;$/;"	m	class:performance::Counter	typeref:typename:performance::_private_::CounterImplementation *
m_impl	primitives/primitive.h	/^        std::shared_ptr<primitives::_private_::PrimitiveImplementation> m_impl;$/;"	m	class:raytracer::Primitive	typeref:typename:std::shared_ptr<primitives::_private_::PrimitiveImplementation>
m_implementation	cameras/camera.h	/^        std::shared_ptr<cameras::_private_::CameraImplementation> m_implementation;$/;"	m	class:raytracer::Camera	typeref:typename:std::shared_ptr<cameras::_private_::CameraImplementation>
m_implementation	lights/light-source.h	/^        std::shared_ptr<lights::_private_::LightSourceImplementation> m_implementation;$/;"	m	class:raytracer::LightSource	typeref:typename:std::shared_ptr<lights::_private_::LightSourceImplementation>
m_implementation	raytracers/ray-tracer.h	/^        std::shared_ptr<raytracers::_private_::RayTracerImplementation> m_implementation;$/;"	m	class:raytracer::RayTracer	typeref:typename:std::shared_ptr<raytracers::_private_::RayTracerImplementation>
m_implementation	renderers/renderer.h	/^        std::shared_ptr<renderers::_private_::RendererImplementation> m_implementation;$/;"	m	class:raytracer::Renderer	typeref:typename:std::shared_ptr<renderers::_private_::RendererImplementation>
m_implementation	samplers/sampler.h	/^        std::shared_ptr<samplers::_private_::SamplerImplementation> m_implementation;$/;"	m	class:raytracer::Sampler	typeref:typename:std::shared_ptr<samplers::_private_::SamplerImplementation>
m_implementation	tasks/task-scheduler.h	/^        std::shared_ptr<tasks::schedulers::_private_::TaskSchedulerImplementation> m_implementat/;"	m	class:tasks::TaskScheduler	typeref:typename:std::shared_ptr<tasks::schedulers::_private_::TaskSchedulerImplementation>
m_instances	chaiscript/chaiscript_threading.hpp	/^            mutable std::unordered_map<std::thread::id, std::shared_ptr<T> > m_instances;$/;"	m	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:std::unordered_map<std::thread::id,std::shared_ptr<T>>
m_isConfigured	easylogging++.h	/^    bool m_isConfigured;$/;"	m	class:el::Logger	typeref:typename:bool
m_isFromFile	easylogging++.h	/^    bool m_isFromFile;$/;"	m	class:el::Configurations	typeref:typename:bool
m_is_attribute	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          bool m_is_attribute;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
m_is_ref	chaiscript/dispatchkit/boxed_value.hpp	/^        bool m_is_ref;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:bool
m_key	chaiscript/chaiscript_threading.hpp	/^            void *m_key;$/;"	m	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:void *
m_lambda	math/function.h	/^        std::function<R(Ts...)> m_lambda;$/;"	m	class:math::LambdaFunctionBody	typeref:typename:std::function<R (Ts...)>
m_lambda	tasks/lambda-task.cpp	/^        std::function<void()> m_lambda;$/;"	m	class:__anone3f7ea6c0110::LambdaTask	typeref:typename:std::function<void ()>	file:
m_last_col	chaiscript/language/chaiscript_parser.hpp	/^          int m_last_col;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:int
m_level	easylogging++.h	/^        Level m_level;$/;"	m	class:el::Configuration::Predicate	typeref:typename:Level
m_level	easylogging++.h	/^    Level m_level;$/;"	m	class:el::Configuration	typeref:typename:Level
m_level	easylogging++.h	/^    Level m_level;$/;"	m	class:el::LogMessage	typeref:typename:Level
m_level	easylogging++.h	/^    Level m_level;$/;"	m	class:el::base::LogFormat	typeref:typename:Level
m_level	easylogging++.h	/^    base::type::VerboseLevel m_level;$/;"	m	class:el::base::VRegistry	typeref:typename:base::type::VerboseLevel
m_line	easylogging++.h	/^    unsigned long int m_line;$/;"	m	class:el::LogMessage	typeref:typename:unsigned long int
m_lineNumber	easylogging++.h	/^        unsigned long int m_lineNumber;$/;"	m	class:el::base::HitCounter::Predicate	typeref:typename:unsigned long int
m_lineNumber	easylogging++.h	/^    unsigned long int m_lineNumber;$/;"	m	class:el::base::HitCounter	typeref:typename:unsigned long int
m_list	easylogging++.h	/^    Container m_list;$/;"	m	class:el::base::utils::AbstractRegistry	typeref:typename:Container
m_loaded_modules	chaiscript/language/chaiscript_engine.hpp	/^    std::map<std::string, detail::Loadable_Module_Ptr> m_loaded_modules;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:std::map<std::string,detail::Loadable_Module_Ptr>
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Array_Call_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Binary_Operator_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Dot_Access_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Equation_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Id_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Inline_Array_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Inline_Map_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Inline_Range_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Prefix_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_loc	chaiscript/language/chaiscript_eval.hpp	/^        mutable std::atomic_uint_fast32_t m_loc;$/;"	m	struct:chaiscript::eval::Switch_AST_Node	typeref:typename:std::atomic_uint_fast32_t
m_logBuilder	easylogging++.h	/^    LogBuilderPtr m_logBuilder;$/;"	m	class:el::Logger	typeref:typename:LogBuilderPtr
m_logDispatchCallbacks	easylogging++.h	/^    std::map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	class:el::base::Storage	typeref:typename:std::map<std::string,base::type::LogDispatchCallbackPtr>
m_logFlushThresholdMap	easylogging++.h	/^    std::map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,std::size_t>
m_logFormatMap	easylogging++.h	/^    std::map<Level, base::LogFormat> m_logFormatMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,base::LogFormat>
m_logLine	easylogging++.h	/^    base::type::string_t m_logLine;$/;"	m	class:el::base::AsyncLogItem	typeref:typename:base::type::string_t
m_logMessage	easylogging++.h	/^    LogMessage m_logMessage;$/;"	m	class:el::base::AsyncLogItem	typeref:typename:LogMessage
m_logMessage	easylogging++.h	/^    LogMessage m_logMessage;$/;"	m	class:el::base::LogDispatcher	typeref:typename:LogMessage
m_logMessage	easylogging++.h	/^    LogMessage* m_logMessage;$/;"	m	class:el::LogDispatchData	typeref:typename:LogMessage *
m_logStreamsReference	easylogging++.h	/^    base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	class:el::base::RegisteredLoggers	typeref:typename:base::LogStreamsReferenceMap
m_logStreamsReference	easylogging++.h	/^    base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Logger	typeref:typename:base::LogStreamsReferenceMap *
m_logStreamsReference	easylogging++.h	/^    base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:base::LogStreamsReferenceMap *
m_logger	easylogging++.h	/^    Logger* m_logger;$/;"	m	class:el::LogMessage	typeref:typename:Logger *
m_loggingLevel	easylogging++.h	/^    Level m_loggingLevel;$/;"	m	class:el::base::Storage	typeref:typename:Level
m_map	command-line-parser.h	/^    std::map<std::string, std::function<void(std::list<std::string>&)>> m_map;$/;"	m	class:CommandLineParser	typeref:typename:std::map<std::string,std::function<void (std::list<std::string> &)>>
m_match_stack	chaiscript/language/chaiscript_parser.hpp	/^      std::vector<AST_NodePtr> m_match_stack;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::vector<AST_NodePtr>
m_material	primitives/decorator-primitive.cpp	/^        Material m_material;$/;"	m	class:__anon08e8fc9a0110::DecoratorImplementation	typeref:typename:Material	file:
m_maxLogFileSizeMap	easylogging++.h	/^    std::map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,std::size_t>
m_mesh	demos/basic-sample.cpp	/^        Primitive m_mesh;$/;"	m	class:__anonec0ba32e0110::MeshDemo	typeref:typename:Primitive	file:
m_message	easylogging++.h	/^    base::type::string_t m_message;$/;"	m	class:el::LogMessage	typeref:typename:base::type::string_t
m_method_missing_loc	chaiscript/dispatchkit/dispatchkit.hpp	/^        mutable std::atomic_uint_fast32_t m_method_missing_loc;$/;"	m	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::atomic_uint_fast32_t
m_milliseconds	animation/duration.h	/^        double m_milliseconds;$/;"	m	class:animation::Duration	typeref:typename:double
m_millisecondsWidthMap	easylogging++.h	/^    std::map<Level, base::MillisecondsWidth> m_millisecondsWidthMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,base::MillisecondsWidth>
m_module_paths	chaiscript/language/chaiscript_engine.hpp	/^    std::vector<std::string> m_module_paths;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:std::vector<std::string>
m_moduleptr	chaiscript/language/chaiscript_engine.hpp	/^      ModulePtr m_moduleptr;$/;"	m	struct:chaiscript::detail::Loadable_Module	typeref:typename:ModulePtr
m_modules	easylogging++.h	/^    std::map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	class:el::base::VRegistry	typeref:typename:std::map<std::string,base::type::VerboseLevel>
m_multiline_comment_begin	chaiscript/language/chaiscript_parser.hpp	/^      std::string m_multiline_comment_begin;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::string
m_multiline_comment_end	chaiscript/language/chaiscript_parser.hpp	/^      std::string m_multiline_comment_end;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::string
m_mutex	chaiscript/chaiscript_threading.hpp	/^            mutable mutex m_mutex;$/;"	m	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:mutex
m_mutex	chaiscript/dispatchkit/dispatchkit.hpp	/^        mutable chaiscript::detail::threading::shared_mutex m_mutex;$/;"	m	class:chaiscript::detail::Dispatch_Engine	typeref:typename:chaiscript::detail::threading::shared_mutex
m_mutex	chaiscript/dispatchkit/type_conversions.hpp	/^      mutable chaiscript::detail::threading::shared_mutex m_mutex;$/;"	m	class:chaiscript::Type_Conversions	typeref:typename:chaiscript::detail::threading::shared_mutex
m_mutex	chaiscript/language/chaiscript_engine.hpp	/^    mutable chaiscript::detail::threading::shared_mutex m_mutex;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:chaiscript::detail::threading::shared_mutex
m_mutex	easylogging++.h	/^    M* m_mutex;$/;"	m	class:el::base::threading::internal::ScopedLock	typeref:typename:M *
m_mutex	easylogging++.h	/^    base::threading::Mutex m_mutex;$/;"	m	class:el::base::threading::ThreadSafe	typeref:typename:base::threading::Mutex
m_name	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string m_name;$/;"	m	class:chaiscript::exception::illegal_name_error	typeref:typename:std::string
m_name	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string m_name;$/;"	m	class:chaiscript::exception::name_conflict_error	typeref:typename:std::string
m_name	performance/performance.cpp	/^            std::string m_name;$/;"	m	class:performance::_private_::CounterImplementation	typeref:typename:std::string	file:
m_normal	primitives/plane-primitive.cpp	/^        const Vector3D m_normal;$/;"	m	class:__anon22e967e70110::CoordinatePlaneImplementation	typeref:typename:const Vector3D	file:
m_num_types	chaiscript/dispatchkit/type_conversions.hpp	/^      std::atomic_size_t m_num_types;$/;"	m	class:chaiscript::Type_Conversions	typeref:typename:std::atomic_size_t
m_obj	chaiscript/dispatchkit/boxed_value.hpp	/^        chaiscript::detail::Any m_obj;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:chaiscript::detail::Any
m_offset	easylogging++.h	/^    int m_width; unsigned int m_offset;$/;"	m	class:el::base::MillisecondsWidth	typeref:typename:unsigned int
m_oper	chaiscript/language/chaiscript_eval.hpp	/^        Operators::Opers m_oper;$/;"	m	struct:chaiscript::eval::Binary_Operator_AST_Node	typeref:typename:Operators::Opers
m_oper	chaiscript/language/chaiscript_eval.hpp	/^        Operators::Opers m_oper;$/;"	m	struct:chaiscript::eval::Equation_AST_Node	typeref:typename:Operators::Opers
m_oper	chaiscript/language/chaiscript_eval.hpp	/^        Operators::Opers m_oper;$/;"	m	struct:chaiscript::eval::Prefix_AST_Node	typeref:typename:Operators::Opers
m_operator_matches	chaiscript/language/chaiscript_parser.hpp	/^      std::vector<std::vector<std::string>> m_operator_matches;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::vector<std::vector<std::string>>
m_operators	chaiscript/language/chaiscript_parser.hpp	/^      std::vector<AST_Node_Type::Type> m_operators;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::vector<AST_Node_Type::Type>
m_option_explicit	chaiscript/dispatchkit/dynamic_object.hpp	/^        bool m_option_explicit;$/;"	m	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:bool
m_out	pipeline/text-writer-consumer.cpp	/^        std::ostream m_out;$/;"	m	class:__anon324c0a430110::TextWriter	typeref:typename:std::ostream	file:
m_pFlags	easylogging++.h	/^    base::type::EnumType* m_pFlags;$/;"	m	class:el::base::VRegistry	typeref:typename:base::type::EnumType *
m_param_names	chaiscript/language/chaiscript_eval.hpp	/^        std::vector<std::string> m_param_names;$/;"	m	struct:chaiscript::eval::Lambda_AST_Node	typeref:typename:std::vector<std::string>
m_param_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        Param_Types m_param_types;$/;"	m	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:Param_Types
m_params	easylogging++.h	/^    std::vector<std::string> m_params;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:std::vector<std::string>
m_paramsWithValue	easylogging++.h	/^    std::map<std::string, std::string> m_paramsWithValue;$/;"	m	class:el::base::utils::CommandLineArgs	typeref:typename:std::map<std::string,std::string>
m_parentApplicationName	easylogging++.h	/^    std::string m_parentApplicationName;$/;"	m	class:el::Logger	typeref:typename:std::string
m_parsenode	chaiscript/dispatchkit/proxy_functions.hpp	/^        AST_NodePtr m_parsenode;$/;"	m	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:AST_NodePtr
m_parsers	scripting/scripting-util.h	/^                std::map<std::string, std::shared_ptr<SingleArgumentParser>> m_parsers;$/;"	m	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:std::map<std::string,std::shared_ptr<SingleArgumentParser>>
m_performanceTrackingCallbacks	easylogging++.h	/^    std::map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrackingCallb/;"	m	class:el::base::Storage	typeref:typename:std::map<std::string,base::type::PerformanceTrackingCallbackPtr>
m_performanceTrackingMap	easylogging++.h	/^    std::map<Level, bool> m_performanceTrackingMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,bool>
m_pixels	imaging/bitmap.h	/^        data::Grid<Color> m_pixels;$/;"	m	class:imaging::Bitmap	typeref:typename:data::Grid<Color>
m_pos	chaiscript/language/chaiscript_parser.hpp	/^          std::string::const_iterator m_pos;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:std::string::const_iterator
m_position	chaiscript/language/chaiscript_parser.hpp	/^      Position m_position;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:Position
m_position	lights/point-light.h	/^                math::Point3D m_position;$/;"	m	class:raytracer::lights::_private_::PointLightImplementation	typeref:typename:math::Point3D
m_preRollOutCallback	easylogging++.h	/^    PreRollOutCallback m_preRollOutCallback;$/;"	m	class:el::base::Storage	typeref:typename:PreRollOutCallback
m_proceed	easylogging++.h	/^    bool m_proceed;$/;"	m	class:el::base::LogDispatcher	typeref:typename:bool
m_properties	materials/uniform-material.cpp	/^        MaterialProperties m_properties;$/;"	m	class:__anondea639030110::UniformMaterial	typeref:typename:MaterialProperties	file:
m_queue	easylogging++.h	/^    std::queue<AsyncLogItem> m_queue;$/;"	m	class:el::base::AsyncLogQueue	typeref:typename:std::queue<AsyncLogItem>
m_radians	math/angle.h	/^        double m_radians;$/;"	m	class:math::Angle	typeref:typename:double
m_ray_tracer	renderers/renderer.h	/^                RayTracer m_ray_tracer;$/;"	m	class:raytracer::renderers::_private_::RendererImplementation	typeref:typename:RayTracer
m_receiver	pipeline/producer.h	/^            std::shared_ptr<Consumer<OUTPUT>> m_receiver;$/;"	m	class:raytracer::pipeline::Producer	typeref:typename:std::shared_ptr<Consumer<OUTPUT>>
m_registeredHitCounters	easylogging++.h	/^    base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	class:el::base::Storage	typeref:typename:base::RegisteredHitCounters *
m_registeredLoggers	easylogging++.h	/^    base::RegisteredLoggers* m_registeredLoggers;$/;"	m	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *
m_renderer	pipeline/renderer-processor.cpp	/^        Renderer m_renderer;$/;"	m	class:__anon2af506bf0110::RendererProcessor	typeref:typename:Renderer	file:
m_reserved_words	chaiscript/dispatchkit/dispatchkit.hpp	/^          std::set<std::string> m_reserved_words;$/;"	m	struct:chaiscript::detail::Dispatch_Engine::State	typeref:typename:std::set<std::string>
m_resolver	easylogging++.h	/^    FormatSpecifierValueResolver m_resolver;$/;"	m	class:el::CustomFormatSpecifier	typeref:typename:FormatSpecifierValueResolver
m_return_value	chaiscript/dispatchkit/boxed_value.hpp	/^        bool m_return_value;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:bool
m_sampler	renderers/renderer.h	/^                raytracer::Sampler m_sampler;$/;"	m	class:raytracer::renderers::_private_::RendererImplementation	typeref:typename:raytracer::Sampler
m_saves	chaiscript/dispatchkit/type_conversions.hpp	/^      std::reference_wrapper<Type_Conversions::Conversion_Saves> m_saves;$/;"	m	class:chaiscript::Type_Conversions_State	typeref:typename:std::reference_wrapper<Type_Conversions::Conversion_Saves>
m_scheduler	renderers/renderer.h	/^                tasks::TaskScheduler m_scheduler;$/;"	m	class:raytracer::renderers::_private_::RendererImplementation	typeref:typename:tasks::TaskScheduler
m_shared_ptr_holder	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::shared_ptr<std::function<Func>> m_shared_ptr_holder;$/;"	m	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:std::shared_ptr<std::function<Func>>
m_since_epoch	animation/time-stamp.h	/^        Duration m_since_epoch;$/;"	m	class:animation::TimeStamp	typeref:typename:Duration
m_singleline_comment	chaiscript/language/chaiscript_parser.hpp	/^      std::string m_singleline_comment;$/;"	m	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::string
m_size	data-structures/array.h	/^    size_t m_size;$/;"	m	class:array	typeref:typename:size_t
m_stack_holder	chaiscript/dispatchkit/dispatchkit.hpp	/^        chaiscript::detail::threading::Thread_Storage<Stack_Holder> m_stack_holder;$/;"	m	class:chaiscript::detail::Dispatch_Engine	typeref:typename:chaiscript::detail::threading::Thread_Storage<Stack_Holder>
m_stack_holder	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::reference_wrapper<Stack_Holder> m_stack_holder;$/;"	m	class:chaiscript::detail::Dispatch_State	typeref:typename:std::reference_wrapper<Stack_Holder>
m_start	data-structures/array.h	/^    size_t m_start;$/;"	m	class:array	typeref:typename:size_t
m_state	chaiscript/dispatchkit/dispatchkit.hpp	/^        State m_state;$/;"	m	class:chaiscript::detail::Dispatch_Engine	typeref:typename:State
m_statistics_on_destruction	performance/performance.h	/^        bool m_statistics_on_destruction;$/;"	m	class:performance::PerformanceCleanerUpper	typeref:typename:bool
m_stream	easylogging++.h	/^    base::type::stringstream_t m_stream;$/;"	m	class:el::Logger	typeref:typename:base::type::stringstream_t
m_symbol	chaiscript/language/chaiscript_engine.hpp	/^          T m_symbol;$/;"	m	struct:chaiscript::detail::Loadable_Module::DLSym	typeref:typename:T
m_thread_cache	chaiscript/dispatchkit/type_conversions.hpp	/^      mutable chaiscript::detail::threading::Thread_Storage<std::set<const std::type_info *, Les/;"	m	class:chaiscript::Type_Conversions	typeref:typename:chaiscript::detail::threading::Thread_Storage<std::set<const std::type_info *,Less_Than>>
m_thread_count	renderers/standard-renderer.cpp	/^        unsigned m_thread_count;$/;"	m	class:__anon61ccc6c40110::StandardRenderer	typeref:typename:unsigned	file:
m_ti	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          std::unique_ptr<Type_Info> m_ti;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:std::unique_ptr<Type_Info>
m_to	chaiscript/dispatchkit/type_conversions.hpp	/^        Type_Info m_to;$/;"	m	class:chaiscript::detail::Type_Conversion_Base	typeref:typename:Type_Info
m_toFileMap	easylogging++.h	/^    std::map<Level, bool> m_toFileMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,bool>
m_toStandardOutputMap	easylogging++.h	/^    std::map<Level, bool> m_toStandardOutputMap;$/;"	m	class:el::base::TypedConfigurations	typeref:typename:std::map<Level,bool>
m_transformation	cameras/displaceable-camera.h	/^                math::Matrix4x4 m_transformation;$/;"	m	class:raytracer::cameras::_private_::DisplaceableCamera	typeref:typename:math::Matrix4x4
m_type	chaiscript/dispatchkit/any.hpp	/^          const std::type_info &m_type;$/;"	m	struct:chaiscript::detail::Any::Data	typeref:typename:const std::type_info &
m_type_info	chaiscript/dispatchkit/boxed_value.hpp	/^        Type_Info m_type_info;$/;"	m	struct:chaiscript::Boxed_Value::Data	typeref:typename:Type_Info
m_type_info	chaiscript/dispatchkit/type_info.hpp	/^      const std::type_info *m_type_info;$/;"	m	class:chaiscript::Type_Info	typeref:typename:const std::type_info *
m_type_name	chaiscript/dispatchkit/dynamic_object.hpp	/^        std::string m_type_name;$/;"	m	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:std::string
m_type_name	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          std::string m_type_name;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:std::string
m_type_name	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          std::string m_type_name;$/;"	m	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:std::string
m_typedConfigurations	easylogging++.h	/^    base::TypedConfigurations* m_typedConfigurations;$/;"	m	class:el::Logger	typeref:typename:base::TypedConfigurations *
m_typeinfos	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<std::pair<Type_Info, std::string> > m_typeinfos;$/;"	m	class:chaiscript::Module	typeref:typename:std::vector<std::pair<Type_Info,std::string>>
m_types	chaiscript/dispatchkit/dispatchkit.hpp	/^          Type_Name_Map m_types;$/;"	m	struct:chaiscript::detail::Dispatch_Engine::State	typeref:typename:Type_Name_Map
m_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::vector<Type_Info> m_types;$/;"	m	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:std::vector<Type_Info>
m_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::vector<std::pair<std::string, Type_Info>> m_types;$/;"	m	class:chaiscript::dispatch::Param_Types	typeref:typename:std::vector<std::pair<std::string,Type_Info>>
m_underlyingMutex	easylogging++.h	/^    pthread_mutex_t m_underlyingMutex;$/;"	m	class:el::base::threading::internal::Mutex	typeref:typename:pthread_mutex_t
m_unflushedCount	easylogging++.h	/^    std::map<Level, unsigned int> m_unflushedCount;$/;"	m	class:el::Logger	typeref:typename:std::map<Level,unsigned int>
m_use_mutex	chaiscript/language/chaiscript_engine.hpp	/^    mutable chaiscript::detail::threading::recursive_mutex m_use_mutex;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:chaiscript::detail::threading::recursive_mutex
m_use_paths	chaiscript/language/chaiscript_engine.hpp	/^    std::vector<std::string> m_use_paths;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:std::vector<std::string>
m_used_files	chaiscript/language/chaiscript_engine.hpp	/^    std::set<std::string> m_used_files;$/;"	m	class:chaiscript::ChaiScript	typeref:typename:std::set<std::string>
m_userFormat	easylogging++.h	/^    base::type::string_t m_userFormat;$/;"	m	class:el::base::LogFormat	typeref:typename:base::type::string_t
m_vRegistry	easylogging++.h	/^    base::VRegistry* m_vRegistry;$/;"	m	class:el::base::Storage	typeref:typename:base::VRegistry *
m_value	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value m_value;$/;"	m	struct:chaiscript::eval::Float_AST_Node	typeref:typename:Boxed_Value
m_value	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value m_value;$/;"	m	struct:chaiscript::eval::Id_AST_Node	typeref:typename:Boxed_Value
m_value	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value m_value;$/;"	m	struct:chaiscript::eval::Int_AST_Node	typeref:typename:Boxed_Value
m_value	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value m_value;$/;"	m	struct:chaiscript::eval::Noop_AST_Node	typeref:typename:Boxed_Value
m_value	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value m_value;$/;"	m	struct:chaiscript::eval::Quoted_String_AST_Node	typeref:typename:Boxed_Value
m_value	chaiscript/language/chaiscript_eval.hpp	/^        Boxed_Value m_value;$/;"	m	struct:chaiscript::eval::Single_Quoted_String_AST_Node	typeref:typename:Boxed_Value
m_value	easylogging++.h	/^    std::string m_value;$/;"	m	class:el::Configuration	typeref:typename:std::string
m_value	performance/performance.cpp	/^            std::atomic<uint64_t> m_value;$/;"	m	class:performance::_private_::CounterImplementation	typeref:typename:std::atomic<uint64_t>	file:
m_value	util/lazy.h	/^    T m_value;$/;"	m	class:Lazy	typeref:typename:T
m_verboseLevel	easylogging++.h	/^    base::type::VerboseLevel m_verboseLevel;$/;"	m	class:el::LogMessage	typeref:typename:base::type::VerboseLevel
m_vertical_size	renderers/renderer.h	/^                unsigned m_horizontal_size, m_vertical_size;$/;"	m	class:raytracer::renderers::_private_::RendererImplementation	typeref:typename:unsigned
m_vertical_subdivisions	math/rasterizer.h	/^        unsigned m_vertical_subdivisions;$/;"	m	class:math::Rasterizer	typeref:typename:unsigned
m_view_window	cameras/perspective-camera.h	/^                math::Rectangle3D m_view_window;$/;"	m	class:raytracer::cameras::_private_::PerspectiveCamera	typeref:typename:math::Rectangle3D
m_what	chaiscript/dispatchkit/any.hpp	/^          std::string m_what;$/;"	m	class:chaiscript::detail::exception::bad_any_cast	typeref:typename:std::string
m_what	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        std::string m_what;$/;"	m	class:chaiscript::exception::bad_boxed_cast	typeref:typename:std::string
m_width	data-structures/grid.h	/^        unsigned m_width;$/;"	m	class:data::Grid	typeref:typename:unsigned
m_width	easylogging++.h	/^    int m_width; unsigned int m_offset;$/;"	m	class:el::base::MillisecondsWidth	typeref:typename:int
m_wif	pipeline/wif-consumer.cpp	/^        WIF m_wif;$/;"	m	class:__anon4cc5e2fa0110::Wif	typeref:typename:WIF	file:
m_word	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string m_word;$/;"	m	class:chaiscript::exception::reserved_word_error	typeref:typename:std::string
m_x1	math/quadratic_equation.h	/^        double m_x1, m_x2;$/;"	m	class:math::QuadraticEquation	typeref:typename:double
m_x2	math/quadratic_equation.h	/^        double m_x1, m_x2;$/;"	m	class:math::QuadraticEquation	typeref:typename:double
m_x_interval	math/box.h	/^        Interval<double> m_x_interval, m_y_interval, m_z_interval;$/;"	m	class:math::Box	typeref:typename:Interval<double>
m_y_interval	math/box.h	/^        Interval<double> m_x_interval, m_y_interval, m_z_interval;$/;"	m	class:math::Box	typeref:typename:Interval<double>
m_z_interval	math/box.h	/^        Interval<double> m_x_interval, m_y_interval, m_z_interval;$/;"	m	class:math::Box	typeref:typename:Interval<double>
magenta	imaging/color.h	/^        constexpr Color magenta() { return Color{ 1, 0, 1 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
main	app.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	tests/main.cpp	/^int main(int argc, char* const argv[])$/;"	f	typeref:typename:int
make_2d_material	materials/material.cpp	/^Material raytracer::make_2d_material(math::Function<MaterialProperties(const Point2D&)> function/;"	f	class:raytracer	typeref:typename:Material
make_3d_material	materials/material.cpp	/^Material raytracer::make_3d_material(math::Function<MaterialProperties(const Point3D&)> function/;"	f	class:raytracer	typeref:typename:Material
make_animation	animation/animation.h	/^    Animation<T> make_animation(math::Function<T(TimeStamp)> function, animation::Duration durat/;"	f	namespace:animation	typeref:typename:Animation<T>
make_dynamic_proxy_function	chaiscript/dispatchkit/proxy_functions.hpp	/^    Proxy_Function make_dynamic_proxy_function(Callable &&c, Arg&& ... a)$/;"	f	namespace:chaiscript::dispatch	typeref:typename:Proxy_Function
make_node	chaiscript/language/chaiscript_parser.hpp	/^      std::shared_ptr<AST_Node> make_node(std::string t_match, const int t_prev_line, const int /;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:std::shared_ptr<AST_Node>
make_scene_animation	scripting/animation-module.cpp	/^    Animation<std::shared_ptr<Scene>> make_scene_animation(std::function<std::shared_ptr<Scene>(/;"	f	namespace:__anona5945eab0110	typeref:typename:Animation<std::shared_ptr<Scene>>
make_shared	chaiscript/chaiscript_defines.hpp	/^  inline std::shared_ptr<B> make_shared(Arg && ... arg)$/;"	f	namespace:chaiscript	typeref:typename:std::shared_ptr<B>
make_union	primitives/union-primitive.cpp	/^Primitive raytracer::primitives::make_union(std::vector<Primitive>& children)$/;"	f	class:raytracer::primitives	typeref:typename:Primitive
make_union	scripting/primitives-module.cpp	/^    Primitive make_union(const std::vector<chaiscript::Boxed_Value>& boxed_children)$/;"	f	namespace:__anond0e1f3170110	typeref:typename:Primitive
map_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^    Type_Conversion map_conversion()$/;"	f	namespace:chaiscript	typeref:typename:Type_Conversion
map_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr map_type(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
mark_eof	imaging/wif-format.cpp	/^void imaging::wif::mark_eof(std::vector<uint8_t>& buffer)$/;"	f	class:imaging::wif	typeref:typename:void
match	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool match(const std::vector<Boxed_Value> &vals, const Type_Conversions_State &t_convers/;"	f	class:chaiscript::dispatch::Param_Types	typeref:typename:bool
match	chaiscript/language/chaiscript_parser.hpp	/^        string_type &match;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:string_type &
material	primitives/hit.h	/^        Material material;$/;"	m	struct:raytracer::Hit	typeref:typename:Material
material	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            auto material = materials::uniform(properties);$/;"	v	typeref:typename:auto
materials	materials/composition-material.h	/^    namespace materials$/;"	n	namespace:raytracer
materials	materials/material.h	/^    namespace materials$/;"	n	namespace:raytracer
materials	materials/pattern-materials.h	/^    namespace materials$/;"	n	namespace:raytracer
materials	materials/uniform-material.h	/^    namespace materials$/;"	n	namespace:raytracer
math	animation/duration.h	/^namespace math$/;"	n
math	animation/time-stamp.h	/^namespace math$/;"	n
math	imaging/color.h	/^namespace math$/;"	n
math	math/angle.h	/^namespace math$/;"	n
math	math/approx.h	/^namespace math$/;"	n
math	math/box.h	/^namespace math$/;"	n
math	math/coordinate-systems.h	/^namespace math$/;"	n
math	math/function.h	/^namespace math$/;"	n
math	math/functions/bool-mapper.h	/^namespace math$/;"	n
math	math/functions/constant.h	/^namespace math$/;"	n
math	math/functions/easing-function.h	/^namespace math$/;"	n
math	math/functions/easing/linear-easing-function.h	/^namespace math$/;"	n
math	math/functions/easing/stretch-easing-function.h	/^namespace math$/;"	n
math	math/functions/horizontal-lines-pattern.h	/^namespace math$/;"	n
math	math/functions/identity.h	/^namespace math$/;"	n
math	math/functions/noise.h	/^namespace math$/;"	n
math	math/functions/random-function.h	/^namespace math$/;"	n
math	math/interval-mapper.h	/^namespace math$/;"	n
math	math/interval.h	/^namespace math$/;"	n
math	math/matrix.h	/^namespace math$/;"	n
math	math/misc.h	/^namespace math$/;"	n
math	math/plane.h	/^namespace math$/;"	n
math	math/point.h	/^namespace math$/;"	n
math	math/quadratic_equation.h	/^namespace math$/;"	n
math	math/quantize.h	/^namespace math$/;"	n
math	math/rasterizer.h	/^namespace math$/;"	n
math	math/ray.h	/^namespace math$/;"	n
math	math/rectangle2d.h	/^namespace math$/;"	n
math	math/rectangle3d.h	/^namespace math$/;"	n
math	math/transformation-matrices.h	/^namespace math$/;"	n
math	math/transformation2d.h	/^namespace math$/;"	n
math	math/transformation3d.h	/^namespace math$/;"	n
math	math/vector.h	/^namespace math$/;"	n
matrix	tests/cameras/camera-transformation-tests.cpp	/^    auto matrix = create_transformation(eye, lookat, up);$/;"	v	typeref:typename:auto
maxLogFileSize	easylogging++.h	/^    inline std::size_t maxLogFileSize(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:std::size_t
max_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   max_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
maximum	math/misc.h	/^        constexpr static T maximum(T t) { return t; }$/;"	f	struct:math::ExtremumFinder	typeref:typename:T
maximum	math/misc.h	/^        constexpr static T maximum(T t, Ts... ts) {$/;"	f	struct:math::ExtremumFinder	typeref:typename:T
maximum	math/misc.h	/^    constexpr typename ExtremumFinder<Ts...>::result maximum(Ts... ts)$/;"	f	namespace:math	typeref:typename:ExtremumFinder<Ts...>::result
merge	math/box.cpp	/^Box math::Box::merge(const Box& other) const$/;"	f	class:math::Box	typeref:typename:Box
merge	math/interval.h	/^        Interval<T> merge(const Interval& other) const$/;"	f	struct:math::Interval	typeref:typename:Interval<T>
message	easylogging++.h	/^    inline const base::type::string_t& message(void) const { return m_message; }$/;"	f	class:el::LogMessage	typeref:typename:const base::type::string_t &
method_missing	chaiscript/dispatchkit/dynamic_object.hpp	/^        Boxed_Value &method_missing(const std::string &t_method_name)$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:Boxed_Value &
method_missing	chaiscript/dispatchkit/dynamic_object.hpp	/^        const Boxed_Value &method_missing(const std::string &t_method_name) const$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:const Boxed_Value &
method_missing	test-generation/shared.rb	/^  def method_missing(method_name, *args, &block)$/;"	f	class:Store
middle_sphere	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    auto middle_sphere = sphere();$/;"	v	typeref:typename:auto
milliseconds	animation/duration.cpp	/^double animation::Duration::milliseconds() const$/;"	f	class:animation::Duration	typeref:typename:double
millisecondsWidth	easylogging++.h	/^    inline const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:const base::MillisecondsWidth &
minimum	math/misc.h	/^        constexpr static T minimum(T t) { return t; }$/;"	f	struct:math::ExtremumFinder	typeref:typename:T
minimum	math/misc.h	/^        constexpr static T minimum(T t, Ts... ts) {$/;"	f	struct:math::ExtremumFinder	typeref:typename:T
minimum	math/misc.h	/^    constexpr typename ExtremumFinder<Ts...>::result minimum(Ts... ts)$/;"	f	namespace:math	typeref:typename:ExtremumFinder<Ts...>::result
modules	easylogging++.h	/^    inline const std::map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	class:el::base::VRegistry	typeref:typename:const std::map<std::string,base::type::VerboseLevel> &
move	data-structures/position.h	/^    void move(int dx, int dy)$/;"	f	struct:Position2D	typeref:typename:void
moved	data-structures/position.h	/^    Position2D moved(int dx, int dy) const$/;"	f	struct:Position2D	typeref:typename:Position2D
msleep	easylogging++.h	/^static inline void msleep(int) {$/;"	f	namespace:el::base::threading	typeref:typename:void
multiplication	chaiscript/dispatchkit/operators.hpp	/^          auto multiplication(L l, R r) -> decltype(( l * r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l * r))
multiplication	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr multiplication(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
name	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string name() const$/;"	f	class:chaiscript::exception::illegal_name_error	typeref:typename:std::string
name	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string name() const$/;"	f	class:chaiscript::exception::name_conflict_error	typeref:typename:std::string
name	chaiscript/dispatchkit/type_info.hpp	/^      std::string name() const$/;"	f	class:chaiscript::Type_Info	typeref:typename:std::string
name	easylogging++.h	/^        const char* name;$/;"	m	struct:el::base::consts::__anoncd3bcdca1108	typeref:typename:const char *
name	performance/performance.cpp	/^            std::string name() const$/;"	f	class:performance::_private_::CounterImplementation	typeref:typename:std::string	file:
name_conflict_error	chaiscript/dispatchkit/dispatchkit.hpp	/^        name_conflict_error(const std::string &t_name) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::name_conflict_error
name_conflict_error	chaiscript/dispatchkit/dispatchkit.hpp	/^    class name_conflict_error : public std::runtime_error$/;"	c	namespace:chaiscript::exception
newFileStream	easylogging++.h	/^    static base::type::fstream_t* newFileStream(const std::string& filename) {$/;"	f	class:el::base::utils::File	typeref:typename:base::type::fstream_t *
new_function_call	chaiscript/dispatchkit/dispatchkit.hpp	/^        void new_function_call()$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
new_function_call	chaiscript/dispatchkit/dispatchkit.hpp	/^        void new_function_call(Stack_Holder &t_s, Type_Conversions::Conversion_Saves &t_saves)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
new_scope	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void new_scope(Stack_Holder &t_holder)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
new_scope	chaiscript/dispatchkit/dispatchkit.hpp	/^        void new_scope()$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
new_stack	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void new_stack(Stack_Holder &t_holder)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
next	easylogging++.h	/^    inline AsyncLogItem next(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:AsyncLogItem
no_hit	raytracers/trace-result.h	/^        static TraceResult no_hit(const math::Ray& ray)$/;"	f	struct:raytracer::TraceResult	typeref:typename:TraceResult
non_const_flag	chaiscript/language/chaiscript_algebraic.hpp	/^      non_const_flag, $/;"	e	enum:chaiscript::Operators::Opers
non_const_int_flag	chaiscript/language/chaiscript_algebraic.hpp	/^      non_const_int_flag,$/;"	e	enum:chaiscript::Operators::Opers
nonempty_interval	math/interval.h	/^    constexpr Interval<T> nonempty_interval(const T& lower, const T& upper)$/;"	f	namespace:math	typeref:typename:Interval<T>
norm	math/vector.h	/^        double norm() const$/;"	f	class:math::Vector	typeref:typename:double
norm_sqr	math/vector.h	/^        double norm_sqr() const$/;"	f	class:math::Vector	typeref:typename:double
normal	math/plane.h	/^        Vector3D normal;$/;"	m	struct:math::Plane	typeref:typename:Vector3D
normal	primitives/hit.h	/^        math::Vector3D normal;$/;"	m	struct:raytracer::Hit	typeref:typename:math::Vector3D
normalize	math/vector.h	/^        void normalize()$/;"	f	class:math::Vector	typeref:typename:void
normalized	math/vector.h	/^        Vector<N> normalized() const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
not_equal	chaiscript/dispatchkit/boxed_number.hpp	/^      static bool not_equal(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
not_equal	chaiscript/dispatchkit/operators.hpp	/^          auto not_equal(L l, R r) -> decltype(( l != r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l!=r))
not_equal	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr not_equal(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
not_equal	chaiscript/language/chaiscript_algebraic.hpp	/^      equals, less_than, greater_than, less_than_equal, greater_than_equal, not_equal, $/;"	e	enum:chaiscript::Operators::Opers
null	pipeline/null-consumer.h	/^        std::shared_ptr<Consumer<T>> null()$/;"	f	namespace:raytracer::pipeline	typeref:typename:std::shared_ptr<Consumer<T>>
null_bitmap_consumer	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> null_bitmap_consumer() const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
numb	easylogging++.h	/^        int numb;$/;"	m	struct:el::base::consts::__anoncd3bcdca1108	typeref:typename:int
object	chaiscript/utility/json.hpp	/^            Container *object;$/;"	m	class:json::JSON::JSONWrapper	typeref:typename:Container *
object	chaiscript/utility/json.hpp	/^            const Container *object;$/;"	m	class:json::JSON::JSONConstWrapper	typeref:typename:const Container *
octal_matches	chaiscript/language/chaiscript_parser.hpp	/^        string_type octal_matches;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:string_type
omnidirectional	lights/omnidirectional-point-light.cpp	/^LightSource raytracer::lights::omnidirectional(const math::Point3D& position, const imaging::Col/;"	f	class:raytracer::lights	typeref:typename:LightSource
omnidirectional	scripting/lights-module.cpp	/^        LightSource omnidirectional(const Point3D& position, const Color& c) const$/;"	f	struct:__anon0af6c0d60110::LightLibrary	typeref:typename:LightSource	file:
oper	chaiscript/dispatchkit/boxed_number.hpp	/^        inline static Boxed_Value oper(Operators::Opers t_oper, const Boxed_Value &t_lhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
oper	chaiscript/dispatchkit/boxed_number.hpp	/^        inline static Boxed_Value oper(Operators::Opers t_oper, const Boxed_Value &t_lhs, const /;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
oper_rhs	chaiscript/dispatchkit/boxed_number.hpp	/^        inline static Boxed_Value oper_rhs(Operators::Opers t_oper, const Boxed_Value &t_lhs, co/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
operator !=	animation/duration.cpp	/^bool animation::operator !=(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:bool
operator !=	animation/time-stamp.cpp	/^bool animation::TimeStamp::operator !=(const TimeStamp& ts) const$/;"	f	class:animation::TimeStamp	typeref:typename:bool
operator !=	chaiscript/dispatchkit/boxed_number.hpp	/^      bool operator!=(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
operator !=	chaiscript/language/chaiscript_parser.hpp	/^        bool operator!=(const Position &t_rhs) const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:bool
operator !=	easylogging++.h	/^    bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:bool
operator !=	imaging/color.cpp	/^bool imaging::operator !=(const Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:bool
operator !=	math/angle.cpp	/^bool math::operator !=(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:bool
operator !=	math/approx.h	/^    bool operator !=(T x, const approximately<T>& y)$/;"	f	namespace:math	typeref:typename:bool
operator !=	math/approx.h	/^    bool operator !=(const approximately<T>& x, T y)$/;"	f	namespace:math	typeref:typename:bool
operator !=	math/point.h	/^        bool operator !=(const Point<N>& p) const$/;"	f	class:math::Point	typeref:typename:bool
operator !=	math/rectangle2d.cpp	/^bool math::operator !=(const Rectangle2D& r1, const Rectangle2D& r2)$/;"	f	class:math	typeref:typename:bool
operator !=	math/vector.h	/^        bool operator !=(const Vector<N>& p) const$/;"	f	class:math::Vector	typeref:typename:bool
operator %	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator%(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator %=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator%=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator &	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator&(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator &&	math/function.h	/^    Function<R(Ts...)> operator &&(const Function<R(Ts...)>& f, const Function<R(Ts...)>& g)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator &=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator&=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator ()	animation/animation.h	/^        T operator ()(TimeStamp t) const$/;"	f	class:animation::Animation	typeref:typename:T
operator ()	chaiscript/dispatchkit/callable_traits.hpp	/^        Ret operator()(Class &o, Inner&& ... inner) const {$/;"	f	struct:chaiscript::dispatch::detail::Caller	typeref:typename:Ret
operator ()	chaiscript/dispatchkit/callable_traits.hpp	/^        Ret operator()(Inner&& ... inner) const {$/;"	f	struct:chaiscript::dispatch::detail::Fun_Caller	typeref:typename:Ret
operator ()	chaiscript/dispatchkit/callable_traits.hpp	/^        Ret operator()(const Class &o, Inner&& ... inner) const {$/;"	f	struct:chaiscript::dispatch::detail::Const_Caller	typeref:typename:Ret
operator ()	chaiscript/dispatchkit/callable_traits.hpp	/^        std::shared_ptr<Class> operator()(Inner&& ... inner) const {$/;"	f	struct:chaiscript::dispatch::detail::Constructor	typeref:typename:std::shared_ptr<Class>
operator ()	chaiscript/dispatchkit/function_call_detail.hpp	/^          Ret operator()(P&&  ...  param)$/;"	f	struct:chaiscript::dispatch::detail::Build_Function_Caller_Helper	typeref:typename:Ret
operator ()	chaiscript/dispatchkit/proxy_functions.hpp	/^        Boxed_Value operator()(const std::vector<Boxed_Value> &params, const chaiscript::Type_Co/;"	f	class:chaiscript::dispatch::Proxy_Function_Base	typeref:typename:Boxed_Value
operator ()	chaiscript/dispatchkit/type_conversions.hpp	/^        bool operator()(const std::type_info *t_lhs, const std::type_info *t_rhs) const$/;"	f	struct:chaiscript::Type_Conversions::Less_Than	typeref:typename:bool
operator ()	chaiscript/language/chaiscript_engine.hpp	/^    Boxed_Value operator()(const std::string &t_script, const Exception_Handler &t_handler = Exc/;"	f	class:chaiscript::ChaiScript	typeref:typename:Boxed_Value
operator ()	easylogging++.h	/^        inline bool operator()(const Configuration* conf) const {$/;"	f	class:el::Configuration::Predicate	typeref:typename:bool
operator ()	easylogging++.h	/^        inline bool operator()(const HitCounter* counter) {$/;"	f	class:el::base::HitCounter::Predicate	typeref:typename:bool
operator ()	math/function.h	/^        R operator ()(Ts... ts) const$/;"	f	class:math::Function	typeref:typename:R
operator *	animation/duration.cpp	/^Duration animation::operator *(const Duration& duration, double factor)$/;"	f	class:animation	typeref:typename:Duration
operator *	animation/duration.cpp	/^Duration animation::operator *(double factor, const Duration& duration)$/;"	f	class:animation	typeref:typename:Duration
operator *	chaiscript/chaiscript_threading.hpp	/^            inline T &operator*()$/;"	f	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:T &
operator *	chaiscript/chaiscript_threading.hpp	/^            inline const T &operator*() const$/;"	f	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:const T &
operator *	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator*(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator *	chaiscript/dispatchkit/dispatchkit.hpp	/^        Dispatch_Engine &operator*() const {$/;"	f	class:chaiscript::detail::Dispatch_State	typeref:typename:Dispatch_Engine &
operator *	chaiscript/language/chaiscript_parser.hpp	/^        char operator*() const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:char
operator *	imaging/color.cpp	/^Color imaging::operator *(const Color& c, double f)$/;"	f	class:imaging	typeref:typename:Color
operator *	imaging/color.cpp	/^Color imaging::operator *(const Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:Color
operator *	imaging/color.cpp	/^Color imaging::operator *(double f, const Color& c)$/;"	f	class:imaging	typeref:typename:Color
operator *	math/angle.cpp	/^Angle math::operator *(const Angle& angle, double factor)$/;"	f	class:math	typeref:typename:Angle
operator *	math/angle.cpp	/^Angle math::operator *(double factor, const Angle& angle)$/;"	f	class:math	typeref:typename:Angle
operator *	math/function.h	/^    Function<R(Ts...)> operator *(const Function<R(Ts...)>& f, const Function<R(Ts...)>& g)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator *	math/function.h	/^    Function<R(Ts...)> operator *(const Function<R(Ts...)>& f, const T& constant)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator *	math/function.h	/^    Function<R(Ts...)> operator *(const T& constant, const Function<R(Ts...)>& f)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator *	math/matrix.cpp	/^Point2D math::operator *(const Matrix3x3& a, const Point2D& p)$/;"	f	class:math	typeref:typename:Point2D
operator *	math/matrix.cpp	/^Point3D math::operator *(const Matrix4x4& a, const Point3D& p)$/;"	f	class:math	typeref:typename:Point3D
operator *	math/matrix.cpp	/^Vector2D math::operator *(const Matrix3x3& a, const Vector2D& v)$/;"	f	class:math	typeref:typename:Vector2D
operator *	math/matrix.cpp	/^Vector3D math::operator *(const Matrix4x4& a, const Vector3D& v)$/;"	f	class:math	typeref:typename:Vector3D
operator *	math/matrix.h	/^    Matrix<N> operator *(const Matrix<N>& a, const Matrix<N>& b)$/;"	f	namespace:math	typeref:typename:Matrix<N>
operator *	math/point.h	/^        Point<N> operator *(double constant) const$/;"	f	class:math::Point	typeref:typename:Point<N>
operator *	math/point.h	/^    Point<N> operator *(double constant, const Point<N>& p)$/;"	f	namespace:math	typeref:typename:Point<N>
operator *	math/vector.h	/^        Vector<N> operator *(double constant) const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
operator *	math/vector.h	/^    Vector<N> operator *(double constant, const Vector<N>& v)$/;"	f	namespace:math	typeref:typename:Vector<N>
operator *=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator*=(const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator *=	imaging/bitmap.cpp	/^Bitmap& imaging::Bitmap::operator *=(double constant)$/;"	f	class:imaging::Bitmap	typeref:typename:Bitmap &
operator *=	imaging/color.cpp	/^Color& imaging::operator *=(Color& c, double f)$/;"	f	class:imaging	typeref:typename:Color &
operator *=	math/angle.cpp	/^Angle& math::operator *=(Angle& x, double f)$/;"	f	class:math	typeref:typename:Angle &
operator *=	math/vector.h	/^        Vector<N>& operator *=(double constant)$/;"	f	class:math::Vector	typeref:typename:Vector<N> &
operator +	animation/duration.cpp	/^Duration animation::operator +(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:Duration
operator +	animation/time-stamp.cpp	/^TimeStamp animation::operator +(const Duration& d, const TimeStamp& ts)$/;"	f	class:animation	typeref:typename:TimeStamp
operator +	animation/time-stamp.cpp	/^TimeStamp animation::operator +(const TimeStamp& ts, const Duration& d)$/;"	f	class:animation	typeref:typename:TimeStamp
operator +	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator+() const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator +	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator+(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator +	chaiscript/language/chaiscript_parser.hpp	/^        Position operator+(size_t t_distance) const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:Position
operator +	imaging/color.cpp	/^Color imaging::operator +(const Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:Color
operator +	math/angle.cpp	/^Angle math::operator+(const Angle& x, const Angle& y)$/;"	f	class:math	typeref:typename:Angle
operator +	math/function.h	/^    Function<R(Ts...)> operator +(const Function<R(Ts...)>& f, const Function<R(Ts...)>& g)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator +	math/function.h	/^    Function<R(Ts...)> operator +(const Function<R(Ts...)>& f, const R& constant)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator +	math/function.h	/^    Function<R(Ts...)> operator +(const R& constant, const Function<R(Ts...)>& f)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator +	math/point.h	/^        Point<N> operator +(const Vector<N>& v) const$/;"	f	class:math::Point	typeref:typename:Point<N>
operator +	math/point.h	/^    Point<N> operator +(const Vector<N>& v, const Point<N> p)$/;"	f	namespace:math	typeref:typename:Point<N>
operator +	math/vector.h	/^        Vector<N> operator +(const Vector<N>& p) const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
operator ++	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator++() $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator ++	chaiscript/language/chaiscript_parser.hpp	/^        Position &operator++() {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:Position &
operator ++	performance/performance.cpp	/^Counter& performance::Counter::operator++()$/;"	f	class:performance::Counter	typeref:typename:Counter &
operator +=	animation/time-stamp.cpp	/^TimeStamp& animation::operator +=(TimeStamp& ts, const Duration& duration)$/;"	f	class:animation	typeref:typename:TimeStamp &
operator +=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator+=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator +=	chaiscript/language/chaiscript_parser.hpp	/^        Position &operator+=(size_t t_distance) {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:Position &
operator +=	imaging/bitmap.cpp	/^Bitmap& imaging::Bitmap::operator +=(const Bitmap& bitmap)$/;"	f	class:imaging::Bitmap	typeref:typename:Bitmap &
operator +=	imaging/color.cpp	/^Color& imaging::operator +=(Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:Color &
operator +=	math/angle.cpp	/^Angle& math::operator +=(Angle& x, const Angle& y)$/;"	f	class:math	typeref:typename:Angle &
operator +=	math/point.h	/^        Point<N>& operator +=(const Vector<N>& p)$/;"	f	class:math::Point	typeref:typename:Point<N> &
operator +=	math/vector.h	/^        Vector<N>& operator +=(const Vector<N>& p)$/;"	f	class:math::Vector	typeref:typename:Vector<N> &
operator -	animation/duration.cpp	/^Duration animation::operator -(const Duration& d)$/;"	f	class:animation	typeref:typename:Duration
operator -	animation/duration.cpp	/^Duration animation::operator -(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:Duration
operator -	animation/time-stamp.cpp	/^Duration animation::operator -(const TimeStamp& ts1, const TimeStamp& ts2)$/;"	f	class:animation	typeref:typename:Duration
operator -	animation/time-stamp.cpp	/^TimeStamp animation::operator -(const TimeStamp& ts, const Duration& d)$/;"	f	class:animation	typeref:typename:TimeStamp
operator -	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator-() const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator -	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator-(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator -	chaiscript/language/chaiscript_parser.hpp	/^        Position operator-(size_t t_distance) const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:Position
operator -	imaging/color.cpp	/^Color imaging::operator -(const Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:Color
operator -	math/angle.cpp	/^Angle math::operator-(const Angle& x)$/;"	f	class:math	typeref:typename:Angle
operator -	math/angle.cpp	/^Angle math::operator-(const Angle& x, const Angle& y)$/;"	f	class:math	typeref:typename:Angle
operator -	math/function.h	/^    Function<R(Ts...)> operator -(const Function<R(Ts...)>& f, const Function<R(Ts...)>& g)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator -	math/function.h	/^    Function<R(Ts...)> operator -(const Function<R(Ts...)>& f, const R& constant)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator -	math/function.h	/^    Function<R(Ts...)> operator -(const R& constant, const Function<R(Ts...)>& f)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator -	math/point.h	/^        Point<N> operator -(const Vector<N>& v) const$/;"	f	class:math::Point	typeref:typename:Point<N>
operator -	math/point.h	/^        Vector<N> operator -(const Point<N>& p) const$/;"	f	class:math::Point	typeref:typename:Vector<N>
operator -	math/vector.h	/^        Vector<N> operator -() const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
operator -	math/vector.h	/^        Vector<N> operator -(const Vector<N>& p) const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
operator --	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator--()$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator --	chaiscript/language/chaiscript_parser.hpp	/^        Position &operator--() {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:Position &
operator -=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator-=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator -=	chaiscript/language/chaiscript_parser.hpp	/^        Position &operator-=(size_t t_distance) {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:Position &
operator -=	imaging/bitmap.cpp	/^Bitmap& imaging::Bitmap::operator -=(const Bitmap& bitmap)$/;"	f	class:imaging::Bitmap	typeref:typename:Bitmap &
operator -=	imaging/color.cpp	/^Color& imaging::operator -=(Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:Color &
operator -=	math/angle.cpp	/^Angle& math::operator -=(Angle& x, const Angle& y)$/;"	f	class:math	typeref:typename:Angle &
operator -=	math/point.h	/^        Point<N>& operator -=(const Vector<N>& p)$/;"	f	class:math::Point	typeref:typename:Point<N> &
operator -=	math/vector.h	/^        Vector<N>& operator -=(const Vector<N>& p)$/;"	f	class:math::Vector	typeref:typename:Vector<N> &
operator ->	cameras/camera.h	/^        cameras::_private_::CameraImplementation* operator ->() const$/;"	f	class:raytracer::Camera	typeref:typename:cameras::_private_::CameraImplementation *
operator ->	chaiscript/chaiscript_threading.hpp	/^            inline T *operator->()$/;"	f	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:T *
operator ->	chaiscript/chaiscript_threading.hpp	/^            inline const T *operator->() const$/;"	f	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:const T *
operator ->	chaiscript/dispatchkit/dispatchkit.hpp	/^        Dispatch_Engine *operator->() const {$/;"	f	class:chaiscript::detail::Dispatch_State	typeref:typename:Dispatch_Engine *
operator ->	chaiscript/dispatchkit/type_conversions.hpp	/^      const Type_Conversions *operator->() const {$/;"	f	class:chaiscript::Type_Conversions_State	typeref:typename:const Type_Conversions *
operator ->	lights/light-source.h	/^        lights::_private_::LightSourceImplementation* operator ->() const$/;"	f	class:raytracer::LightSource	typeref:typename:lights::_private_::LightSourceImplementation *
operator ->	materials/material.h	/^        materials::_private_::MaterialImplementation* operator ->() const$/;"	f	class:raytracer::Material	typeref:typename:materials::_private_::MaterialImplementation *
operator ->	primitives/primitive.h	/^        primitives::_private_::PrimitiveImplementation* operator ->() const$/;"	f	class:raytracer::Primitive	typeref:typename:primitives::_private_::PrimitiveImplementation *
operator ->	primitives/primitive.h	/^        primitives::_private_::PrimitiveImplementation* operator ->()$/;"	f	class:raytracer::Primitive	typeref:typename:primitives::_private_::PrimitiveImplementation *
operator ->	raytracers/ray-tracer.h	/^        const raytracers::_private_::RayTracerImplementation* operator ->() const$/;"	f	class:raytracer::RayTracer	typeref:typename:const raytracers::_private_::RayTracerImplementation *
operator ->	renderers/renderer.h	/^        const renderers::_private_::RendererImplementation* operator ->() const { return m_imple/;"	f	class:raytracer::Renderer	typeref:typename:const renderers::_private_::RendererImplementation *
operator ->	samplers/sampler.h	/^        samplers::_private_::SamplerImplementation* operator ->() const$/;"	f	class:raytracer::Sampler	typeref:typename:samplers::_private_::SamplerImplementation *
operator ->	tasks/task-scheduler.h	/^        tasks::schedulers::_private_::TaskSchedulerImplementation* operator ->() const$/;"	f	class:tasks::TaskScheduler	typeref:typename:tasks::schedulers::_private_::TaskSchedulerImplementation *
operator /	animation/duration.cpp	/^Duration animation::operator \/(const Duration& duration, double factor)$/;"	f	class:animation	typeref:typename:Duration
operator /	animation/duration.cpp	/^double animation::operator \/(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:double
operator /	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator\/(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator /	imaging/color.cpp	/^Color imaging::operator \/(const Color& c, double f)$/;"	f	class:imaging	typeref:typename:Color
operator /	math/angle.cpp	/^Angle math::operator \/(const Angle& angle, double factor)$/;"	f	class:math	typeref:typename:Angle
operator /	math/angle.cpp	/^double math::operator \/(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:double
operator /	math/function.h	/^    Function<R(Ts...)> operator \/(const Function<R(Ts...)>& f, const Function<R(Ts...)>& g)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator /	math/function.h	/^    Function<R(Ts...)> operator \/(const Function<R(Ts...)>& f, const R& constant)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator /	math/function.h	/^    Function<R(Ts...)> operator \/(const R& constant, const Function<R(Ts...)>& f)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator /	math/vector.h	/^        Vector<N> operator \/(double constant) const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
operator /=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator\/=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator /=	imaging/bitmap.cpp	/^Bitmap& imaging::Bitmap::operator \/=(double constant)$/;"	f	class:imaging::Bitmap	typeref:typename:Bitmap &
operator /=	imaging/color.cpp	/^Color& imaging::operator \/=(Color& c, double f)$/;"	f	class:imaging	typeref:typename:Color &
operator /=	math/angle.cpp	/^Angle& math::operator \/=(Angle& x, double f)$/;"	f	class:math	typeref:typename:Angle &
operator /=	math/vector.h	/^        Vector<N>& operator \/=(double constant)$/;"	f	class:math::Vector	typeref:typename:Vector<N> &
operator <	animation/duration.cpp	/^bool animation::operator <(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:bool
operator <	animation/time-stamp.cpp	/^bool animation::TimeStamp::operator <(const TimeStamp& ts) const$/;"	f	class:animation::TimeStamp	typeref:typename:bool
operator <	chaiscript/dispatchkit/boxed_number.hpp	/^      bool operator<(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
operator <	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool operator<(const Type_Info &ti) const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
operator <	math/angle.cpp	/^bool math::operator <(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:bool
operator <<	animation/duration.cpp	/^std::ostream& animation::operator <<(std::ostream& out, const Duration& duration)$/;"	f	class:animation	typeref:typename:std::ostream &
operator <<	animation/time-stamp.cpp	/^std::ostream& animation::operator <<(std::ostream& out, const TimeStamp& duration)$/;"	f	class:animation	typeref:typename:std::ostream &
operator <<	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator<<(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator <<	chaiscript/utility/json.hpp	/^inline std::ostream& operator<<( std::ostream &os, const JSON &json ) {$/;"	f	namespace:json	typeref:typename:std::ostream &
operator <<	data-structures/position.h	/^inline std::ostream& operator <<(std::ostream& out, const Position2D& p)$/;"	f	typeref:typename:std::ostream &
operator <<	data-structures/position.h	/^inline std::ostream& operator <<(std::ostream& out, const Position3D& p)$/;"	f	typeref:typename:std::ostream &
operator <<	easylogging++.h	/^    friend inline base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWit/;"	f	namespace:el::base::utils	typeref:typename:base::type::ostream_t &
operator <<	easylogging++.h	/^    friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Log/;"	f	namespace:el	typeref:typename:el::base::type::ostream_t &
operator <<	easylogging++.h	/^    inline friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLine/;"	f	namespace:el::base::utils	typeref:typename:base::type::ostream_t &
operator <<	imaging/color.cpp	/^std::ostream& imaging::operator <<(std::ostream& out, const Color& c)$/;"	f	class:imaging	typeref:typename:std::ostream &
operator <<	math/angle.cpp	/^std::ostream& math::operator <<(std::ostream& out, Angle angle)$/;"	f	class:math	typeref:typename:std::ostream &
operator <<	math/approx.h	/^    std::ostream& operator <<(std::ostream& out, const approximately<T>& x)$/;"	f	namespace:math	typeref:typename:std::ostream &
operator <<	math/interval.h	/^    std::ostream& operator <<(std::ostream& out, const Interval<T>& interval)$/;"	f	namespace:math	typeref:typename:std::ostream &
operator <<	math/matrix.h	/^    std::ostream& operator <<(std::ostream& out, const Matrix<N>&)$/;"	f	namespace:math	typeref:typename:std::ostream &
operator <<	math/point.h	/^    std::ostream& operator <<(std::ostream& out, const Point<N>& p)$/;"	f	namespace:math	typeref:typename:std::ostream &
operator <<	math/ray.cpp	/^std::ostream& math::operator <<(std::ostream& out, const Ray& ray)$/;"	f	class:math	typeref:typename:std::ostream &
operator <<	math/vector.h	/^    std::ostream& operator <<(std::ostream& out, const Vector<N>& v)$/;"	f	namespace:math	typeref:typename:std::ostream &
operator <<=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator<<=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator <=	animation/duration.cpp	/^bool animation::operator <=(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:bool
operator <=	animation/time-stamp.cpp	/^bool animation::TimeStamp::operator <=(const TimeStamp& ts) const$/;"	f	class:animation::TimeStamp	typeref:typename:bool
operator <=	chaiscript/dispatchkit/boxed_number.hpp	/^      bool operator<=(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
operator <=	math/angle.cpp	/^bool math::operator <=(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:bool
operator =	chaiscript/dispatchkit/any.hpp	/^        Any & operator=(const Any &t_any)$/;"	f	class:chaiscript::detail::Any	typeref:typename:Any &
operator =	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator=(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator =	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator=(const Boxed_Value &v)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator =	chaiscript/dispatchkit/boxed_value.hpp	/^        Data &operator=(const Data &rhs)$/;"	f	struct:chaiscript::Boxed_Value::Data	typeref:typename:Data &
operator =	chaiscript/utility/json.hpp	/^            typename enable_if<is_convertible<T,string>::value, JSON&>::type operator=( T s ) {$/;"	f	class:json::JSON	typeref:typename:enable_if<is_convertible<T,string>::value,JSON &>::type
operator =	chaiscript/utility/json.hpp	/^            typename enable_if<is_floating_point<T>::value, JSON&>::type operator=( T f ) {$/;"	f	class:json::JSON	typeref:typename:enable_if<is_floating_point<T>::value,JSON &>::type
operator =	chaiscript/utility/json.hpp	/^            typename enable_if<is_integral<T>::value && !is_same<T,bool>::value, JSON&>::type op/;"	f	class:json::JSON	typeref:typename:enable_if<is_integral<T>::value &&!is_same<T,bool>::value,JSON &>::type
operator =	chaiscript/utility/json.hpp	/^            typename enable_if<is_same<T,bool>::value, JSON&>::type operator=( T b ) {$/;"	f	class:json::JSON	typeref:typename:enable_if<is_same<T,bool>::value,JSON &>::type
operator =	chaiscript/utility/json.hpp	/^        JSON& operator=( JSON&& other ) {$/;"	f	class:json::JSON	typeref:typename:JSON &
operator =	chaiscript/utility/json.hpp	/^        JSON& operator=( const JSON &other ) {$/;"	f	class:json::JSON	typeref:typename:JSON &
operator =	easylogging++.h	/^    AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:AbstractRegistry &
operator =	easylogging++.h	/^    Configuration& operator=(const Configuration& c) {$/;"	f	class:el::Configuration	typeref:typename:Configuration &
operator =	easylogging++.h	/^    HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	class:el::base::HitCounter	typeref:typename:HitCounter &
operator =	easylogging++.h	/^    LogFormat& operator=(const LogFormat& logFormat) {$/;"	f	class:el::base::LogFormat	typeref:typename:LogFormat &
operator =	easylogging++.h	/^    Logger& operator=(const Logger& logger) {$/;"	f	class:el::Logger	typeref:typename:Logger &
operator =	easylogging++.h	/^    Registry& operator=(const Registry& sr) {$/;"	f	class:el::base::utils::Registry	typeref:typename:Registry &
operator =	easylogging++.h	/^    RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:RegistryWithPred &
operator =	math/matrix.h	/^        Matrix<N>& operator =(const Matrix<N>& m)$/;"	f	class:math::Matrix	typeref:typename:Matrix<N> &
operator =	math/point.h	/^        Point<N>& operator =(const Point<N>& p)$/;"	f	class:math::Point	typeref:typename:Point<N> &
operator =	math/vector.h	/^        Vector<N>& operator =(const Vector<N>& p)$/;"	f	class:math::Vector	typeref:typename:Vector<N> &
operator ==	animation/duration.cpp	/^bool animation::operator ==(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:bool
operator ==	animation/time-stamp.cpp	/^bool animation::TimeStamp::operator ==(const TimeStamp& ts) const$/;"	f	class:animation::TimeStamp	typeref:typename:bool
operator ==	chaiscript/dispatchkit/boxed_number.hpp	/^      bool operator==(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
operator ==	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual bool operator==(const dispatch::Proxy_Function_Base &rhs) const CHAISCRIPT_OVERR/;"	f	class:chaiscript::detail::Dispatch_Function	typeref:typename:bool
operator ==	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual bool operator==(const Proxy_Function_Base &f) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor	typeref:typename:bool
operator ==	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual bool operator==(const Proxy_Function_Base &f) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function	typeref:typename:bool
operator ==	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool operator==(const Param_Types &t_rhs) const$/;"	f	class:chaiscript::dispatch::Param_Types	typeref:typename:bool
operator ==	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool operator==(const Proxy_Function_Base &rhs) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:bool
operator ==	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool operator==(const Proxy_Function_Base &t_f) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Bound_Function	typeref:typename:bool
operator ==	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool operator==(const Proxy_Function_Base &t_func) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl	typeref:typename:bool
operator ==	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool operator==(const Proxy_Function_Base &t_func) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Attribute_Access	typeref:typename:bool
operator ==	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual bool operator==(const Proxy_Function_Base &t_func) const CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::dispatch::Proxy_Function_Callable_Impl	typeref:typename:bool
operator ==	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool operator==(const Type_Info &ti) const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
operator ==	chaiscript/dispatchkit/type_info.hpp	/^      CHAISCRIPT_CONSTEXPR bool operator==(const std::type_info &ti) const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Type_Info	typeref:typename:CHAISCRIPT_CONSTEXPR bool
operator ==	chaiscript/language/chaiscript_parser.hpp	/^        bool operator==(const Position &t_rhs) const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:bool
operator ==	easylogging++.h	/^    bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:bool
operator ==	easylogging++.h	/^    bool operator==(const MillisecondsWidth& msWidth) { return m_width == msWidth.m_width && m_o/;"	f	class:el::base::MillisecondsWidth	typeref:typename:bool
operator ==	easylogging++.h	/^    inline bool operator==(const LogFormat& other) {$/;"	f	class:el::base::LogFormat	typeref:typename:bool
operator ==	easylogging++.h	/^    inline bool operator==(const char* formatSpecifier) {$/;"	f	class:el::CustomFormatSpecifier	typeref:typename:bool
operator ==	imaging/color.cpp	/^bool imaging::operator ==(const Color& c1, const Color& c2)$/;"	f	class:imaging	typeref:typename:bool
operator ==	math/angle.cpp	/^bool math::operator ==(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:bool
operator ==	math/approx.h	/^    bool operator ==(T x, const approximately<T>& y)$/;"	f	namespace:math	typeref:typename:bool
operator ==	math/approx.h	/^    bool operator ==(const approximately<T>& x, T y)$/;"	f	namespace:math	typeref:typename:bool
operator ==	math/point.h	/^        bool operator ==(const Point<N>& p) const$/;"	f	class:math::Point	typeref:typename:bool
operator ==	math/ray.cpp	/^bool math::operator ==(const Ray& r1, const Ray& r2)$/;"	f	class:math	typeref:typename:bool
operator ==	math/rectangle2d.cpp	/^bool math::operator ==(const Rectangle2D& r1, const Rectangle2D& r2)$/;"	f	class:math	typeref:typename:bool
operator ==	math/vector.h	/^        bool operator ==(const Vector<N>& p) const$/;"	f	class:math::Vector	typeref:typename:bool
operator >	animation/duration.cpp	/^bool animation::operator >(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:bool
operator >	animation/time-stamp.cpp	/^bool animation::TimeStamp::operator >(const TimeStamp& ts) const$/;"	f	class:animation::TimeStamp	typeref:typename:bool
operator >	chaiscript/dispatchkit/boxed_number.hpp	/^      bool operator>(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
operator >	math/angle.cpp	/^bool math::operator >(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:bool
operator >=	animation/duration.cpp	/^bool animation::operator >=(const Duration& d1, const Duration& d2)$/;"	f	class:animation	typeref:typename:bool
operator >=	animation/time-stamp.cpp	/^bool animation::TimeStamp::operator >=(const TimeStamp& ts) const$/;"	f	class:animation::TimeStamp	typeref:typename:bool
operator >=	chaiscript/dispatchkit/boxed_number.hpp	/^      bool operator>=(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:bool
operator >=	math/angle.cpp	/^bool math::operator >=(const Angle& a, const Angle& b)$/;"	f	class:math	typeref:typename:bool
operator >>	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator>>(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator >>	math/function.h	/^    Function<R2(Ts...)> operator >> (const Function<R1(Ts...)>& f, const Function<R2(R1)>& g)$/;"	f	namespace:math	typeref:typename:Function<R2 (Ts...)>
operator >>	math/function.h	/^    Function<R2(Ts...)> operator >> (const Function<R1(Ts...)>& f, const Function<R2(const R1&)>/;"	f	namespace:math	typeref:typename:Function<R2 (Ts...)>
operator >>	pipeline/pipeline-builder.h	/^            PipelineBuilder<T1, T2> operator >> (const PipelineBuilderStart<T1> start, std::shar/;"	f	namespace:raytracer::pipeline::_private_	typeref:typename:PipelineBuilder<T1,T2>
operator >>	pipeline/pipeline-builder.h	/^            PipelineBuilder<T1, std::enable_if_t<pipeline::is_processor<P>::value, typename P::o/;"	f	namespace:raytracer::pipeline::_private_	typeref:typename:PipelineBuilder<T1,std::enable_if_t<pipeline::is_processor<P>::value,typename P::output_type>>
operator >>=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator>>=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator []	chaiscript/dispatchkit/dynamic_object.hpp	/^        Boxed_Value &operator[](const std::string &t_attr_name)$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:Boxed_Value &
operator []	chaiscript/dispatchkit/dynamic_object.hpp	/^        const Boxed_Value &operator[](const std::string &t_attr_name) const$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:const Boxed_Value &
operator []	chaiscript/utility/json.hpp	/^        JSON& operator[]( const size_t index ) {$/;"	f	class:json::JSON	typeref:typename:JSON &
operator []	chaiscript/utility/json.hpp	/^        JSON& operator[]( const string &key ) {$/;"	f	class:json::JSON	typeref:typename:JSON &
operator []	data-structures/array.h	/^    T& operator [](size_t index)$/;"	f	class:array	typeref:typename:T &
operator []	data-structures/array.h	/^    const T& operator [](size_t index) const$/;"	f	class:array	typeref:typename:const T &
operator []	data-structures/grid.h	/^        T& operator [](const Position2D& p)$/;"	f	class:data::Grid	typeref:typename:T &
operator []	data-structures/grid.h	/^        const T& operator [](const Position2D& p) const$/;"	f	class:data::Grid	typeref:typename:const T &
operator []	imaging/bitmap.cpp	/^Color& imaging::Bitmap::operator[](const Position2D& p)$/;"	f	class:imaging::Bitmap	typeref:typename:Color &
operator []	imaging/bitmap.cpp	/^const Color& imaging::Bitmap::operator[](const Position2D& p) const$/;"	f	class:imaging::Bitmap	typeref:typename:const Color &
operator []	math/interval-mapper.h	/^        T2 operator [](T1 x) const$/;"	f	struct:math::IntervalMapper	typeref:typename:T2
operator []	math/point.h	/^        double operator [](unsigned i) const$/;"	f	class:math::Point	typeref:typename:double
operator []	math/point.h	/^        double& operator [](unsigned i)$/;"	f	class:math::Point	typeref:typename:double &
operator []	math/rasterizer.cpp	/^Rectangle2D math::Rasterizer::operator [](const Position2D& position) const$/;"	f	class:math::Rasterizer	typeref:typename:Rectangle2D
operator []	math/vector.h	/^        double operator [](unsigned i) const$/;"	f	class:math::Vector	typeref:typename:double
operator []	math/vector.h	/^        double& operator [](unsigned i)$/;"	f	class:math::Vector	typeref:typename:double &
operator ^	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator^(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator ^=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator^=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator |	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator|(const Boxed_Number &t_rhs) const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator |=	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator|=(const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operator ||	math/function.h	/^    Function<R(Ts...)> operator ||(const Function<R(Ts...)>& f, const Function<R(Ts...)>& g)$/;"	f	namespace:math	typeref:typename:Function<R (Ts...)>
operator ~	chaiscript/dispatchkit/boxed_number.hpp	/^      Boxed_Number operator~() const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
operators	chaiscript/dispatchkit/operators.hpp	/^    namespace operators$/;"	n	namespace:chaiscript::bootstrap
opers_arithmetic_pod	chaiscript/dispatchkit/bootstrap.hpp	/^      static void opers_arithmetic_pod(ModulePtr m = std::make_shared<Module>())$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:void
opers_comparison	chaiscript/dispatchkit/bootstrap.hpp	/^    ModulePtr opers_comparison(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:ModulePtr
optimize_blocks	chaiscript/language/chaiscript_parser.hpp	/^      static void optimize_blocks(AST_NodePtr &p)$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
optimize_returns	chaiscript/language/chaiscript_parser.hpp	/^      static void optimize_returns(AST_NodePtr &p)$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
optimized_ast	chaiscript/language/chaiscript_parser.hpp	/^      AST_NodePtr optimized_ast(bool t_optimize_blocks = false, bool t_optimize_returns = true) /;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:AST_NodePtr
option_explicit_set	chaiscript/dispatchkit/dynamic_object.hpp	/^      option_explicit_set(const std::string &t_param_name)$/;"	f	struct:chaiscript::dispatch::option_explicit_set
option_explicit_set	chaiscript/dispatchkit/dynamic_object.hpp	/^    struct option_explicit_set : std::runtime_error {$/;"	s	namespace:chaiscript::dispatch
optional	scripting/scripting-util.h	/^                bool optional;$/;"	m	struct:raytracer::scripting::util::SingleArgumentParser	typeref:typename:bool
origin	math/ray.h	/^        Point3D origin;$/;"	m	struct:math::Ray	typeref:typename:Point3D
origin	math/rectangle2d.h	/^        Point2D origin;$/;"	m	struct:math::Rectangle2D	typeref:typename:Point2D
origin	math/rectangle3d.h	/^        Point3D origin;$/;"	m	struct:math::Rectangle3D	typeref:typename:Point3D
ostream_t	easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wostream
out	imaging/wif-format.h	/^        std::ofstream out;$/;"	m	class:imaging::WIF	typeref:typename:std::ofstream
out_ptr	chaiscript/language/chaiscript_engine.hpp	/^        void *out_ptr;$/;"	m	union:chaiscript::ChaiScript::ChaiScript::cast_union	typeref:typename:void *
output_type	pipeline/producer.h	/^            using output_type = OUTPUT;$/;"	t	class:raytracer::pipeline::Producer	typeref:typename:OUTPUT
pair_associative_container_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr pair_associative_container_type(const std::string &type, ModulePtr m = std::ma/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
pair_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr pair_type(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
param_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        static std::vector<Type_Info> param_types()$/;"	f	class:chaiscript::dispatch::Attribute_Access	typeref:typename:std::vector<Type_Info>
parameters	chaiscript/dispatchkit/proxy_functions.hpp	/^        std::vector<Boxed_Value> parameters;$/;"	m	class:chaiscript::exception::dispatch_error	typeref:typename:std::vector<Boxed_Value>
parameters	math/function.h	/^        typedef std::tuple<Ts...> parameters;$/;"	t	class:math::Function	typeref:typename:std::tuple<Ts...>
parameters	math/function.h	/^        typedef std::tuple<Ts...> parameters;$/;"	t	struct:math::FunctionBody	typeref:typename:std::tuple<Ts...>
parentApplicationName	easylogging++.h	/^    inline const std::string& parentApplicationName(void) const {$/;"	f	class:el::Logger	typeref:typename:const std::string &
parse	chaiscript/language/chaiscript_engine.hpp	/^    static AST_NodePtr parse(const std::string &t_input)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:AST_NodePtr
parse	chaiscript/language/chaiscript_parser.hpp	/^        void parse(const char_type t_char, const int line, const int col, const std::string &fil/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:void
parse	chaiscript/language/chaiscript_parser.hpp	/^      bool parse(const std::string &t_input, std::string t_fname) {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
parse	scripting/scripting-util.h	/^                void parse(chaiscript::Boxed_Value boxed) override$/;"	f	struct:raytracer::scripting::util::SpecializedSingleArgumentParser	typeref:typename:void
parse	scripting/scripting-util.h	/^                void parse(const std::map<std::string, chaiscript::Boxed_Value>& argument_map)$/;"	f	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:void
parseFormat	easylogging++.h	/^    static char* parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* /;"	f	class:el::base::utils::DateTime	typeref:typename:char *
parseFromFile	easylogging++.h	/^        static bool parseFromFile(const std::string& configurationFile, Configurations* sender, /;"	f	class:el::Configurations::Parser	typeref:typename:bool
parseFromFile	easylogging++.h	/^    inline bool parseFromFile(const std::string& configurationFile, Configurations* base = nullp/;"	f	class:el::Configurations	typeref:typename:bool
parseFromFormat	easylogging++.h	/^    void parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	class:el::base::LogFormat	typeref:typename:void
parseFromText	easylogging++.h	/^        static bool parseFromText(const std::string& configurationsString, Configurations* sende/;"	f	class:el::Configurations::Parser	typeref:typename:bool
parseFromText	easylogging++.h	/^    inline bool parseFromText(const std::string& configurationsString, Configurations* base = nu/;"	f	class:el::Configurations	typeref:typename:bool
parseLine	easylogging++.h	/^        static bool parseLine(std::string* line, std::string* currConfigStr, std::string* currLe/;"	f	class:el::Configurations::Parser	typeref:typename:bool
parse_argument	scripting/scripting-util.h	/^                void parse_argument(const std::string& tag, chaiscript::Boxed_Value boxed)$/;"	f	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:void
parse_arguments	scripting/scripting-util.h	/^                void parse_arguments(const std::map<std::string, chaiscript::Boxed_Value>& argum/;"	f	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:void
parse_array	chaiscript/utility/json.hpp	/^    JSON parse_array( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parse_bool	chaiscript/utility/json.hpp	/^    JSON parse_bool( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parse_next	chaiscript/utility/json.hpp	/^    JSON parse_next( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parse_null	chaiscript/utility/json.hpp	/^    JSON parse_null( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parse_num	chaiscript/chaiscript_defines.hpp	/^    T parse_num(const std::string &t_str)$/;"	f	namespace:chaiscript	typeref:typename:T
parse_num	chaiscript/chaiscript_defines.hpp	/^    auto parse_num(const char *t_str) -> typename std::enable_if<!std::is_integral<T>::value, T>/;"	f	namespace:chaiscript	typeref:typename:std::enable_if<!std::is_integral<T>::value,T>::type
parse_num	chaiscript/chaiscript_defines.hpp	/^    auto parse_num(const char *t_str) -> typename std::enable_if<std::is_integral<T>::value, T>:/;"	f	namespace:chaiscript	typeref:typename:std::enable_if<std::is_integral<T>::value,T>::type
parse_number	chaiscript/utility/json.hpp	/^    JSON parse_number( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parse_object	chaiscript/utility/json.hpp	/^    JSON parse_object( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parse_string	chaiscript/dispatchkit/bootstrap.hpp	/^    auto parse_string(const std::string &) $/;"	f	namespace:chaiscript::bootstrap
parse_string	chaiscript/dispatchkit/bootstrap.hpp	/^    auto parse_string(const std::string &i)$/;"	f	namespace:chaiscript::bootstrap
parse_string	chaiscript/utility/json.hpp	/^    JSON parse_string( const string &str, size_t &offset ) {$/;"	f	namespace:json::__anon08466b710210	typeref:typename:JSON
parser	chaiscript/language/chaiscript_parser.hpp	/^  namespace parser$/;"	n	namespace:chaiscript
pathExists	easylogging++.h	/^    static inline bool pathExists(const char* path, bool considerFile = false) {$/;"	f	class:el::base::utils::File	typeref:typename:bool
pattern2d	materials/pattern-materials.cpp	/^Material raytracer::materials::pattern2d(math::Function<bool(const Point2D&)> pattern, Material /;"	f	class:raytracer::materials	typeref:typename:Material
perform	tasks/lambda-task.cpp	/^        void perform() override$/;"	f	class:__anone3f7ea6c0110::LambdaTask	typeref:typename:void	file:
perform	tasks/serial-task-scheduler.cpp	/^        void perform(std::vector<std::shared_ptr<Task>> tasks) const$/;"	f	class:__anone7bc5c570110::SerialTaskScheduler	typeref:typename:void	file:
performOptionalSelector	Catch.h	/^id performOptionalSelector(id obj, SEL sel);$/;"	f
performOptionalSelector	Catch.h	/^inline id performOptionalSelector(id obj, SEL sel) {$/;"	f
performance	performance/performance.cpp	/^namespace performance$/;"	n	file:
performance	performance/performance.h	/^namespace performance$/;"	n
performanceTracking	easylogging++.h	/^    inline bool performanceTracking(Level level = Level::Global) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
performanceTrackingCallback	easylogging++.h	/^    inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:T *
perspective	cameras/perspective-camera.cpp	/^Camera raytracer::cameras::perspective($/;"	f	class:raytracer::cameras	typeref:typename:Camera
perspective	scripting/cameras-module.cpp	/^        Camera perspective($/;"	f	struct:__anone59b1e270110::CameraLibrary	typeref:typename:Camera	file:
perspective_by_map	scripting/cameras-module.cpp	/^        Camera perspective_by_map(const std::map<std::string, Boxed_Value>& argument_map) const$/;"	f	struct:__anone59b1e270110::CameraLibrary	typeref:typename:Camera	file:
pipeline	pipeline/animation-processor.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/base64-processor.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/consumer.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/null-consumer.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/pipeline-builder.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/pipeline.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/processor.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/producer.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/renderer-processor.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/text-writer-consumer.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/wif-consumer.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline	pipeline/wif-processor.h	/^    namespace pipeline$/;"	n	namespace:raytracer
pipeline_builder	scripting/pipeline-module.cpp	/^    void pipeline_builder(Boxed_Value initial, const std::vector<Boxed_Value>& pipeline_segments/;"	f	namespace:__anona6a8c5210110	typeref:typename:void
point	math/plane.h	/^        Point3D point;$/;"	m	struct:math::Plane	typeref:typename:Point3D
point_animation	scripting/animation-module.cpp	/^        Animation<Point3D> point_animation(const Point3D& from, const Point3D& to, Duration dura/;"	f	struct:__anona5945eab0110::AnimationLibrary	typeref:typename:Animation<Point3D>	file:
polar	math/vector.h	/^            static T polar(double radius, math::Angle theta)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
polar	scripting/math-module.cpp	/^        Point2D polar(double radius, Angle theta) const                         { return Point2D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point2D	file:
polar	scripting/math-module.cpp	/^        Vector2D polar(double radius, Angle theta) const                        { return Vector2/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector2D	file:
pop	easylogging++.h	/^    inline void pop(void) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:void
pop_back	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void pop_back()$/;"	f	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:void
pop_back	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void pop_back()$/;"	f	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:void
pop_front	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void pop_front()$/;"	f	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:void
pop_front	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          void pop_front()$/;"	f	struct:chaiscript::bootstrap::standard_library::Const_Bidir_Range	typeref:typename:void
pop_function_call	chaiscript/dispatchkit/dispatchkit.hpp	/^        void pop_function_call()$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
pop_function_call	chaiscript/dispatchkit/dispatchkit.hpp	/^        void pop_function_call(Stack_Holder &t_s, Type_Conversions::Conversion_Saves &t_saves)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
pop_ptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef void (ContainerType::*pop_ptr)();$/;"	t	function:chaiscript::bootstrap::standard_library::front_insertion_sequence_type	typeref:typename:void (ContainerType::*)()
pop_scope	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void pop_scope(Stack_Holder &t_holder)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
pop_scope	chaiscript/dispatchkit/dispatchkit.hpp	/^        void pop_scope()$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
pop_stack	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void pop_stack(Stack_Holder &t_holder)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
position	primitives/hit.h	/^        math::Point3D position;$/;"	m	struct:raytracer::Hit	typeref:typename:math::Point3D
position3d_to_vector3d	math/functions/random-function.cpp	/^math::Function<Vector3D(const Position3D&)> math::functions::random::position3d_to_vector3d(unsi/;"	f	class:math::functions::random	typeref:typename:math::Function<Vector3D (const Position3D &)>
position_to_vector2d	math/functions/random-function.cpp	/^math::Function<Vector2D(const Position2D&)> math::functions::random::position_to_vector2d(unsign/;"	f	class:math::functions::random	typeref:typename:math::Function<Vector2D (const Position2D &)>
postprocess	animation/animation.h	/^    Animation<T2> postprocess(Animation<T1> animation, math::Function<T2(T1)> function)$/;"	f	namespace:animation	typeref:typename:Animation<T2>
preRollOutCallback	easylogging++.h	/^    inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	class:el::base::Storage	typeref:typename:PreRollOutCallback &
pre_decrement	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number pre_decrement(Boxed_Number t_lhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
pre_decrement	chaiscript/language/chaiscript_algebraic.hpp	/^      assign, pre_increment, pre_decrement, assign_product, assign_sum,$/;"	e	enum:chaiscript::Operators::Opers
pre_increment	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Number pre_increment(Boxed_Number t_lhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Number
pre_increment	chaiscript/language/chaiscript_algebraic.hpp	/^      assign, pre_increment, pre_decrement, assign_product, assign_sum,$/;"	e	enum:chaiscript::Operators::Opers
prefix_decrement	chaiscript/dispatchkit/operators.hpp	/^          auto prefix_decrement(L l) -> decltype(( --l ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((--l))
prefix_decrement	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr prefix_decrement(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
prefix_increment	chaiscript/dispatchkit/operators.hpp	/^          auto prefix_increment(L l) -> decltype(( ++l ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((++l))
prefix_increment	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr prefix_increment(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
preprocess	animation/animation.h	/^    Animation<T> preprocess(math::Function<TimeStamp(TimeStamp)> function, Animation<T> animatio/;"	f	namespace:animation	typeref:typename:Animation<T>
pretty	chaiscript/language/chaiscript_common.hpp	/^        static std::string pretty(const T& t)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_common.hpp	/^      std::string pretty_print() const$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_common.hpp	/^      virtual std::string pretty_print() const$/;"	f	struct:chaiscript::AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Arg_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Arg_List_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Array_Call_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Binary_Operator_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Eol_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Fun_Call_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Quoted_String_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Single_Quoted_String_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE $/;"	f	struct:chaiscript::eval::Var_Decl_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE$/;"	f	struct:chaiscript::eval::Inline_Array_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE$/;"	f	struct:chaiscript::eval::Logical_And_AST_Node	typeref:typename:std::string
pretty_print	chaiscript/language/chaiscript_eval.hpp	/^        virtual std::string pretty_print() const CHAISCRIPT_OVERRIDE$/;"	f	struct:chaiscript::eval::Logical_Or_AST_Node	typeref:typename:std::string
primitive	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^                            Primitive primitive = xy_plane();$/;"	v	typeref:typename:Primitive
primitive	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^                            Primitive primitive = xz_plane();$/;"	v	typeref:typename:Primitive
primitive	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^                            Primitive primitive = yz_plane();$/;"	v	typeref:typename:Primitive
primitive	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^                            Primitive primitive = sphere();$/;"	v	typeref:typename:Primitive
primitives	primitives/decorator-primitive.h	/^    namespace primitives$/;"	n	namespace:raytracer
primitives	primitives/plane-primitive.h	/^    namespace primitives$/;"	n	namespace:raytracer
primitives	primitives/primitive.h	/^    namespace primitives$/;"	n	namespace:raytracer
primitives	primitives/sphere-primitive.h	/^    namespace primitives$/;"	n	namespace:raytracer
primitives	primitives/transformer-primitive.h	/^    namespace primitives$/;"	n	namespace:raytracer
primitives	primitives/union-primitive.h	/^    namespace primitives$/;"	n	namespace:raytracer
primitives	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    std::vector<Primitive> primitives = { left_sphere, right_sphere };$/;"	v	typeref:typename:std::vector<Primitive>
print	chaiscript/dispatchkit/bootstrap.hpp	/^      static void print(const std::string &s)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:void
print_statistics	app.cpp	/^    void print_statistics()$/;"	f	namespace:__anon3bd80ed70110	typeref:typename:void
print_statistics	performance/performance.cpp	/^void performance::print_statistics(std::ostream& out)$/;"	f	class:performance	typeref:typename:void
println	chaiscript/dispatchkit/bootstrap.hpp	/^      static void println(const std::string &s)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:void
process	command-line-parser.cpp	/^void CommandLineParser::process(int argc, char** argv) const$/;"	f	class:CommandLineParser	typeref:typename:void
process	command-line-parser.cpp	/^void CommandLineParser::process(std::list<std::string>& arguments) const$/;"	f	class:CommandLineParser	typeref:typename:void
process_command_line_arguments	app.cpp	/^void process_command_line_arguments(int argc, char** argv)$/;"	f	typeref:typename:void
process_hex	chaiscript/language/chaiscript_parser.hpp	/^        void process_hex()$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:void
process_octal	chaiscript/language/chaiscript_parser.hpp	/^        void process_octal()$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:void
produce	pipeline/producer.h	/^            void produce(const OUTPUT& output)$/;"	f	class:raytracer::pipeline::Producer	typeref:typename:void
produce_end	pipeline/producer.h	/^            void produce_end()$/;"	f	class:raytracer::pipeline::Producer	typeref:typename:void
product	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number product(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
product	chaiscript/language/chaiscript_algebraic.hpp	/^      sum, quotient, product, difference, unary_plus, unary_minus, $/;"	e	enum:chaiscript::Operators::Opers
project	math/rectangle3d.cpp	/^Point3D math::Rectangle3D::project(const Point2D& p) const$/;"	f	class:math::Rectangle3D	typeref:typename:Point3D
properties	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            MaterialProperties properties(color, colors::black(), colors::black(), 0);$/;"	v	typeref:typename:MaterialProperties
ptr	data-structures/array.h	/^    T* ptr() { return m_data.get() + m_start; }$/;"	f	class:array	typeref:typename:T *
ptr	data-structures/array.h	/^    const T* ptr() const { return m_data.get() + m_start; }$/;"	f	class:array	typeref:typename:const T *
ptr_assign	chaiscript/dispatchkit/bootstrap.hpp	/^    Boxed_Value ptr_assign(Boxed_Value lhs, const std::shared_ptr<Type> &rhs)$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:Boxed_Value
push	easylogging++.h	/^    inline void push(const AsyncLogItem& item) {$/;"	f	class:el::base::AsyncLogQueue	typeref:typename:void
push_back	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef void (ContainerType::*push_back)(const typename ContainerType::value_type &);$/;"	t	function:chaiscript::bootstrap::standard_library::back_insertion_sequence_type	typeref:typename:void (ContainerType::*)(const typename ContainerType::value_type &)
push_front	chaiscript/dispatchkit/proxy_functions.hpp	/^        void push_front(std::string t_name, Type_Info t_ti)$/;"	f	class:chaiscript::dispatch::Param_Types	typeref:typename:void
push_ptr	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef void (ContainerType::*push_ptr)(typename ContainerType::const_reference);$/;"	t	function:chaiscript::bootstrap::standard_library::front_insertion_sequence_type	typeref:typename:void (ContainerType::*)(typename ContainerType::const_reference)
quantize	imaging/color.cpp	/^void imaging::Color::quantize(unsigned levels)$/;"	f	class:imaging::Color	typeref:typename:void
quantize	math/quantize.cpp	/^double math::quantize(double x, unsigned levels)$/;"	f	class:math	typeref:typename:double
quantized	imaging/color.cpp	/^Color imaging::Color::quantized(unsigned levels) const$/;"	f	class:imaging::Color	typeref:typename:Color
quiet	app.cpp	/^    void quiet()$/;"	f	namespace:__anon3bd80ed70110	typeref:typename:void
quiet	logging.cpp	/^void logging::quiet()$/;"	f	class:logging	typeref:typename:void
quotient	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number quotient(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
quotient	chaiscript/language/chaiscript_algebraic.hpp	/^      sum, quotient, product, difference, unary_plus, unary_minus, $/;"	e	enum:chaiscript::Operators::Opers
r	Makefile	/^r: release_build$/;"	t
r	imaging/bmp-format.cpp	/^        uint8_t r;$/;"	m	struct:__anon5b9926d60110::ARGB	typeref:typename:uint8_t	file:
r	imaging/bmp-format.cpp	/^        uint8_t r;$/;"	m	struct:__anon5b9926d60110::RGB	typeref:typename:uint8_t	file:
r	imaging/color.h	/^        double r;$/;"	m	struct:imaging::Color	typeref:typename:double
r	imaging/wif-format.cpp	/^        uint8_t r, g, b;$/;"	m	struct:__anon10e0153d0110::RGBColor	typeref:typename:uint8_t	file:
r	tests/math/rasterizer-tests.cpp	/^    Rasterizer r(rect, 2, 2);$/;"	v	typeref:typename:Rasterizer
radians	math/angle.cpp	/^Angle math::Angle::radians(long double x)$/;"	f	class:math::Angle	typeref:typename:Angle
radians	math/angle.cpp	/^double math::Angle::radians() const $/;"	f	class:math::Angle	typeref:typename:double
radius	math/coordinate-systems.h	/^        double radius;$/;"	m	struct:math::CylindricalX	typeref:typename:double
radius	math/coordinate-systems.h	/^        double radius;$/;"	m	struct:math::CylindricalY	typeref:typename:double
radius	math/coordinate-systems.h	/^        double radius;$/;"	m	struct:math::CylindricalZ	typeref:typename:double
radius	math/coordinate-systems.h	/^        double radius;$/;"	m	struct:math::Polar	typeref:typename:double
radius	math/coordinate-systems.h	/^        double radius;$/;"	m	struct:math::Spherical	typeref:typename:double
radius	tests/primitives/disk/disk-tests.cpp	/^    for (double radius = 0; radius < 1; radius += 0.11)$/;"	v	typeref:typename:double
radius	tests/primitives/disk/disk-tests.cpp	/^    for (double radius = 1.01; radius < 100; radius *= 1.5)$/;"	v	typeref:typename:double
random	math/functions/random-function.h	/^        namespace random$/;"	n	namespace:math::functions
random_access_container_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr random_access_container_type(const std::string &\/*type*\/, ModulePtr m = std:/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
random_function	math/functions/random-function.cpp	/^math::Function<unsigned(unsigned)> math::functions::random_function(unsigned parameter)$/;"	f	class:math::functions	typeref:typename:math::Function<unsigned (unsigned)>
range	tasks/task-helpers.h	/^    std::vector<std::shared_ptr<Task>> range(T from, T to, std::function<void(T)> lambda)$/;"	f	namespace:tasks	typeref:typename:std::vector<std::shared_ptr<Task>>
ray	lights/light-ray.h	/^        math::Ray ray;$/;"	m	struct:raytracer::LightRay	typeref:typename:math::Ray
ray	raytracers/trace-result.h	/^        math::Ray ray;$/;"	m	struct:raytracer::TraceResult	typeref:typename:math::Ray
ray	tests/primitives/triangle/triangle-tests.cpp	/^        Ray ray(Point3D(-0.1, 0.1, 1), Vector3D(0, 0, -1));$/;"	v	typeref:typename:Ray
ray	tests/primitives/triangle/triangle-tests.cpp	/^        Ray ray(Point3D(0.05, 0.9, 1), Vector3D(0, 0, -1));$/;"	v	typeref:typename:Ray
ray	tests/primitives/triangle/triangle-tests.cpp	/^        Ray ray(Point3D(0.1, -0.1, 1), Vector3D(0, 0, -1));$/;"	v	typeref:typename:Ray
ray	tests/primitives/triangle/triangle-tests.cpp	/^        Ray ray(Point3D(0.1, 0.1, 1), Vector3D(0, 0, -1));$/;"	v	typeref:typename:Ray
ray	tests/primitives/triangle/triangle-tests.cpp	/^        Ray ray(Point3D(0.9, 0.05, 1), Vector3D(0, 0, -1));$/;"	v	typeref:typename:Ray
ray	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            Ray ray(Point3D(0, 0, z), Vector3D(0, 0, -1));$/;"	v	typeref:typename:Ray
ray	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            Ray ray(Point3D(0, 0, z), Vector3D(0, 0, 1));$/;"	v	typeref:typename:Ray
ray_direction	tests/primitives/disk/disk-tests.cpp	/^                        Vector3D ray_direction = Vector3D(0, -dy, 0);$/;"	v	typeref:typename:Vector3D
ray_direction	tests/primitives/disk/disk-tests.cpp	/^                        Vector3D ray_direction = Vector3D(0, dy, 0);$/;"	v	typeref:typename:Vector3D
ray_direction	tests/primitives/disk/disk-tests.cpp	/^                        Vector3D ray_direction = Vector3D(dx, 0, dz);$/;"	v	typeref:typename:Vector3D
ray_direction	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    Vector3D ray_direction(1, 0, 0);$/;"	v	typeref:typename:Vector3D
ray_origin	tests/primitives/disk/disk-tests.cpp	/^                        Point3D ray_origin = Point3D(x, y, z);$/;"	v	typeref:typename:Point3D
ray_origin	tests/primitives/disk/disk-tests.cpp	/^                        Point3D ray_origin = Point3D::cartesian(cartesian_coordinates);$/;"	v	typeref:typename:Point3D
ray_origin	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    Point3D ray_origin(-100, 0, 0);$/;"	v	typeref:typename:Point3D
ray_tracer	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            auto ray_tracer = raytracers::v1();$/;"	v	typeref:typename:auto
raytracer	cameras/camera.h	/^namespace raytracer$/;"	n
raytracer	cameras/displaceable-camera.h	/^namespace raytracer$/;"	n
raytracer	cameras/perspective-camera.h	/^namespace raytracer$/;"	n
raytracer	lights/light-ray.h	/^namespace raytracer$/;"	n
raytracer	lights/light-source.h	/^namespace raytracer$/;"	n
raytracer	lights/omnidirectional-point-light.h	/^namespace raytracer$/;"	n
raytracer	lights/point-light.h	/^namespace raytracer$/;"	n
raytracer	materials/composition-material.h	/^namespace raytracer$/;"	n
raytracer	materials/material-properties.h	/^namespace raytracer$/;"	n
raytracer	materials/material.h	/^namespace raytracer$/;"	n
raytracer	materials/pattern-materials.h	/^namespace raytracer$/;"	n
raytracer	materials/uniform-material.h	/^namespace raytracer$/;"	n
raytracer	pipeline/animation-processor.h	/^namespace raytracer$/;"	n
raytracer	pipeline/base64-processor.h	/^namespace raytracer$/;"	n
raytracer	pipeline/consumer.h	/^namespace raytracer$/;"	n
raytracer	pipeline/null-consumer.h	/^namespace raytracer$/;"	n
raytracer	pipeline/pipeline-builder.h	/^namespace raytracer$/;"	n
raytracer	pipeline/pipeline.h	/^namespace raytracer$/;"	n
raytracer	pipeline/processor.h	/^namespace raytracer$/;"	n
raytracer	pipeline/producer.h	/^namespace raytracer$/;"	n
raytracer	pipeline/renderer-processor.h	/^namespace raytracer$/;"	n
raytracer	pipeline/text-writer-consumer.h	/^namespace raytracer$/;"	n
raytracer	pipeline/wif-consumer.h	/^namespace raytracer$/;"	n
raytracer	pipeline/wif-processor.h	/^namespace raytracer$/;"	n
raytracer	primitives/decorator-primitive.h	/^namespace raytracer$/;"	n
raytracer	primitives/hit-position.h	/^namespace raytracer$/;"	n
raytracer	primitives/hit.h	/^namespace raytracer$/;"	n
raytracer	primitives/plane-primitive.h	/^namespace raytracer$/;"	n
raytracer	primitives/primitive.h	/^namespace raytracer$/;"	n
raytracer	primitives/sphere-primitive.h	/^namespace raytracer$/;"	n
raytracer	primitives/transformer-primitive.h	/^namespace raytracer$/;"	n
raytracer	primitives/union-primitive.h	/^namespace raytracer$/;"	n
raytracer	raytracers/ray-tracer-v0.h	/^namespace raytracer$/;"	n
raytracer	raytracers/ray-tracer.h	/^namespace raytracer$/;"	n
raytracer	raytracers/scene.h	/^namespace raytracer$/;"	n
raytracer	raytracers/trace-result.h	/^namespace raytracer$/;"	n
raytracer	renderers/renderer.h	/^namespace raytracer$/;"	n
raytracer	renderers/standard-renderer.h	/^namespace raytracer$/;"	n
raytracer	samplers/sampler.h	/^namespace raytracer$/;"	n
raytracer	samplers/single-sampler.h	/^namespace raytracer$/;"	n
raytracer	scripting/animation-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/cameras-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/imaging-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/lights-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/materials-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/math-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/pipeline-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/primitives-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/raytracing-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/rendering-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/samplers-module.h	/^namespace raytracer$/;"	n
raytracer	scripting/scripting-util.h	/^namespace raytracer$/;"	n
raytracer	scripting/scripting.cpp	/^namespace raytracer$/;"	n	file:
raytracer	scripting/scripting.h	/^namespace raytracer$/;"	n
raytracers	raytracers/ray-tracer-v0.h	/^    namespace raytracers$/;"	n	namespace:raytracer
raytracers	raytracers/ray-tracer.h	/^    namespace raytracers$/;"	n	namespace:raytracer
read_24bit_pixels	imaging/bmp-format.cpp	/^    void read_24bit_pixels(Bitmap& bmp, array<uint8_t> pixels)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:void
read_32bit_pixels	imaging/bmp-format.cpp	/^    void read_32bit_pixels(Bitmap& bmp, array<uint8_t> pixels)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:void
read_data	imaging/bmp-format.cpp	/^    array<uint8_t> read_data(const std::string& path)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:array<uint8_t>
read_exponent_and_suffix	chaiscript/language/chaiscript_parser.hpp	/^      bool read_exponent_and_suffix() {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:bool
reason	chaiscript/language/chaiscript_common.hpp	/^      std::string reason;$/;"	m	struct:chaiscript::exception::eval_error	typeref:typename:std::string
reconfigure	easylogging++.h	/^    inline void reconfigure(void) {$/;"	f	class:el::Logger	typeref:typename:void
rect	math/rasterizer.h	/^        Rectangle2D rect;$/;"	m	class:math::Rasterizer	typeref:typename:Rectangle2D
rect	tests/math/rasterizer-tests.cpp	/^    Rectangle2D rect(Point2D(0, 1), Vector2D(1, 0), Vector2D(0, -1));$/;"	v	typeref:typename:Rectangle2D
red	imaging/color.h	/^        constexpr Color red()     { return Color{ 1, 0, 0 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
reference_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^          typedef typename std::iterator_traits<typename Container::iterator>::reference referen/;"	t	struct:chaiscript::bootstrap::standard_library::Bidir_Range	typeref:typename:std::iterator_traits<typename Container::iterator>::reference
reflect_by	math/vector.h	/^        Vector<N> reflect_by(const Vector<N>& n) const$/;"	f	class:math::Vector	typeref:typename:Vector<N>
reflectivity	materials/material-properties.h	/^        const double reflectivity;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const double
refractive_index	materials/material-properties.h	/^        const double refractive_index;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const double
registerNew	easylogging++.h	/^    virtual inline void registerNew(T_Ptr* ptr) ELPP_FINAL {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
registerNew	easylogging++.h	/^    virtual inline void registerNew(const T_Key& uniqKey, T_Ptr* ptr) ELPP_FINAL {$/;"	f	class:el::base::utils::Registry	typeref:typename:void
register_assignment	scripting/scripting-util.h	/^            void register_assignment(chaiscript::Module& module)$/;"	f	namespace:raytracer::scripting::util	typeref:typename:void
register_processor	command-line-parser.cpp	/^void CommandLineParser::register_processor(const std::string& prefix, std::function<void()> proc/;"	f	class:CommandLineParser	typeref:typename:void
register_processor	command-line-parser.cpp	/^void CommandLineParser::register_processor(const std::string& prefix, std::function<void(const s/;"	f	class:CommandLineParser	typeref:typename:void
register_processor	command-line-parser.cpp	/^void CommandLineParser::register_processor(const std::string& prefix, std::function<void(std::li/;"	f	class:CommandLineParser	typeref:typename:void
register_to_string	scripting/scripting-util.h	/^            void register_to_string(chaiscript::Module& module)$/;"	f	namespace:raytracer::scripting::util	typeref:typename:void
register_type	scripting/scripting-util.h	/^            void register_type(chaiscript::Module& module, const std::string& name)$/;"	f	namespace:raytracer::scripting::util	typeref:typename:void
registeredLoggers	easylogging++.h	/^    inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::RegisteredLoggers *
reinitDeepCopy	easylogging++.h	/^    void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:void
reinterpret	data-structures/array.h	/^T* reinterpret(array<uint8_t> buffer)$/;"	f	typeref:typename:T *
releaseLock	easylogging++.h	/^    virtual inline void releaseLock(void) ELPP_FINAL { m_mutex.unlock(); }$/;"	f	class:el::base::threading::ThreadSafe	typeref:typename:void
release_build	Makefile	/^release_build:$/;"	t
release_no_scripting_build	Makefile	/^release_no_scripting_build:$/;"	t
remainder	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number remainder(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
remainder	chaiscript/dispatchkit/operators.hpp	/^          auto remainder(L l, R r) -> decltype(( l % r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l%r))
remainder	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr remainder(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
remainder	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
remaining	chaiscript/language/chaiscript_parser.hpp	/^        size_t remaining() const {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:size_t
remove	easylogging++.h	/^    bool remove(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:bool
removeFlag	easylogging++.h	/^    inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::base::Storage	typeref:typename:void
removeFlag	easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::base::utils	typeref:typename:void
render	demos/demo.cpp	/^void demos::Demo::render(std::shared_ptr<raytracer::pipeline::Consumer<std::shared_ptr<imaging::/;"	f	class:demos::Demo	typeref:typename:void
render	renderers/standard-renderer.cpp	/^        std::shared_ptr<imaging::Bitmap> render(const Scene& scene) const override$/;"	f	class:__anon61ccc6c40110::StandardRenderer	typeref:typename:std::shared_ptr<imaging::Bitmap>	file:
render_pixel	renderers/standard-renderer.cpp	/^        Color render_pixel(const math::Rasterizer& window_rasterizer, const Position2D& position/;"	f	class:__anon61ccc6c40110::StandardRenderer	typeref:typename:Color	file:
render_script	app.cpp	/^    void render_script(const std::string& filename)$/;"	f	namespace:__anon3bd80ed70110	typeref:typename:void
renderer	pipeline/renderer-processor.cpp	/^std::shared_ptr<Processor<std::shared_ptr<Scene>, std::shared_ptr<imaging::Bitmap>>> raytracer::/;"	f	class:raytracer::pipeline	typeref:typename:std::shared_ptr<Processor<std::shared_ptr<Scene>,std::shared_ptr<imaging::Bitmap>>>
renderer	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> renderer(Renderer renderer) const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
renderers	renderers/renderer.h	/^    namespace renderers$/;"	n	namespace:raytracer
renderers	renderers/standard-renderer.h	/^    namespace renderers$/;"	n	namespace:raytracer
replaceAll	easylogging++.h	/^    static inline std::string& replaceAll(std::string& str, char replaceWhat, char replaceWith) /;"	f	class:el::base::utils::Str	typeref:typename:std::string &
replaceAll	easylogging++.h	/^    static inline std::string& replaceAll(std::string& str, const std::string& replaceWhat, \/\//;"	f	class:el::base::utils::Str	typeref:typename:std::string &
replaceFirstWithEscape	easylogging++.h	/^    static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& re/;"	f	class:el::base::utils::Str	typeref:typename:void
replace_child	chaiscript/language/chaiscript_common.hpp	/^      void replace_child(const AST_NodePtr &t_child, const AST_NodePtr &t_new_child)$/;"	f	struct:chaiscript::AST_Node	typeref:typename:void
report_error	scripting/scripting.cpp	/^    void report_error(const chaiscript::exception::eval_error& e)$/;"	f	namespace:__anondc80204b0110	typeref:typename:void
reserved_word_error	chaiscript/dispatchkit/dispatchkit.hpp	/^        reserved_word_error(const std::string &t_word) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::reserved_word_error
reserved_word_error	chaiscript/dispatchkit/dispatchkit.hpp	/^    class reserved_word_error : public std::runtime_error$/;"	c	namespace:chaiscript::exception
resetLocation	easylogging++.h	/^    inline void resetLocation(const char* filename, unsigned long int lineNumber) {$/;"	f	class:el::base::HitCounter	typeref:typename:void
reset_return_value	chaiscript/dispatchkit/boxed_value.hpp	/^      void reset_return_value() const CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:void
resolveFilename	easylogging++.h	/^    std::string resolveFilename(const std::string& filename) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:std::string
resolveLoggerFormatSpec	easylogging++.h	/^    void resolveLoggerFormatSpec(void) const {$/;"	f	class:el::Logger	typeref:typename:void
resolver	easylogging++.h	/^    inline const FormatSpecifierValueResolver& resolver(void) const { return m_resolver; }$/;"	f	class:el::CustomFormatSpecifier	typeref:typename:const FormatSpecifierValueResolver &
result	math/function.h	/^        typedef R result;$/;"	t	class:math::Function	typeref:typename:R
result	math/function.h	/^        typedef R result;$/;"	t	struct:math::FunctionBody	typeref:typename:R
result	math/misc.h	/^        using result = T;$/;"	t	struct:math::ExtremumFinder	typeref:typename:T
return_boxed_value_vector	chaiscript/dispatchkit/bootstrap.hpp	/^      static std::function<std::vector<Boxed_Value> (const dispatch::Proxy_Function_Base*)> retu/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:std::function<std::vector<Boxed_Value> (const dispatch::Proxy_Function_Base *)>
retval	chaiscript/language/chaiscript_common.hpp	/^        Boxed_Value retval;$/;"	m	struct:chaiscript::eval::detail::Return_Value	typeref:typename:Boxed_Value
rgb	scripting/imaging-module.cpp	/^    Color rgb(double r, double g, double b)$/;"	f	namespace:__anonb790ac470110	typeref:typename:Color
right_shift	chaiscript/dispatchkit/operators.hpp	/^          auto right_shift(L l, R r) -> decltype(( l >> r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l>> r))
right_shift	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr right_shift(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
right_sphere	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    auto right_sphere = translate(Vector3D(-1, 0, 0), sphere());$/;"	v	typeref:typename:auto
rn	Makefile	/^rn: release_no_scripting_build$/;"	t
root	raytracers/scene.h	/^        raytracer::Primitive root;$/;"	m	struct:raytracer::Scene	typeref:typename:raytracer::Primitive
root	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            auto root = decorate(material, sphere());$/;"	v	typeref:typename:auto
rotation	math/transformation-matrices.cpp	/^Matrix3x3 math::transformation_matrices::rotation(Angle angle)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix3x3
rotation_around_x	math/transformation-matrices.cpp	/^Matrix4x4 math::transformation_matrices::rotation_around_x(Angle angle)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix4x4
rotation_around_y	math/transformation-matrices.cpp	/^Matrix4x4 math::transformation_matrices::rotation_around_y(Angle angle)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix4x4
rotation_around_z	math/transformation-matrices.cpp	/^Matrix4x4 math::transformation_matrices::rotation_around_z(Angle angle)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix4x4
rtrim	easylogging++.h	/^    static inline std::string& rtrim(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
run	easylogging++.h	/^    void run() {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
run	scripting/scripting.cpp	/^void raytracer::scripting::run(const std::string& source)$/;"	f	class:raytracer::scripting	typeref:typename:void
run_script	scripting/scripting.cpp	/^void raytracer::scripting::run_script(const std::string& path)$/;"	f	class:raytracer::scripting	typeref:typename:void
runner	easylogging++.h	/^    static void* runner(void *context) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void *
safeDelete	easylogging++.h	/^safeDelete(T*& pointer) {$/;"	f	namespace:el::base::utils	typeref:typename:std::enable_if<std::is_pointer<T * >::value,void>::type
sample	samplers/sampler.cpp	/^std::vector<Point2D> raytracer::samplers::_private_::SamplerImplementation::sample(const math::R/;"	f	class:raytracer::samplers::_private_::SamplerImplementation	typeref:typename:std::vector<Point2D>
sample	samplers/sampler.cpp	/^void raytracer::samplers::_private_::SamplerImplementation::sample(const math::Rectangle2D& rect/;"	f	class:raytracer::samplers::_private_::SamplerImplementation	typeref:typename:void
sample	samplers/single-sampler.cpp	/^        void sample(const math::Rectangle2D& rectangle, std::function<void(const math::Point2D&)/;"	f	class:__anon99214b2f0110::SingleSampler	typeref:typename:void	file:
samplers	samplers/sampler.h	/^    namespace samplers$/;"	n	namespace:raytracer
samplers	samplers/single-sampler.h	/^    namespace samplers$/;"	n	namespace:raytracer
save_bitmap	imaging/bmp-format.cpp	/^void imaging::save_bitmap(const std::string& path, const Bitmap& bitmap)$/;"	f	class:imaging	typeref:typename:void
save_function_params	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void save_function_params(Stack_Holder &t_s, const std::vector<Boxed_Value> &t_pa/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
save_function_params	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void save_function_params(Stack_Holder &t_s, std::initializer_list<Boxed_Value> t/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
save_function_params	chaiscript/dispatchkit/dispatchkit.hpp	/^        static void save_function_params(Stack_Holder &t_s, std::vector<Boxed_Value> &&t_params)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
save_function_params	chaiscript/dispatchkit/dispatchkit.hpp	/^        void save_function_params(const std::vector<Boxed_Value> &t_params)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
save_function_params	chaiscript/dispatchkit/dispatchkit.hpp	/^        void save_function_params(std::initializer_list<Boxed_Value> t_params)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
save_function_params	chaiscript/dispatchkit/dispatchkit.hpp	/^        void save_function_params(std::vector<Boxed_Value> &&t_params)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
save_params	chaiscript/language/chaiscript_common.hpp	/^        void save_params(const std::vector<Boxed_Value> &t_params)$/;"	f	struct:chaiscript::eval::detail::Function_Push_Pop	typeref:typename:void
save_params	chaiscript/language/chaiscript_common.hpp	/^        void save_params(std::initializer_list<Boxed_Value> t_params)$/;"	f	struct:chaiscript::eval::detail::Function_Push_Pop	typeref:typename:void
saves	chaiscript/dispatchkit/type_conversions.hpp	/^        std::vector<Boxed_Value> saves;$/;"	m	struct:chaiscript::Type_Conversions::Conversion_Saves	typeref:typename:std::vector<Boxed_Value>
saves	chaiscript/dispatchkit/type_conversions.hpp	/^      Type_Conversions::Conversion_Saves &saves() const {$/;"	f	class:chaiscript::Type_Conversions_State	typeref:typename:Type_Conversions::Conversion_Saves &
saw_interpolation_marker	chaiscript/language/chaiscript_parser.hpp	/^        bool saw_interpolation_marker;$/;"	m	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser	typeref:typename:bool
scalar_interval	scripting/math-module.cpp	/^    Interval<double> scalar_interval(double lower, double upper)$/;"	f	namespace:__anon63c0fd550110	typeref:typename:Interval<double>
scaling	math/transformation-matrices.cpp	/^Matrix3x3 math::transformation_matrices::scaling(double sx, double sy)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix3x3
scaling	math/transformation-matrices.cpp	/^Matrix4x4 math::transformation_matrices::scaling(double sx, double sy, double sz)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix4x4
schedulers	tasks/serial-task-scheduler.h	/^    namespace schedulers$/;"	n	namespace:tasks
schedulers	tasks/task-scheduler.h	/^    namespace schedulers$/;"	n	namespace:tasks
scripting	scripting/animation-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/cameras-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/imaging-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/lights-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/materials-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/math-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/pipeline-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/primitives-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/raytracing-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/rendering-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/samplers-module.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/scripting-util.h	/^    namespace scripting$/;"	n	namespace:raytracer
scripting	scripting/scripting.cpp	/^    namespace scripting$/;"	n	namespace:raytracer	file:
scripting	scripting/scripting.h	/^    namespace scripting$/;"	n	namespace:raytracer
seconds	animation/duration.cpp	/^double animation::Duration::seconds() const$/;"	f	class:animation::Duration	typeref:typename:double
seconds	animation/time-stamp.cpp	/^double animation::TimeStamp::seconds() const$/;"	f	class:animation::TimeStamp	typeref:typename:double
seconds	scripting/animation-module.cpp	/^    Duration seconds(double s)$/;"	f	namespace:__anona5945eab0110	typeref:typename:Duration
seconds_to_timestamp	animation/animation.h	/^    inline math::Function<TimeStamp(double)> seconds_to_timestamp()$/;"	f	namespace:animation	typeref:typename:math::Function<TimeStamp (double)>
sequence_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr sequence_type(const std::string &\/*type*\/, ModulePtr m = std::make_shared<Mo/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
serial	tasks/serial-task-scheduler.cpp	/^TaskScheduler tasks::schedulers::serial()$/;"	f	class:tasks::schedulers	typeref:typename:TaskScheduler
set	easylogging++.h	/^    inline void set(Configuration* conf) {$/;"	f	class:el::Configurations	typeref:typename:void
set	easylogging++.h	/^    inline void set(Level level, ConfigurationType configurationType, const std::string& value) /;"	f	class:el::Configurations	typeref:typename:void
setApplicationArguments	easylogging++.h	/^    inline void setApplicationArguments(int argc, const char** argv) {$/;"	f	class:el::base::Storage	typeref:typename:void
setApplicationArguments	easylogging++.h	/^    void setApplicationArguments(int argc, char** argv) {$/;"	f	class:el::base::Storage	typeref:typename:void
setArgs	easylogging++.h	/^    inline void setArgs(int argc, char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:void
setArgs	easylogging++.h	/^    inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:void
setContinueRunning	easylogging++.h	/^    void setContinueRunning(bool value) {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
setDefaultConfigurations	easylogging++.h	/^    inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
setDispatchAction	easylogging++.h	/^    inline void setDispatchAction(base::DispatchAction dispatchAction) { m_dispatchAction = disp/;"	f	class:el::LogDispatchData	typeref:typename:void
setEnabled	easylogging++.h	/^    inline void setEnabled(bool enabled) {$/;"	f	class:el::Callback	typeref:typename:void
setFlags	easylogging++.h	/^    inline void setFlags(base::type::EnumType flags) {$/;"	f	class:el::base::Storage	typeref:typename:void
setFromArgs	easylogging++.h	/^    void setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
setFromBase	easylogging++.h	/^    inline void setFromBase(Configurations* base) {$/;"	f	class:el::Configurations	typeref:typename:void
setGlobally	easylogging++.h	/^    inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Configurations	typeref:typename:void
setGlobally	easylogging++.h	/^    void setGlobally(ConfigurationType configurationType, const std::string& value, bool include/;"	f	class:el::Configurations	typeref:typename:void
setLevel	easylogging++.h	/^    inline void setLevel(base::type::VerboseLevel level) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
setLogBuilder	easylogging++.h	/^    inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	class:el::Logger	typeref:typename:void
setLogMessage	easylogging++.h	/^    inline void setLogMessage(LogMessage* logMessage) { m_logMessage = logMessage; }$/;"	f	class:el::LogDispatchData	typeref:typename:void
setLoggingLevel	easylogging++.h	/^    inline void setLoggingLevel(Level level) {$/;"	f	class:el::base::Storage	typeref:typename:void
setModules	easylogging++.h	/^    void setModules(const char* modules) {$/;"	f	class:el::base::VRegistry	typeref:typename:void
setParentApplicationName	easylogging++.h	/^    inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	class:el::Logger	typeref:typename:void
setPreRollOutCallback	easylogging++.h	/^    inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::base::Storage	typeref:typename:void
setRemainingToDefault	easylogging++.h	/^    void setRemainingToDefault(void) {$/;"	f	class:el::Configurations	typeref:typename:void
setToDefault	easylogging++.h	/^    void setToDefault(void) {$/;"	f	class:el::Configurations	typeref:typename:void
setValue	easylogging++.h	/^    inline void setValue(const std::string& value) {$/;"	f	class:el::Configuration	typeref:typename:void
setValue	easylogging++.h	/^    void setValue(Level level, const Conf_T& value, std::map<Level, Conf_T>* confMap, bool inclu/;"	f	class:el::base::TypedConfigurations	typeref:typename:void
set_explicit	chaiscript/dispatchkit/dynamic_object.hpp	/^        void set_explicit(const bool t_explicit)$/;"	f	class:chaiscript::dispatch::Dynamic_Object	typeref:typename:void
set_global	chaiscript/dispatchkit/dispatchkit.hpp	/^        void set_global(const Boxed_Value &obj, const std::string &name)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
set_global	chaiscript/language/chaiscript_engine.hpp	/^    ChaiScript &set_global(const Boxed_Value &t_bv, const std::string &t_name)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:ChaiScript &
set_locals	chaiscript/dispatchkit/dispatchkit.hpp	/^        void set_locals(const std::map<std::string, Boxed_Value> &t_locals)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
set_locals	chaiscript/language/chaiscript_engine.hpp	/^    void set_locals(const std::map<std::string, Boxed_Value> &t_locals)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:void
set_state	chaiscript/dispatchkit/dispatchkit.hpp	/^        void set_state(const State &t_state)$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
set_state	chaiscript/language/chaiscript_engine.hpp	/^    void set_state(const State &t_state)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:void
setup_operators	chaiscript/language/chaiscript_parser.hpp	/^      void setup_operators()$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
shared_lock	chaiscript/chaiscript_threading.hpp	/^          explicit shared_lock(T &t) : std::unique_lock<T>(t) {}$/;"	f	class:chaiscript::detail::threading::shared_lock
shared_lock	chaiscript/chaiscript_threading.hpp	/^      class shared_lock : public std::unique_lock<T>$/;"	c	namespace:chaiscript::detail::threading
shared_mutex	chaiscript/chaiscript_threading.hpp	/^      class shared_mutex : public std::mutex { };$/;"	c	namespace:chaiscript::detail::threading
shared_ptr_clone	chaiscript/dispatchkit/bootstrap.hpp	/^    std::shared_ptr<Type> shared_ptr_clone(const std::shared_ptr<Type> &p)$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:std::shared_ptr<Type>
shared_ptr_unconst_clone	chaiscript/dispatchkit/bootstrap.hpp	/^        shared_ptr_unconst_clone(const std::shared_ptr<typename std::add_const<Type>::type> &p)$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:std::shared_ptr<typename std::remove_const<Type>::type>
shift_left	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number shift_left(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
shift_left	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
shift_right	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number shift_right(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
shift_right	chaiscript/language/chaiscript_algebraic.hpp	/^      shift_left, shift_right, remainder, bitwise_and, bitwise_or, bitwise_xor, bitwise_compleme/;"	e	enum:chaiscript::Operators::Opers
show_match_stack	chaiscript/language/chaiscript_parser.hpp	/^      void show_match_stack() const {$/;"	f	class:chaiscript::parser::ChaiScript_Parser	typeref:typename:void
show_version	app.cpp	/^    void show_version()$/;"	f	namespace:__anon3bd80ed70110	typeref:typename:void
sign	math/misc.h	/^    constexpr T sign(T n)$/;"	f	namespace:math	typeref:typename:T
sin	math/angle.cpp	/^double math::sin(Angle a)$/;"	f	class:math	typeref:typename:double
single	samplers/single-sampler.cpp	/^Sampler raytracer::samplers::single()$/;"	f	class:raytracer::samplers	typeref:typename:Sampler
single	scripting/samplers-module.cpp	/^        Sampler single() const$/;"	f	struct:__anon140c3c520110::SamplerLibrary	typeref:typename:Sampler	file:
size	chaiscript/utility/json.hpp	/^        int size() const {$/;"	f	class:json::JSON	typeref:typename:int
size	data-structures/array.h	/^    size_t size() const$/;"	f	class:array	typeref:typename:size_t
size	easylogging++.h	/^    inline std::size_t size(void) const {$/;"	f	class:el::base::utils::CommandLineArgs	typeref:typename:std::size_t
size	easylogging++.h	/^    virtual inline std::size_t size(void) const ELPP_FINAL {$/;"	f	class:el::base::utils::AbstractRegistry	typeref:typename:std::size_t
slice	data-structures/array.h	/^    array<T> slice(size_t start)$/;"	f	class:array	typeref:typename:array<T>
slice	data-structures/array.h	/^    array<T> slice(size_t start, size_t size)$/;"	f	class:array	typeref:typename:array<T>
smallest_greater_than_zero	util/misc.h	/^bool smallest_greater_than_zero(T x, T y, T* result)$/;"	f	typeref:typename:bool
smart_boxed_cast	scripting/scripting-util.h	/^            T smart_boxed_cast(chaiscript::Boxed_Value boxed)$/;"	f	namespace:raytracer::scripting::util	typeref:typename:T
sort	util/misc.h	/^void sort(T& x, T& y)$/;"	f	typeref:typename:void
specular	materials/material-properties.h	/^        const imaging::Color specular;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const imaging::Color
specular_exponent	materials/material-properties.h	/^        const double specular_exponent;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const double
sphere	primitives/sphere-primitive.cpp	/^Primitive raytracer::primitives::sphere()$/;"	f	class:raytracer::primitives	typeref:typename:Primitive
sphere_intersection	tests/primitives/union-intersection/union-intersection-tests.cpp	/^    auto sphere_intersection = intersection(middle_sphere, left_and_right_spheres);$/;"	v	typeref:typename:auto
spherical	math/vector.h	/^            static T spherical(double radius, math::Angle azimuth, math::Angle elevation)$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
spherical	scripting/math-module.cpp	/^        Point3D spherical(double radius, Angle azimuth, Angle elevation) const  { return Point3D/;"	f	struct:__anon63c0fd550110::PointFactories	typeref:typename:Point3D	file:
spherical	scripting/math-module.cpp	/^        Vector3D spherical(double radius, Angle azimuth, Angle elevation) const { return Vector3/;"	f	struct:__anon63c0fd550110::VectorFactories	typeref:typename:Vector3D	file:
stack_holder	chaiscript/dispatchkit/dispatchkit.hpp	/^        Stack_Holder &stack_holder() const {$/;"	f	class:chaiscript::detail::Dispatch_State	typeref:typename:Stack_Holder &
stack_mask	chaiscript/dispatchkit/dispatchkit.hpp	/^            stack_mask = 0x0FFF0000,$/;"	e	enum:chaiscript::detail::Dispatch_Engine::get_object::Loc
stacks	chaiscript/dispatchkit/dispatchkit.hpp	/^      std::vector<StackData> stacks;$/;"	m	struct:chaiscript::detail::Stack_Holder	typeref:typename:std::vector<StackData>
standard	renderers/standard-renderer.cpp	/^Renderer raytracer::renderers::standard(unsigned horizontal_size, unsigned vertical_size, raytra/;"	f	class:raytracer::renderers	typeref:typename:Renderer
standard	scripting/rendering-module.cpp	/^        Renderer standard(unsigned width, unsigned height, Sampler sampler, RayTracer ray_tracer/;"	f	struct:__anonbd85b8490110::RendererLibrary	typeref:typename:Renderer	file:
standard_by_map	scripting/rendering-module.cpp	/^        Renderer standard_by_map(const std::map<std::string, Boxed_Value>& argument_map) const$/;"	f	struct:__anonbd85b8490110::RendererLibrary	typeref:typename:Renderer	file:
standard_library	chaiscript/dispatchkit/bootstrap_stl.hpp	/^    namespace standard_library$/;"	n	namespace:chaiscript::bootstrap
start	chaiscript/language/chaiscript_common.hpp	/^      const File_Position &start() const {$/;"	f	struct:chaiscript::AST_Node	typeref:typename:const File_Position &
start	chaiscript/language/chaiscript_common.hpp	/^    File_Position start;$/;"	m	struct:chaiscript::Parse_Location	typeref:typename:File_Position
start	easylogging++.h	/^    virtual inline void start() {$/;"	f	class:el::base::AsyncDispatchWorker	typeref:typename:void
start	pipeline/pipeline-builder.h	/^        _private_::PipelineBuilderStart<T> start(T&& value)$/;"	f	namespace:raytracer::pipeline	typeref:typename:_private_::PipelineBuilderStart<T>
start_position	chaiscript/language/chaiscript_common.hpp	/^      File_Position start_position;$/;"	m	struct:chaiscript::exception::eval_error	typeref:typename:File_Position
startpos	chaiscript/language/chaiscript_common.hpp	/^        static std::string startpos(const T& t)$/;"	f	struct:chaiscript::exception::eval_error	typeref:typename:std::string
startsWith	easylogging++.h	/^    static inline bool startsWith(const std::string& str, const std::string& start) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
starts_with	util/misc.cpp	/^bool starts_with(const std::string& prefix, const std::string& string)$/;"	f	typeref:typename:bool
stdout	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> stdout() const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
storage	scripting/scripting-util.h	/^                T* storage;$/;"	m	struct:raytracer::scripting::util::SpecializedSingleArgumentParser	typeref:typename:T *
str	chaiscript/language/chaiscript_parser.hpp	/^        static std::string str(const Position &t_begin, const Position &t_end) {$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Position	typeref:typename:std::string
stream	easylogging++.h	/^    inline base::type::stringstream_t& stream(void) {$/;"	f	class:el::Logger	typeref:typename:base::type::stringstream_t &
stretch	math/functions/easing/stretch-easing-function.cpp	/^EasingFunction math::functions::easing::stretch(EasingFunction function, const Interval<double>&/;"	f	class:math::functions::easing	typeref:typename:EasingFunction
stretch_in_space	math/functions/easing/stretch-easing-function.cpp	/^EasingFunction math::functions::easing::stretch_in_space(EasingFunction function, const Interval/;"	f	class:math::functions::easing	typeref:typename:EasingFunction
stretch_in_time	math/functions/easing/stretch-easing-function.cpp	/^EasingFunction math::functions::easing::stretch_in_time(EasingFunction function, const Interval</;"	f	class:math::functions::easing	typeref:typename:EasingFunction
string	chaiscript/language/chaiscript_prelude_docs.hpp	/^class string$/;"	c	namespace:ChaiScript_Language
string_t	easylogging++.h	/^typedef std::wstring string_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wstring
string_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr string_type(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
stringstream_t	easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	namespace:el::base::type	typeref:typename:std::wstringstream
subtraction	chaiscript/dispatchkit/operators.hpp	/^          auto subtraction(L l, R r) -> decltype(( l - r ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((l-r))
subtraction	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr subtraction(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
sum	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number sum(const Boxed_Number &t_lhs, const Boxed_Number &t_rhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
sum	chaiscript/language/chaiscript_algebraic.hpp	/^      sum, quotient, product, difference, unary_plus, unary_minus, $/;"	e	enum:chaiscript::Operators::Opers
swap	chaiscript/dispatchkit/any.hpp	/^        Any & swap(Any &t_other)$/;"	f	class:chaiscript::detail::Any	typeref:typename:Any &
swap	chaiscript/dispatchkit/boxed_value.hpp	/^      void swap(Boxed_Value &rhs)$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:void
swap	util/misc.h	/^void swap(T& x, T& y)$/;"	f	typeref:typename:void
symbol_alphabet	chaiscript/language/chaiscript_parser.hpp	/^      {   symbol_alphabet = 0$/;"	e	enum:chaiscript::parser::detail::Alphabet
t	Makefile	/^t: test_build$/;"	t
t	chaiscript/chaiscript_threading.hpp	/^            static std::unordered_map<void*, T> &t()$/;"	f	class:chaiscript::detail::threading::Thread_Storage	typeref:typename:std::unordered_map<void *,T> &
t	primitives/hit.h	/^        double t;$/;"	m	struct:raytracer::Hit	typeref:typename:double
t	raytracers/trace-result.h	/^        double t;$/;"	m	struct:raytracer::TraceResult	typeref:typename:double
t_double	chaiscript/dispatchkit/boxed_number.hpp	/^        t_double,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_float	chaiscript/dispatchkit/boxed_number.hpp	/^        t_float,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_int16	chaiscript/dispatchkit/boxed_number.hpp	/^        t_int16,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_int32	chaiscript/dispatchkit/boxed_number.hpp	/^        t_int32,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_int64	chaiscript/dispatchkit/boxed_number.hpp	/^        t_int64,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_int8	chaiscript/dispatchkit/boxed_number.hpp	/^        t_int8,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_long_double	chaiscript/dispatchkit/boxed_number.hpp	/^        t_long_double$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_uint16	chaiscript/dispatchkit/boxed_number.hpp	/^        t_uint16,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_uint32	chaiscript/dispatchkit/boxed_number.hpp	/^        t_uint32,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_uint64	chaiscript/dispatchkit/boxed_number.hpp	/^        t_uint64,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
t_uint8	chaiscript/dispatchkit/boxed_number.hpp	/^        t_uint8,$/;"	e	enum:chaiscript::Boxed_Number::Common_Types
take_saves	chaiscript/dispatchkit/type_conversions.hpp	/^      std::vector<Boxed_Value> take_saves(Conversion_Saves &t_saves)$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:std::vector<Boxed_Value>
tasks	tasks/lambda-task.h	/^namespace tasks$/;"	n
tasks	tasks/serial-task-scheduler.h	/^namespace tasks$/;"	n
tasks	tasks/task-helpers.h	/^namespace tasks$/;"	n
tasks	tasks/task-scheduler.h	/^namespace tasks$/;"	n
tasks	tasks/task.h	/^namespace tasks$/;"	n
template	test-generation/shared.rb	/^  def template$/;"	f	class:TestFileContext
template	test-generation/shared.rb	/^  def template(&block)$/;"	f	class:TestSuiteContext
termSupportsColor	easylogging++.h	/^    static inline bool termSupportsColor(void) {$/;"	f	class:el::base::utils::OS	typeref:typename:bool
test_build	Makefile	/^test_build:$/;"	t
test_case	test-generation/shared.rb	/^  def test_case$/;"	f	class:TestSuiteContext
test_file	test-generation/shared.rb	/^def test_file(test_path, &block)$/;"	f
test_guard	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool test_guard(const std::vector<Boxed_Value> &params, const Type_Conversions_State &t_/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function	typeref:typename:bool
test_no_scripting_build	Makefile	/^test_no_scripting_build:$/;"	t
test_suite	test-generation/shared.rb	/^  def test_suite(&block)$/;"	f	class:TestFileContext
text	chaiscript/language/chaiscript_common.hpp	/^      const std::string text;$/;"	m	struct:chaiscript::AST_Node	typeref:typename:const std::string
text_writer	pipeline/text-writer-consumer.cpp	/^std::shared_ptr<Consumer<std::string>> raytracer::pipeline::text_writer(std::ostream& out)$/;"	f	class:raytracer::pipeline	typeref:typename:std::shared_ptr<Consumer<std::string>>
theta	math/coordinate-systems.h	/^        math::Angle theta;$/;"	m	struct:math::Polar	typeref:typename:math::Angle
thread_cache	chaiscript/dispatchkit/type_conversions.hpp	/^      const std::set<const std::type_info *, Less_Than> &thread_cache() const$/;"	f	class:chaiscript::Type_Conversions	typeref:typename:const std::set<const std::type_info *,Less_Than> &
threading	chaiscript/chaiscript_threading.hpp	/^    namespace threading$/;"	n	namespace:chaiscript::detail
threading	easylogging++.h	/^namespace threading {$/;"	n	namespace:el::base
throw_exception	chaiscript/dispatchkit/bootstrap.hpp	/^      static void throw_exception(const Boxed_Value &bv) {$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:void
throw_if_null	chaiscript/dispatchkit/boxed_cast_helper.hpp	/^      T* throw_if_null(T *t)$/;"	f	namespace:chaiscript::detail	typeref:typename:T *
throw_type	chaiscript/dispatchkit/exception_specification.hpp	/^        static void throw_type(const Boxed_Value &bv, const Dispatch_Engine &t_engine)$/;"	f	struct:chaiscript::detail::Exception_Handler_Base	typeref:typename:void
timestamp_to_seconds	animation/animation.h	/^    inline math::Function<double(TimeStamp)> timestamp_to_seconds()$/;"	f	namespace:animation	typeref:typename:math::Function<double (TimeStamp)>
tn	Makefile	/^tn: test_no_scripting_build$/;"	t
to	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        const std::type_info *to; \/\/\/< std::type_info of the desired (but failed) result type$/;"	m	class:chaiscript::exception::bad_boxed_cast	typeref:typename:const std::type_info *
to	chaiscript/dispatchkit/type_conversions.hpp	/^        const Type_Info &to() const$/;"	f	class:chaiscript::detail::Type_Conversion_Base	typeref:typename:const Type_Info &
to	math/interval-mapper.h	/^        Interval<T2> to;$/;"	m	struct:math::IntervalMapper	typeref:typename:Interval<T2>
toFile	easylogging++.h	/^    inline bool toFile(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
toStandardOutput	easylogging++.h	/^    inline bool toStandardOutput(Level level) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
toUpper	easylogging++.h	/^    static inline std::string& toUpper(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
to_animated_2d_material	materials/material.cpp	/^math::Function<Material( animation::TimeStamp)> raytracer::to_animated_2d_material(Material mate/;"	f	class:raytracer	typeref:typename:math::Function<Material (animation::TimeStamp)>
to_argb	imaging/bmp-format.cpp	/^    ARGB to_argb(const Color& c)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:ARGB
to_json	chaiscript/utility/json_wrap.hpp	/^      static std::string to_json(const Boxed_Value &t_bv)$/;"	f	class:chaiscript::json_wrap	typeref:typename:std::string
to_json_object	chaiscript/utility/json_wrap.hpp	/^      static json::JSON to_json_object(const Boxed_Value &t_bv)$/;"	f	class:chaiscript::json_wrap	typeref:typename:json::JSON
to_operator	chaiscript/language/chaiscript_algebraic.hpp	/^    static Opers to_operator(const std::string &t_str, bool t_is_unary = false)$/;"	f	struct:chaiscript::Operators	typeref:typename:Opers
to_relative	math/interval.h	/^        constexpr double to_relative(T x) const$/;"	f	struct:math::Interval	typeref:typename:double
to_string	chaiscript/dispatchkit/bootstrap.hpp	/^    std::string to_string(Input i)$/;"	f	namespace:chaiscript::bootstrap	typeref:typename:std::string
to_string	chaiscript/dispatchkit/boxed_number.hpp	/^      std::string to_string() const$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:std::string
to_string	chaiscript/language/chaiscript_algebraic.hpp	/^    static const char *to_string(Opers t_oper) {$/;"	f	struct:chaiscript::Operators	typeref:typename:const char *
to_string	chaiscript/language/chaiscript_common.hpp	/^      std::string to_string(const std::string &t_prepend = "") const {$/;"	f	struct:chaiscript::AST_Node	typeref:typename:std::string
to_string_aux	chaiscript/dispatchkit/boxed_number.hpp	/^         static std::string to_string_aux(const Boxed_Value &v)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:std::string
trace	raytracers/ray-tracer-v0.cpp	/^TraceResult raytracer::raytracers::_private_::RayTracerV0::trace(const Scene& scene, const Ray& /;"	f	class:raytracer::raytracers::_private_::RayTracerV0	typeref:typename:TraceResult
trace_result	tests/raytracers/v1/raytracer-v1-tests.cpp	/^            auto trace_result = ray_tracer->trace(scene, ray);$/;"	v	typeref:typename:auto
transform	math/ray.cpp	/^Ray math::Ray::transform(const Matrix4x4& m) const$/;"	f	class:math::Ray	typeref:typename:Ray
transform	primitives/transformer-primitive.cpp	/^Primitive raytracer::primitives::transform(const math::Transformation3D& transformation, Primiti/;"	f	class:raytracer::primitives	typeref:typename:Primitive
transformation	tests/math/transformation-tests.cpp	/^                    auto transformation = transformations::rotate_align_y(y_axis);$/;"	v	typeref:typename:auto
transformation	tests/math/transformation-tests.cpp	/^        auto transformation = transformations::rotate_align_y(y_axis);$/;"	v	typeref:typename:auto
transformation_matrices	math/transformation-matrices.h	/^    namespace transformation_matrices$/;"	n	namespace:math
transformation_matrix	math/transformation2d.h	/^        Matrix3x3 transformation_matrix;$/;"	m	class:math::Transformation2D	typeref:typename:Matrix3x3
transformation_matrix	math/transformation3d.h	/^        Matrix4x4 transformation_matrix;$/;"	m	class:math::Transformation3D	typeref:typename:Matrix4x4
transformations	math/transformation2d.h	/^    namespace transformations$/;"	n	namespace:math
transformations	math/transformation3d.h	/^    namespace transformations$/;"	n	namespace:math
transformed	tests/math/transformation-tests.cpp	/^                    auto transformed = transformation.transformation_matrix * Vector3D(0, 1, 0);$/;"	v	typeref:typename:auto
transformed	tests/math/transformation-tests.cpp	/^        auto transformed = transformation.transformation_matrix * Vector3D(0, 1, 0);$/;"	v	typeref:typename:auto
transformee	primitives/transformer-primitive.cpp	/^        Primitive transformee;$/;"	m	class:__anonee3963ea0110::TransformerImplementation	typeref:typename:Primitive	file:
transformer	primitives/transformer-primitive.cpp	/^        math::Transformation3D transformer;$/;"	m	class:__anonee3963ea0110::TransformerImplementation	typeref:typename:math::Transformation3D	file:
translate	primitives/transformer-primitive.cpp	/^Primitive raytracer::primitives::translate(const Vector3D& v, Primitive transformee)$/;"	f	class:raytracer::primitives	typeref:typename:Primitive
translation	math/transformation-matrices.cpp	/^Matrix3x3 math::transformation_matrices::translation(const Vector2D& v)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix3x3
translation	math/transformation-matrices.cpp	/^Matrix4x4 math::transformation_matrices::translation(const Vector3D& v)$/;"	f	class:math::transformation_matrices	typeref:typename:Matrix4x4
translation	math/transformation2d.cpp	/^Transformation2D math::transformations::translation(const Vector2D& v)$/;"	f	class:math::transformations	typeref:typename:Transformation2D
translation	math/transformation3d.cpp	/^Transformation3D math::transformations::translation(const Vector3D& v)$/;"	f	class:math::transformations	typeref:typename:Transformation3D
transparency	materials/material-properties.h	/^        const double transparency;$/;"	m	struct:raytracer::MaterialProperties	typeref:typename:const double
transpose	math/matrix.h	/^    Matrix<N> transpose(const Matrix<N>& m)$/;"	f	namespace:math	typeref:typename:Matrix<N>
tri	tests/primitives/triangle/triangle-tests.cpp	/^    auto tri = triangle(Point3D(0, 0, 0), Point3D(1, 0, 0), Point3D(0, 1, 0));$/;"	v	typeref:typename:auto
trim	easylogging++.h	/^    static inline std::string& trim(std::string& str) {$/;"	f	class:el::base::utils::Str	typeref:typename:std::string &
try_lock	easylogging++.h	/^    inline bool try_lock(void) {$/;"	f	class:el::base::threading::internal::Mutex	typeref:typename:bool
type	chaiscript/dispatchkit/any.hpp	/^          const std::type_info &type() const$/;"	f	struct:chaiscript::detail::Any::Data	typeref:typename:const std::type_info &
type	chaiscript/dispatchkit/any.hpp	/^        const std::type_info & type() const$/;"	f	class:chaiscript::detail::Any	typeref:typename:const std::type_info &
type	chaiscript/dispatchkit/type_info.hpp	/^        typedef T type;$/;"	t	struct:chaiscript::detail::Get_Type_Info	typeref:typename:T
type	chaiscript/dispatchkit/type_info.hpp	/^        typedef typename std::remove_cv<typename std::remove_pointer<typename std::remove_refere/;"	t	struct:chaiscript::detail::Bare_Type	typeref:typename:std::remove_cv<typename std::remove_pointer<typename std::remove_reference<T>::type>::type>::type
type	easylogging++.h	/^namespace type {$/;"	n	namespace:el::base
type_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^    Type_Conversion type_conversion()$/;"	f	namespace:chaiscript	typeref:typename:Type_Conversion
type_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^    Type_Conversion type_conversion(const Callable &t_function)$/;"	f	namespace:chaiscript	typeref:typename:Type_Conversion
type_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^    Type_Conversion type_conversion(const Type_Info &t_from, const Type_Info &t_to, $/;"	f	namespace:chaiscript	typeref:typename:Type_Conversion
type_match	chaiscript/dispatchkit/boxed_value.hpp	/^      static bool type_match(const Boxed_Value &l, const Boxed_Value &r) CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::Boxed_Value	typeref:typename:bool
type_name	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string type_name(const Boxed_Value &obj) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:std::string
typedConfigurations	easylogging++.h	/^    inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	class:el::Logger	typeref:typename:base::TypedConfigurations *
types	chaiscript/dispatchkit/proxy_functions.hpp	/^        const std::vector<std::pair<std::string, Type_Info>> &types() const$/;"	f	class:chaiscript::dispatch::Param_Types	typeref:typename:const std::vector<std::pair<std::string,Type_Info>> &
types_match_except_for_arithmetic	chaiscript/dispatchkit/proxy_functions.hpp	/^        bool types_match_except_for_arithmetic(const FuncType &t_func, const std::vector<Boxed_V/;"	f	namespace:chaiscript::dispatch::detail	typeref:typename:bool
unary_go	chaiscript/dispatchkit/boxed_number.hpp	/^      static Boxed_Value unary_go(Operators::Opers t_oper, T &t, const Boxed_Value &t_lhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:Boxed_Value
unary_minus	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number unary_minus(const Boxed_Number &t_lhs)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
unary_minus	chaiscript/dispatchkit/operators.hpp	/^          auto unary_minus(L l) -> decltype(( -l ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((-l))
unary_minus	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr unary_minus(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
unary_minus	chaiscript/language/chaiscript_algebraic.hpp	/^      sum, quotient, product, difference, unary_plus, unary_minus, $/;"	e	enum:chaiscript::Operators::Opers
unary_plus	chaiscript/dispatchkit/boxed_number.hpp	/^      static const Boxed_Number unary_plus(const Boxed_Number &t_lhs) $/;"	f	class:chaiscript::Boxed_Number	typeref:typename:const Boxed_Number
unary_plus	chaiscript/dispatchkit/operators.hpp	/^          auto unary_plus(L l) -> decltype(( +l ))$/;"	f	namespace:chaiscript::bootstrap::operators::detail	typeref:typename:decltype ((+l))
unary_plus	chaiscript/dispatchkit/operators.hpp	/^        ModulePtr unary_plus(ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::operators	typeref:typename:ModulePtr
unary_plus	chaiscript/language/chaiscript_algebraic.hpp	/^      sum, quotient, product, difference, unary_plus, unary_minus, $/;"	e	enum:chaiscript::Operators::Opers
uniform	materials/uniform-material.cpp	/^Material raytracer::materials::uniform(const MaterialProperties& properties)$/;"	f	class:raytracer::materials	typeref:typename:Material
uniform	scripting/materials-module.cpp	/^        Material uniform(const Color& ambient, const Color& diffuse, const Color& specular, doub/;"	f	struct:__anond88f774d0110::MaterialLibrary	typeref:typename:Material	file:
uniform_by_map	scripting/materials-module.cpp	/^        Material uniform_by_map(const std::map<std::string, Boxed_Value>& argument_map) const$/;"	f	struct:__anond88f774d0110::MaterialLibrary	typeref:typename:Material	file:
unindent	test-generation/shared.rb	/^  def unindent$/;"	f	class:String
uninstallCallback	easylogging++.h	/^    inline void uninstallCallback(const std::string& id, std::map<std::string, TPtr>* mapT) {$/;"	f	class:el::base::Storage	typeref:typename:void
uninstallCustomFormatSpecifier	easylogging++.h	/^    inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::base::Storage	typeref:typename:bool
uninstallLogDispatchCallback	easylogging++.h	/^    inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:void
uninstallPerformanceTrackingCallback	easylogging++.h	/^    inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::base::Storage	typeref:typename:void
unique_associative_container_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr unique_associative_container_type(const std::string &\/*type*\/, ModulePtr m =/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
unique_lock	chaiscript/chaiscript_threading.hpp	/^          explicit unique_lock(T &t) : std::unique_lock<T>(t) {}$/;"	f	class:chaiscript::detail::threading::unique_lock
unique_lock	chaiscript/chaiscript_threading.hpp	/^      class unique_lock : public std::unique_lock<T>$/;"	c	namespace:chaiscript::detail::threading
unit	easylogging++.h	/^        const base::type::char_t* unit;$/;"	m	struct:el::base::consts::__anoncd3bcdca1008	typeref:typename:const base::type::char_t *
unknown_assign	chaiscript/dispatchkit/bootstrap.hpp	/^      static Boxed_Value unknown_assign(Boxed_Value lhs, Boxed_Value rhs)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:Boxed_Value
unlock	chaiscript/chaiscript_threading.hpp	/^          void unlock() {}$/;"	f	class:chaiscript::detail::threading::shared_lock	typeref:typename:void
unlock	easylogging++.h	/^    inline void unlock(void) {$/;"	f	class:el::base::threading::internal::Mutex	typeref:typename:void
unregister	easylogging++.h	/^    inline void unregister(Logger*& logger) {$/;"	f	class:el::base::RegisteredLoggers	typeref:typename:void
unregister	easylogging++.h	/^    inline void unregister(const T_Key& uniqKey) {$/;"	f	class:el::base::utils::Registry	typeref:typename:void
unregister	easylogging++.h	/^    virtual void unregister(T_Ptr*& ptr) ELPP_FINAL {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
unregisterAll	easylogging++.h	/^    virtual inline void unregisterAll(void) ELPP_FINAL {$/;"	f	class:el::base::utils::Registry	typeref:typename:void
unregisterAll	easylogging++.h	/^    virtual inline void unregisterAll(void) ELPP_FINAL {$/;"	f	class:el::base::utils::RegistryWithPred	typeref:typename:void
unsafeGetConfigByRef	easylogging++.h	/^    inline Conf_T& unsafeGetConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const cha/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T &
unsafeGetConfigByVal	easylogging++.h	/^    inline Conf_T unsafeGetConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, cons/;"	f	class:el::base::TypedConfigurations	typeref:typename:Conf_T
unsafeSet	easylogging++.h	/^    void unsafeSet(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Configurations	typeref:typename:void
unsafeSetGlobally	easylogging++.h	/^    void unsafeSetGlobally(ConfigurationType configurationType, const std::string& value, bool i/;"	f	class:el::Configurations	typeref:typename:void
unsafeSetIfNotExist	easylogging++.h	/^    void unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string/;"	f	class:el::Configurations	typeref:typename:void
unsafeValidateFileRolling	easylogging++.h	/^    bool unsafeValidateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
unsetPreRollOutCallback	easylogging++.h	/^    inline void unsetPreRollOutCallback(void) {$/;"	f	class:el::base::Storage	typeref:typename:void
unsigned_to_double	math/functions/random-function.cpp	/^math::Function<double(unsigned)> math::functions::random::unsigned_to_double(unsigned seed)$/;"	f	class:math::functions::random	typeref:typename:math::Function<double (unsigned)>
up	tests/cameras/camera-transformation-tests.cpp	/^    Vector3D up(0, 1, 0);$/;"	v	typeref:typename:Vector3D
updateDateFormat	easylogging++.h	/^    virtual void updateDateFormat(std::size_t index, base::type::string_t& currFormat) ELPP_FINA/;"	f	class:el::base::LogFormat	typeref:typename:void
updateFormatSpec	easylogging++.h	/^    virtual void updateFormatSpec(void) ELPP_FINAL {$/;"	f	class:el::base::LogFormat	typeref:typename:void
update_has_types	chaiscript/dispatchkit/proxy_functions.hpp	/^        void update_has_types()$/;"	f	class:chaiscript::dispatch::Param_Types	typeref:typename:void
upper	math/interval.h	/^        T lower, upper;$/;"	m	struct:math::Interval	typeref:typename:T
use	chaiscript/language/chaiscript_engine.hpp	/^    Boxed_Value use(const std::string &t_filename)$/;"	f	class:chaiscript::ChaiScript	typeref:typename:Boxed_Value
used_files	chaiscript/language/chaiscript_engine.hpp	/^      std::set<std::string> used_files;$/;"	m	struct:chaiscript::ChaiScript::State	typeref:typename:std::set<std::string>
userFormat	easylogging++.h	/^    inline const base::type::string_t& userFormat(void) const {$/;"	f	class:el::base::LogFormat	typeref:typename:const base::type::string_t &
user_type	chaiscript/dispatchkit/type_info.hpp	/^   Type_Info user_type()$/;"	f	namespace:chaiscript	typeref:typename:Type_Info
user_type	chaiscript/dispatchkit/type_info.hpp	/^   Type_Info user_type(const T &\/*t*\/)$/;"	f	namespace:chaiscript	typeref:typename:Type_Info
util	scripting/scripting-util.h	/^        namespace util$/;"	n	namespace:raytracer::scripting
utility	chaiscript/utility/utility.hpp	/^  namespace utility$/;"	n	namespace:chaiscript
utils	easylogging++.h	/^namespace utils {$/;"	n	namespace:el::base
uv	primitives/hit-position.h	/^        math::Point2D uv;$/;"	m	struct:raytracer::HitPosition	typeref:typename:math::Point2D
v	scripting/raytracing-module.cpp	/^        RayTracer v(int version) const$/;"	f	struct:__anon5f59be3f0110::RaytracerLibrary	typeref:typename:RayTracer	file:
v0	raytracers/ray-tracer-v0.cpp	/^raytracer::RayTracer raytracer::raytracers::v0()$/;"	f	class:raytracer::raytracers	typeref:typename:raytracer::RayTracer
v0	scripting/raytracing-module.cpp	/^        RayTracer v0() const { return raytracer::raytracers::v0(); }$/;"	f	struct:__anon5f59be3f0110::RaytracerLibrary	typeref:typename:RayTracer	file:
vModulesEnabled	easylogging++.h	/^    inline bool vModulesEnabled(void) {$/;"	f	class:el::base::VRegistry	typeref:typename:bool
vRegistry	easylogging++.h	/^    inline base::VRegistry* vRegistry(void) const {$/;"	f	class:el::base::Storage	typeref:typename:base::VRegistry *
validateAfterN	easylogging++.h	/^    bool validateAfterN(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:bool
validateAfterNCounter	easylogging++.h	/^    inline bool validateAfterNCounter(const char* filename, unsigned long int lineNumber, std::s/;"	f	class:el::base::Storage	typeref:typename:bool
validateEveryN	easylogging++.h	/^    bool validateEveryN(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:bool
validateEveryNCounter	easylogging++.h	/^    inline bool validateEveryNCounter(const char* filename, unsigned long int lineNumber, std::s/;"	f	class:el::base::Storage	typeref:typename:bool
validateFileRolling	easylogging++.h	/^    bool validateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::base::TypedConfigurations	typeref:typename:bool
validateHitCounts	easylogging++.h	/^    inline void validateHitCounts(std::size_t n) {$/;"	f	class:el::base::HitCounter	typeref:typename:void
validateNTimes	easylogging++.h	/^    bool validateNTimes(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::base::RegisteredHitCounters	typeref:typename:bool
validateNTimesCounter	easylogging++.h	/^    inline bool validateNTimesCounter(const char* filename, unsigned long int lineNumber, std::s/;"	f	class:el::base::Storage	typeref:typename:bool
validate_boxed_number	chaiscript/dispatchkit/boxed_number.hpp	/^      static void validate_boxed_number(const Boxed_Value &v)$/;"	f	class:chaiscript::Boxed_Number	typeref:typename:void
validate_object_name	chaiscript/dispatchkit/dispatchkit.hpp	/^        void validate_object_name(const std::string &name) const$/;"	f	class:chaiscript::detail::Dispatch_Engine	typeref:typename:void
value	animation/duration.h	/^        animation::Duration value;$/;"	m	struct:math::approximately	typeref:typename:animation::Duration
value	animation/time-stamp.h	/^        animation::TimeStamp value;$/;"	m	struct:math::approximately	typeref:typename:animation::TimeStamp
value	easylogging++.h	/^        double value;$/;"	m	struct:el::base::consts::__anoncd3bcdca1008	typeref:typename:double
value	easylogging++.h	/^    inline const std::string& value(void) const {$/;"	f	class:el::Configuration	typeref:typename:const std::string &
value	imaging/color.h	/^        imaging::Color value;$/;"	m	struct:math::approximately	typeref:typename:imaging::Color
value	math/angle.h	/^        Angle value;$/;"	m	struct:math::approximately	typeref:typename:Angle
value	math/approx.h	/^        double value;$/;"	m	struct:math::approximately	typeref:typename:double
value	math/ray.h	/^        math::Ray value;$/;"	m	struct:math::approximately	typeref:typename:math::Ray
value	performance/performance.cpp	/^            uint64_t value() const$/;"	f	class:performance::_private_::CounterImplementation	typeref:typename:uint64_t	file:
value	pipeline/consumer.h	/^            static constexpr bool value = std::is_base_of<pipeline::_private_::ConsumerTag, T>()/;"	m	struct:raytracer::pipeline::is_consumer	typeref:typename:bool
value	pipeline/pipeline-builder.h	/^                T& value;$/;"	m	struct:raytracer::pipeline::_private_::PipelineBuilderStart	typeref:typename:T &
value	pipeline/pipeline-builder.h	/^                T1& value;$/;"	m	struct:raytracer::pipeline::_private_::PipelineBuilder	typeref:typename:T1 &
value	pipeline/processor.h	/^            static constexpr bool value = is_consumer<T>::value && is_producer<T>::value;$/;"	m	struct:raytracer::pipeline::is_processor	typeref:typename:bool
value	pipeline/producer.h	/^            static constexpr bool value = std::is_base_of<pipeline::_private_::ProducerTag, T>()/;"	m	struct:raytracer::pipeline::is_producer	typeref:typename:bool
value	util/lazy.h	/^    T value()$/;"	f	class:Lazy	typeref:typename:T
value_type	chaiscript/dispatchkit/dispatchkit.hpp	/^              typedef typename Container::value_type value_type;$/;"	t	function:chaiscript::detail::Dispatch_Engine::add_keyed_value	typeref:typename:Container::value_type
var	chaiscript/dispatchkit/boxed_value.hpp	/^    Boxed_Value var(T &&t)$/;"	f	namespace:chaiscript	typeref:typename:Boxed_Value
vector_conversion	chaiscript/dispatchkit/type_conversions.hpp	/^    Type_Conversion vector_conversion()$/;"	f	namespace:chaiscript	typeref:typename:Type_Conversion
vector_type	chaiscript/dispatchkit/bootstrap_stl.hpp	/^        ModulePtr vector_type(const std::string &type, ModulePtr m = std::make_shared<Module>())$/;"	f	namespace:chaiscript::bootstrap::standard_library	typeref:typename:ModulePtr
verboseLevel	easylogging++.h	/^    inline base::type::VerboseLevel verboseLevel(void) const { return m_verboseLevel; }$/;"	f	class:el::LogMessage	typeref:typename:base::type::VerboseLevel
verify	scripting/scripting-util.h	/^                void verify()$/;"	f	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:void
verify	scripting/scripting-util.h	/^                void verify(const std::string& tag, std::shared_ptr<SingleArgumentParser> parser/;"	f	class:raytracer::scripting::util::ArgumentMapParser	typeref:typename:void
verify_bitmap_header	imaging/bmp-format.cpp	/^    void verify_bitmap_header(const BITMAP_HEADER_V5* p)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:void
verify_file_header	imaging/bmp-format.cpp	/^    void verify_file_header(const FILE_HEADER* p)$/;"	f	namespace:__anon5b9926d60110	typeref:typename:void
version	chaiscript/language/chaiscript_engine.hpp	/^    static std::string version()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:std::string
version_major	chaiscript/chaiscript_defines.hpp	/^  static const int version_major = 5;$/;"	v	namespace:chaiscript	typeref:typename:const int
version_major	chaiscript/language/chaiscript_engine.hpp	/^    static int version_major()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:int
version_minor	chaiscript/chaiscript_defines.hpp	/^  static const int version_minor = 8;$/;"	v	namespace:chaiscript	typeref:typename:const int
version_minor	chaiscript/language/chaiscript_engine.hpp	/^    static int version_minor()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:int
version_patch	chaiscript/chaiscript_defines.hpp	/^  static const int version_patch = 1;$/;"	v	namespace:chaiscript	typeref:typename:const int
version_patch	chaiscript/language/chaiscript_engine.hpp	/^    static int version_patch()$/;"	f	class:chaiscript::ChaiScript	typeref:typename:int
vertical_subdivisions	math/rasterizer.cpp	/^unsigned math::Rasterizer::vertical_subdivisions() const$/;"	f	class:math::Rasterizer	typeref:typename:unsigned
w	math/vector.h	/^        double w() const$/;"	f	class:math::Vector	typeref:typename:double
w	math/vector.h	/^        double& w()$/;"	f	class:math::Vector	typeref:typename:double &
wcharPtrToCharPtr	easylogging++.h	/^    static char* wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	class:el::base::utils::Str	typeref:typename:char *
what	chaiscript/dispatchkit/any.hpp	/^          virtual const char * what() const CHAISCRIPT_NOEXCEPT CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::detail::exception::bad_any_cast	typeref:typename:const char *
what	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        virtual const char * what() const CHAISCRIPT_NOEXCEPT CHAISCRIPT_OVERRIDE$/;"	f	class:chaiscript::exception::bad_boxed_cast	typeref:typename:const char *
what	chaiscript/dispatchkit/bootstrap.hpp	/^      static std::string what(const std::exception &e)$/;"	f	class:chaiscript::bootstrap::Bootstrap	typeref:typename:std::string
white	imaging/color.h	/^        constexpr Color white()   { return Color{ 1, 1, 1 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
white_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   white_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
width	data-structures/grid.h	/^        unsigned width() const$/;"	f	class:data::Grid	typeref:typename:unsigned
width	imaging/bitmap.cpp	/^unsigned imaging::Bitmap::width() const$/;"	f	class:imaging::Bitmap	typeref:typename:unsigned
wif	imaging/wif-format.h	/^    namespace wif$/;"	n	namespace:imaging
wif	pipeline/wif-consumer.cpp	/^std::shared_ptr<Consumer<std::shared_ptr<imaging::Bitmap>>> raytracer::pipeline::wif(const std::/;"	f	class:raytracer::pipeline	typeref:typename:std::shared_ptr<Consumer<std::shared_ptr<imaging::Bitmap>>>
wif	pipeline/wif-processor.cpp	/^std::shared_ptr<Processor<std::shared_ptr<imaging::Bitmap>, std::shared_ptr<std::vector<uint8_t>/;"	f	class:raytracer::pipeline	typeref:typename:std::shared_ptr<Processor<std::shared_ptr<imaging::Bitmap>,std::shared_ptr<std::vector<uint8_t>>>>
wif	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> wif() const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
wif_to_file	scripting/pipeline-module.cpp	/^        std::shared_ptr<Wrapper> wif_to_file(const std::string& path) const$/;"	f	struct:__anona6a8c5210110::PipelineLibrary	typeref:typename:std::shared_ptr<Wrapper>	file:
wildCardMatch	easylogging++.h	/^    static bool wildCardMatch(const char* str, const char* pattern) {$/;"	f	class:el::base::utils::Str	typeref:typename:bool
word	chaiscript/dispatchkit/dispatchkit.hpp	/^        std::string word() const$/;"	f	class:chaiscript::exception::reserved_word_error	typeref:typename:std::string
workarounds	easylogging++.h	/^namespace workarounds {$/;"	n	namespace:el::base
wrap	scripting/pipeline-module.cpp	/^    std::shared_ptr<Wrapper> wrap(std::shared_ptr<T> x)$/;"	f	namespace:__anona6a8c5210110	typeref:typename:std::shared_ptr<Wrapper>
wrapped	scripting/pipeline-module.cpp	/^        std::shared_ptr<Pipeline> wrapped;$/;"	m	struct:__anona6a8c5210110::Wrapper	typeref:typename:std::shared_ptr<Pipeline>	file:
write	math/point.h	/^            static void write(std::ostream& out, const Point<N>& p)$/;"	f	struct:math::_private_::PointOutputHelper	typeref:typename:void
write	math/point.h	/^            static void write(std::ostream& out, const Point<N>&)$/;"	f	struct:math::_private_::PointOutputHelper	typeref:typename:void
write	math/vector.h	/^            static void write(std::ostream& out, const Vector<N>& v)$/;"	f	struct:math::_private_::VectorOutputHelper	typeref:typename:void
write	math/vector.h	/^            static void write(std::ostream& out, const Vector<N>&)$/;"	f	struct:math::_private_::VectorOutputHelper	typeref:typename:void
write_frame	imaging/wif-format.cpp	/^void imaging::WIF::write_frame(const Bitmap& bitmap)$/;"	f	class:imaging::WIF	typeref:typename:void
write_to_buffer	imaging/wif-format.cpp	/^void write_to_buffer(const T& value, std::vector<uint8_t>& buffer)$/;"	f	typeref:typename:void
x	data-structures/position.h	/^    unsigned x, y, z;$/;"	m	struct:Position3D	typeref:typename:unsigned
x	data-structures/position.h	/^    unsigned x, y;$/;"	m	struct:Position2D	typeref:typename:unsigned
x	math/box.cpp	/^Interval<double> math::Box::x() const$/;"	f	class:math::Box	typeref:typename:Interval<double>
x	math/coordinate-systems.h	/^        double x, y, z;$/;"	m	struct:math::Cartesian3D	typeref:typename:double
x	math/coordinate-systems.h	/^        double x, y;$/;"	m	struct:math::Cartesian2D	typeref:typename:double
x	math/coordinate-systems.h	/^        double x;$/;"	m	struct:math::CylindricalX	typeref:typename:double
x	math/point.h	/^        double x() const$/;"	f	class:math::Point	typeref:typename:double
x	math/point.h	/^        double& x()$/;"	f	class:math::Point	typeref:typename:double &
x	math/vector.h	/^        double x() const$/;"	f	class:math::Vector	typeref:typename:double
x	math/vector.h	/^        double& x()$/;"	f	class:math::Vector	typeref:typename:double &
x	tests/math/transformation-tests.cpp	/^    for (double x = -1; x <= 1; x += 0.25)$/;"	v	typeref:typename:double
x	tests/primitives/disk/disk-tests.cpp	/^    for (double x = -5; x < 5; x += 3.8)$/;"	v	typeref:typename:double
x	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^    for (double x = -2; x < 2; x += 0.37)$/;"	v	typeref:typename:double
x	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^    for (double x = -2; x < 2; x += 0.37)$/;"	v	typeref:typename:double
x	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^    for (double x = -2; x < 2; x += 0.37)$/;"	v	typeref:typename:double
x	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^    for (double x = -2; x < 2; x += 0.37)$/;"	v	typeref:typename:double
x1	math/quadratic_equation.cpp	/^double math::QuadraticEquation::x1() const$/;"	f	class:math::QuadraticEquation	typeref:typename:double
x2	math/quadratic_equation.cpp	/^double math::QuadraticEquation::x2() const$/;"	f	class:math::QuadraticEquation	typeref:typename:double
x_alphabet	chaiscript/language/chaiscript_parser.hpp	/^          ,   x_alphabet$/;"	e	enum:chaiscript::parser::detail::Alphabet
x_axis	math/rectangle2d.h	/^        Vector2D x_axis;$/;"	m	struct:math::Rectangle2D	typeref:typename:Vector2D
x_axis	math/rectangle3d.h	/^        Vector3D x_axis;$/;"	m	struct:math::Rectangle3D	typeref:typename:Vector3D
x_axis	math/vector.h	/^            static T x_axis()$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
xy_plane	primitives/plane-primitive.cpp	/^Primitive raytracer::primitives::xy_plane()$/;"	f	class:raytracer::primitives	typeref:typename:Primitive
xyz	primitives/hit-position.h	/^        math::Point3D xyz;$/;"	m	struct:raytracer::HitPosition	typeref:typename:math::Point3D
y	data-structures/position.h	/^    unsigned x, y, z;$/;"	m	struct:Position3D	typeref:typename:unsigned
y	data-structures/position.h	/^    unsigned x, y;$/;"	m	struct:Position2D	typeref:typename:unsigned
y	math/box.cpp	/^Interval<double> math::Box::y() const$/;"	f	class:math::Box	typeref:typename:Interval<double>
y	math/coordinate-systems.h	/^        double x, y, z;$/;"	m	struct:math::Cartesian3D	typeref:typename:double
y	math/coordinate-systems.h	/^        double x, y;$/;"	m	struct:math::Cartesian2D	typeref:typename:double
y	math/coordinate-systems.h	/^        double y;$/;"	m	struct:math::CylindricalY	typeref:typename:double
y	math/point.h	/^        double y() const$/;"	f	class:math::Point	typeref:typename:double
y	math/point.h	/^        double& y()$/;"	f	class:math::Point	typeref:typename:double &
y	math/vector.h	/^        double y() const$/;"	f	class:math::Vector	typeref:typename:double
y	math/vector.h	/^        double& y()$/;"	f	class:math::Vector	typeref:typename:double &
y	tests/math/transformation-tests.cpp	/^        for (double y = -1; y <= 1; y += 0.25)$/;"	v	typeref:typename:double
y	tests/primitives/disk/disk-tests.cpp	/^            for (double y = 0.1; y < 100; y *= 1.5)$/;"	v	typeref:typename:double
y	tests/primitives/disk/disk-tests.cpp	/^            for (double y = 0.1; y < 10; y += 3.5)$/;"	v	typeref:typename:double
y	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^        for (double y = -2; y < 2; y += 0.14)$/;"	v	typeref:typename:double
y	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^        for (double y = -2; y < 2; y += 0.14)$/;"	v	typeref:typename:double
y	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^        for (double y = -2; y < 2; y += 0.14)$/;"	v	typeref:typename:double
y	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^        for (double y = -2; y < 2; y += 0.14)$/;"	v	typeref:typename:double
y_axis	math/rectangle2d.h	/^        Vector2D y_axis;$/;"	m	struct:math::Rectangle2D	typeref:typename:Vector2D
y_axis	math/rectangle3d.h	/^        Vector3D y_axis;$/;"	m	struct:math::Rectangle3D	typeref:typename:Vector3D
y_axis	math/vector.h	/^            static T y_axis()$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
y_axis	tests/math/transformation-tests.cpp	/^                    Vector3D y_axis = Vector3D(x, y, z).normalized();$/;"	v	typeref:typename:Vector3D
y_axis	tests/math/transformation-tests.cpp	/^        Vector3D y_axis = Vector3D(1, -1, 1).normalized();$/;"	v	typeref:typename:Vector3D
y_axis	tests/math/transformation-tests.cpp	/^        Vector3D y_axis = Vector3D(1, 1, 0).normalized();$/;"	v	typeref:typename:Vector3D
y_axis	tests/math/transformation-tests.cpp	/^        Vector3D y_axis = Vector3D(1, 1, 1).normalized();$/;"	v	typeref:typename:Vector3D
y_axis	tests/math/transformation-tests.cpp	/^        Vector3D y_axis(0, 1, 0);$/;"	v	typeref:typename:Vector3D
yellow	imaging/color.h	/^        constexpr Color yellow()  { return Color{ 1, 1, 0 }; }$/;"	f	namespace:imaging::colors	typeref:typename:Color
z	data-structures/position.h	/^    unsigned x, y, z;$/;"	m	struct:Position3D	typeref:typename:unsigned
z	math/box.cpp	/^Interval<double> math::Box::z() const$/;"	f	class:math::Box	typeref:typename:Interval<double>
z	math/coordinate-systems.h	/^        double x, y, z;$/;"	m	struct:math::Cartesian3D	typeref:typename:double
z	math/coordinate-systems.h	/^        double z;$/;"	m	struct:math::CylindricalZ	typeref:typename:double
z	math/point.h	/^        double z() const$/;"	f	class:math::Point	typeref:typename:double
z	math/point.h	/^        double& z()$/;"	f	class:math::Point	typeref:typename:double &
z	math/vector.h	/^        double z() const$/;"	f	class:math::Vector	typeref:typename:double
z	math/vector.h	/^        double& z()$/;"	f	class:math::Vector	typeref:typename:double &
z	tests/math/transformation-tests.cpp	/^            for (double z = -1; z <= 1; z += 0.25)$/;"	v	typeref:typename:double
z	tests/primitives/disk/disk-tests.cpp	/^        for (double z = -5; z < 5; z += 4.1)$/;"	v	typeref:typename:double
z	tests/primitives/plane/xy-plane-consistency-tests.cpp	/^            for (double z = -2; z < 2; z += 0.72)$/;"	v	typeref:typename:double
z	tests/primitives/plane/xz-plane-consistency-tests.cpp	/^            for (double z = -2; z < 2; z += 0.72)$/;"	v	typeref:typename:double
z	tests/primitives/plane/yz-plane-consistency-tests.cpp	/^            for (double z = -2; z < 2; z += 0.72)$/;"	v	typeref:typename:double
z	tests/primitives/sphere/sphere-hit-consistency-tests.cpp	/^            for (double z = -2; z < 2; z += 0.72)$/;"	v	typeref:typename:double
z	tests/raytracers/v1/raytracer-v1-tests.cpp	/^        for (double z = 1.1; z < 100; z *= 1.4)$/;"	v	typeref:typename:double
z_axis	math/vector.h	/^            static T z_axis()$/;"	f	class:math::_private_::DimensionSpecificMembers	typeref:typename:T
zero	animation/duration.cpp	/^Duration animation::Duration::zero()$/;"	f	class:animation::Duration	typeref:typename:Duration
zero	animation/time-stamp.h	/^        static TimeStamp zero() { return TimeStamp(); }$/;"	f	class:animation::TimeStamp	typeref:typename:TimeStamp
zero_matrix	math/matrix.h	/^    Matrix<N> zero_matrix()$/;"	f	namespace:math	typeref:typename:Matrix<N>
~AST_Node	chaiscript/language/chaiscript_common.hpp	/^      virtual ~AST_Node() {}$/;"	f	struct:chaiscript::AST_Node
~AbstractRegistry	easylogging++.h	/^    virtual ~AbstractRegistry(void) {$/;"	f	class:el::base::utils::AbstractRegistry
~Annotation_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Annotation_AST_Node() {}$/;"	f	struct:chaiscript::eval::Annotation_AST_Node
~Any	chaiscript/dispatchkit/any.hpp	/^        ~Any()$/;"	f	class:chaiscript::detail::Any
~Arg_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Arg_AST_Node() {}$/;"	f	struct:chaiscript::eval::Arg_AST_Node
~Arg_List_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Arg_List_AST_Node() {}$/;"	f	struct:chaiscript::eval::Arg_List_AST_Node
~Array_Call_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Array_Call_AST_Node() {}$/;"	f	struct:chaiscript::eval::Array_Call_AST_Node
~Assignable_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Assignable_Proxy_Function() {}$/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function
~Assignable_Proxy_Function_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Assignable_Proxy_Function_Impl() {}$/;"	f	class:chaiscript::dispatch::Assignable_Proxy_Function_Impl
~AsyncDispatchWorker	easylogging++.h	/^    virtual ~AsyncDispatchWorker() {$/;"	f	class:el::base::AsyncDispatchWorker
~AsyncLogItem	easylogging++.h	/^    virtual ~AsyncLogItem() {}$/;"	f	class:el::base::AsyncLogItem
~AsyncLogQueue	easylogging++.h	/^    virtual ~AsyncLogQueue() {$/;"	f	class:el::base::AsyncLogQueue
~Attr_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Attr_Decl_AST_Node() {}$/;"	f	struct:chaiscript::eval::Attr_Decl_AST_Node
~Attribute_Access	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Attribute_Access() {}$/;"	f	class:chaiscript::dispatch::Attribute_Access
~Binary_Operator_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Binary_Operator_AST_Node() {}$/;"	f	struct:chaiscript::eval::Binary_Operator_AST_Node
~Block_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Block_AST_Node() {}$/;"	f	struct:chaiscript::eval::Block_AST_Node
~Bound_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Bound_Function() {}$/;"	f	class:chaiscript::dispatch::Bound_Function
~Break_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Break_AST_Node() {}$/;"	f	struct:chaiscript::eval::Break_AST_Node
~Case_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Case_AST_Node() {}$/;"	f	struct:chaiscript::eval::Case_AST_Node
~Catch_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Catch_AST_Node() {}$/;"	f	struct:chaiscript::eval::Catch_AST_Node
~Char_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Char_AST_Node() {}$/;"	f	struct:chaiscript::eval::Char_AST_Node
~Char_Parser	chaiscript/language/chaiscript_parser.hpp	/^        ~Char_Parser(){$/;"	f	struct:chaiscript::parser::ChaiScript_Parser::Char_Parser
~Class_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Class_AST_Node() {}$/;"	f	struct:chaiscript::eval::Class_AST_Node
~CommandLineArgs	easylogging++.h	/^    virtual ~CommandLineArgs(void) {}$/;"	f	class:el::base::utils::CommandLineArgs
~Configuration	easylogging++.h	/^    virtual ~Configuration(void) {$/;"	f	class:el::Configuration
~Configurations	easylogging++.h	/^    virtual ~Configurations(void) {$/;"	f	class:el::Configurations
~Continue_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Continue_AST_Node() {}$/;"	f	struct:chaiscript::eval::Continue_AST_Node
~DLModule	chaiscript/language/chaiscript_engine.hpp	/^        ~DLModule()$/;"	f	struct:chaiscript::detail::Loadable_Module::DLModule
~Data	chaiscript/dispatchkit/any.hpp	/^          virtual ~Data() {}$/;"	f	struct:chaiscript::detail::Any::Data
~Data_Impl	chaiscript/dispatchkit/any.hpp	/^            virtual ~Data_Impl() {}$/;"	f	struct:chaiscript::detail::Any::Data_Impl
~Def_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Def_AST_Node() {}$/;"	f	struct:chaiscript::eval::Def_AST_Node
~Default_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Default_AST_Node() {}$/;"	f	struct:chaiscript::eval::Default_AST_Node
~Dispatch_Engine	chaiscript/dispatchkit/dispatchkit.hpp	/^        ~Dispatch_Engine()$/;"	f	class:chaiscript::detail::Dispatch_Engine
~Dispatch_Function	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual ~Dispatch_Function() {}$/;"	f	class:chaiscript::detail::Dispatch_Function
~Dot_Access_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Dot_Access_AST_Node() {}$/;"	f	struct:chaiscript::eval::Dot_Access_AST_Node
~Dynamic_Object_Constructor	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual ~Dynamic_Object_Constructor() {}$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Constructor
~Dynamic_Object_Function	chaiscript/dispatchkit/dynamic_object_detail.hpp	/^          virtual ~Dynamic_Object_Function() {}$/;"	f	class:chaiscript::dispatch::detail::Dynamic_Object_Function
~Dynamic_Proxy_Function	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Dynamic_Proxy_Function() {}$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function
~Dynamic_Proxy_Function_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Dynamic_Proxy_Function_Impl() {}$/;"	f	class:chaiscript::dispatch::Dynamic_Proxy_Function_Impl
~Eol_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Eol_AST_Node() {}$/;"	f	struct:chaiscript::eval::Eol_AST_Node
~Equation_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Equation_AST_Node() {}$/;"	f	struct:chaiscript::eval::Equation_AST_Node
~Exception_Handler_Base	chaiscript/dispatchkit/exception_specification.hpp	/^      virtual ~Exception_Handler_Base() {}$/;"	f	struct:chaiscript::detail::Exception_Handler_Base
~Exception_Handler_Impl1	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual ~Exception_Handler_Impl1() {}$/;"	f	struct:chaiscript::detail::Exception_Handler_Impl1
~Exception_Handler_Impl2	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual ~Exception_Handler_Impl2() {}$/;"	f	struct:chaiscript::detail::Exception_Handler_Impl2
~Exception_Handler_Impl3	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual ~Exception_Handler_Impl3() {}$/;"	f	struct:chaiscript::detail::Exception_Handler_Impl3
~Exception_Handler_Impl4	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual ~Exception_Handler_Impl4() {}$/;"	f	struct:chaiscript::detail::Exception_Handler_Impl4
~Exception_Handler_Impl5	chaiscript/dispatchkit/exception_specification.hpp	/^        virtual ~Exception_Handler_Impl5() {}$/;"	f	struct:chaiscript::detail::Exception_Handler_Impl5
~File_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~File_AST_Node() {}$/;"	f	struct:chaiscript::eval::File_AST_Node
~Finally_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Finally_AST_Node() {}$/;"	f	struct:chaiscript::eval::Finally_AST_Node
~Float_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Float_AST_Node() {}$/;"	f	struct:chaiscript::eval::Float_AST_Node
~For_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~For_AST_Node() {}$/;"	f	struct:chaiscript::eval::For_AST_Node
~Fun_Call_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Fun_Call_AST_Node() {}$/;"	f	struct:chaiscript::eval::Fun_Call_AST_Node
~Function_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^        ~Function_Push_Pop()$/;"	f	struct:chaiscript::eval::detail::Function_Push_Pop
~Global_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Global_Decl_AST_Node() {}$/;"	f	struct:chaiscript::eval::Global_Decl_AST_Node
~HitCounter	easylogging++.h	/^    virtual ~HitCounter(void) {$/;"	f	class:el::base::HitCounter
~IWorker	easylogging++.h	/^    virtual ~IWorker() {}$/;"	f	class:el::base::IWorker
~Id_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Id_AST_Node() {}$/;"	f	struct:chaiscript::eval::Id_AST_Node
~If_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~If_AST_Node() {}$/;"	f	struct:chaiscript::eval::If_AST_Node
~Inline_Array_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Inline_Array_AST_Node() {}$/;"	f	struct:chaiscript::eval::Inline_Array_AST_Node
~Inline_Map_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Inline_Map_AST_Node() {}$/;"	f	struct:chaiscript::eval::Inline_Map_AST_Node
~Inline_Range_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Inline_Range_AST_Node() {}$/;"	f	struct:chaiscript::eval::Inline_Range_AST_Node
~Int_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Int_AST_Node() {}$/;"	f	struct:chaiscript::eval::Int_AST_Node
~IterableContainer	easylogging++.h	/^    virtual ~IterableContainer(void) {}$/;"	f	class:el::base::workarounds::IterableContainer
~JSON	chaiscript/utility/json.hpp	/^        ~JSON() {$/;"	f	class:json::JSON
~Lambda_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Lambda_AST_Node() {}$/;"	f	struct:chaiscript::eval::Lambda_AST_Node
~LogBuilder	easylogging++.h	/^    virtual ~LogBuilder(void) { ELPP_INTERNAL_INFO(3, "Destroying log builder...")}$/;"	f	class:el::LogBuilder
~LogFormat	easylogging++.h	/^    virtual ~LogFormat(void) {$/;"	f	class:el::base::LogFormat
~Loggable	easylogging++.h	/^    virtual ~Loggable(void) {}$/;"	f	class:el::Loggable
~Logger	easylogging++.h	/^    virtual ~Logger(void) {$/;"	f	class:el::Logger
~Logical_And_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Logical_And_AST_Node() {}$/;"	f	struct:chaiscript::eval::Logical_And_AST_Node
~Logical_Or_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Logical_Or_AST_Node() {}$/;"	f	struct:chaiscript::eval::Logical_Or_AST_Node
~Map_Pair_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Map_Pair_AST_Node() {}$/;"	f	struct:chaiscript::eval::Map_Pair_AST_Node
~Method_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Method_AST_Node() {}$/;"	f	struct:chaiscript::eval::Method_AST_Node
~Module	chaiscript/dispatchkit/dispatchkit.hpp	/^      ~Module()$/;"	f	class:chaiscript::Module
~Mutex	easylogging++.h	/^    virtual ~Mutex(void) {$/;"	f	class:el::base::threading::internal::Mutex
~Noop_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Noop_AST_Node() {}$/;"	f	struct:chaiscript::eval::Noop_AST_Node
~PerformanceCleanerUpper	performance/performance.h	/^        ~PerformanceCleanerUpper()$/;"	f	class:performance::PerformanceCleanerUpper
~Pipeline	pipeline/pipeline.h	/^            virtual ~Pipeline() { } \/\/ Needed to make class polymorphic$/;"	f	class:raytracer::pipeline::Pipeline
~Prefix_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Prefix_AST_Node() {}$/;"	f	struct:chaiscript::eval::Prefix_AST_Node
~Proxy_Function_Base	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Proxy_Function_Base() {}$/;"	f	class:chaiscript::dispatch::Proxy_Function_Base
~Proxy_Function_Callable_Impl	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Proxy_Function_Callable_Impl() {}$/;"	f	class:chaiscript::dispatch::Proxy_Function_Callable_Impl
~Proxy_Function_Impl_Base	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~Proxy_Function_Impl_Base() {}$/;"	f	class:chaiscript::dispatch::Proxy_Function_Impl_Base
~Quoted_String_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Quoted_String_AST_Node() {}$/;"	f	struct:chaiscript::eval::Quoted_String_AST_Node
~Reference_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Reference_AST_Node() {}$/;"	f	struct:chaiscript::eval::Reference_AST_Node
~RegisteredLoggers	easylogging++.h	/^    virtual ~RegisteredLoggers(void) {$/;"	f	class:el::base::RegisteredLoggers
~Registry	easylogging++.h	/^    virtual ~Registry(void) {$/;"	f	class:el::base::utils::Registry
~RegistryWithPred	easylogging++.h	/^    virtual ~RegistryWithPred(void) {$/;"	f	class:el::base::utils::RegistryWithPred
~Return_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Return_AST_Node() {}$/;"	f	struct:chaiscript::eval::Return_AST_Node
~Scope_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^        ~Scope_Push_Pop()$/;"	f	struct:chaiscript::eval::detail::Scope_Push_Pop
~ScopedLock	easylogging++.h	/^    virtual ~ScopedLock(void) {$/;"	f	class:el::base::threading::internal::ScopedLock
~Single_Quoted_String_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Single_Quoted_String_AST_Node() {}$/;"	f	struct:chaiscript::eval::Single_Quoted_String_AST_Node
~Stack_Push_Pop	chaiscript/language/chaiscript_common.hpp	/^        ~Stack_Push_Pop()$/;"	f	struct:chaiscript::eval::detail::Stack_Push_Pop
~Storage	easylogging++.h	/^    virtual ~Storage(void) {$/;"	f	class:el::base::Storage
~Str_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Str_AST_Node() {}$/;"	f	struct:chaiscript::eval::Str_AST_Node
~Switch_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Switch_AST_Node() {}$/;"	f	struct:chaiscript::eval::Switch_AST_Node
~Ternary_Cond_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Ternary_Cond_AST_Node() {}$/;"	f	struct:chaiscript::eval::Ternary_Cond_AST_Node
~This_Foist	chaiscript/dispatchkit/dispatchkit.hpp	/^                  ~This_Foist() {$/;"	f	struct:chaiscript::detail::Dispatch_Engine::call_member::__anon2c2de5d30602::This_Foist
~ThreadSafe	easylogging++.h	/^    virtual ~ThreadSafe(void) {}$/;"	f	class:el::base::threading::ThreadSafe
~Thread_Storage	chaiscript/chaiscript_threading.hpp	/^            ~Thread_Storage()$/;"	f	class:chaiscript::detail::threading::Thread_Storage
~Try_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Try_AST_Node() {}$/;"	f	struct:chaiscript::eval::Try_AST_Node
~Type_Conversion_Base	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual ~Type_Conversion_Base() {}$/;"	f	class:chaiscript::detail::Type_Conversion_Base
~TypedConfigurations	easylogging++.h	/^    virtual ~TypedConfigurations(void) {$/;"	f	class:el::base::TypedConfigurations
~Value_Range_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Value_Range_AST_Node() {}$/;"	f	struct:chaiscript::eval::Value_Range_AST_Node
~Var_Decl_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~Var_Decl_AST_Node() {}$/;"	f	struct:chaiscript::eval::Var_Decl_AST_Node
~WIF	imaging/wif-format.cpp	/^imaging::WIF::~WIF()$/;"	f	class:imaging::WIF
~While_AST_Node	chaiscript/language/chaiscript_eval.hpp	/^        virtual ~While_AST_Node() {}$/;"	f	struct:chaiscript::eval::While_AST_Node
~arithmetic_error	chaiscript/dispatchkit/boxed_number.hpp	/^      virtual ~arithmetic_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	struct:chaiscript::exception::arithmetic_error
~arity_error	chaiscript/dispatchkit/proxy_functions_detail.hpp	/^      virtual ~arity_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	struct:chaiscript::exception::arity_error
~bad_any_cast	chaiscript/dispatchkit/any.hpp	/^          virtual ~bad_any_cast() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::detail::exception::bad_any_cast
~bad_boxed_cast	chaiscript/dispatchkit/bad_boxed_cast.hpp	/^        virtual ~bad_boxed_cast() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::bad_boxed_cast
~bad_boxed_dynamic_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual ~bad_boxed_dynamic_cast() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::bad_boxed_dynamic_cast
~bad_boxed_type_cast	chaiscript/dispatchkit/type_conversions.hpp	/^        virtual ~bad_boxed_type_cast() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::bad_boxed_type_cast
~dispatch_error	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~dispatch_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::dispatch_error
~eval_error	chaiscript/language/chaiscript_common.hpp	/^      virtual ~eval_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	struct:chaiscript::exception::eval_error
~file_not_found_error	chaiscript/language/chaiscript_common.hpp	/^      virtual ~file_not_found_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	struct:chaiscript::exception::file_not_found_error
~global_non_const	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual ~global_non_const() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::global_non_const
~guard_error	chaiscript/dispatchkit/proxy_functions.hpp	/^        virtual ~guard_error() CHAISCRIPT_NOEXCEPT$/;"	f	class:chaiscript::exception::guard_error
~illegal_name_error	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual ~illegal_name_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::illegal_name_error
~load_module_error	chaiscript/language/chaiscript_engine.hpp	/^      virtual ~load_module_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	struct:chaiscript::exception::load_module_error
~name_conflict_error	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual ~name_conflict_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::name_conflict_error
~option_explicit_set	chaiscript/dispatchkit/dynamic_object.hpp	/^      virtual ~option_explicit_set() CHAISCRIPT_NOEXCEPT {}$/;"	f	struct:chaiscript::dispatch::option_explicit_set
~reserved_word_error	chaiscript/dispatchkit/dispatchkit.hpp	/^        virtual ~reserved_word_error() CHAISCRIPT_NOEXCEPT {}$/;"	f	class:chaiscript::exception::reserved_word_error
