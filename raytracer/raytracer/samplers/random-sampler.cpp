#include "samplers/random-sampler.h"
#include <random>

using namespace math;
using namespace raytracer;


namespace
{
    class RandomSampler : public raytracer::samplers::_private_::SamplerImplementation
    {
    public:
		RandomSampler(int sample_count)
		{
			m_sample_count = sample_count;
		}

		void sample(const math::Rectangle2D& rectangle, std::function<void(const math::Point2D&)> function) const override
		{
			std::random_device rd;  //Will be used to obtain a seed for the random number engine
			std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
			// Use dis to transform the random unsigned int generated by gen into a 
			// double in [0, 1). Each call to dis(gen) generates a new random double
			std::uniform_real_distribution<> dis(0, 1.0);

			for (int n = 0; n < m_sample_count; n++) {
				auto p = Point2D(dis(gen), dis(gen));
				function(rectangle.from_relative(p));
			}
		}
	private:
		int m_sample_count;
    };
}

Sampler raytracer::samplers::random(int sample_count)
{
    return Sampler(std::make_shared<RandomSampler>(sample_count));
}